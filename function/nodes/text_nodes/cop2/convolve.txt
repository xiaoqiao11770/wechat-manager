#type: node
#context: cop2
#internal: convolve
#icon: COP2/convolve

= Convolve =

"""Performs a generic convolve on the source image."""

This operation performs a generic convolve on the source image. The
convolve kernel can be supplied as either the second input, or through
the matrix parameters.

When using a second input as a kernel source, it should be a _small_
image (no bigger than 50x50). Otherwise the cook time for the node will
be incredibly long.

== Usage ==

    A convolve kernel provides a simple way to do a weighted sum of
    neighboring pixels. The matrix of numbers represents the
    contributions of each pixel to the output pixel. The center pixel
    corresponds to the position of the output pixel being processed.

    If a kernel matrix is unbalanced in any direction (not symmetric)
    the output image will shift. Also, if the kernel weights do not sum
    to 1, the output image will either brighten or darken. The parameter
    'Normalize Kernel' can be used to automatically fit the weights so
    that they sum to 1.

    Some sample kernels (3x3):

    {{{
    0.11 0.11 0.11
    0.11 0.11 0.11         3x3 Box blur
    0.11 0.11 0.11
    -0.125 -0.125 -0.125
    -0.125    2   -0.125   Sharpen
    -0.125 -0.125 -0.125
    0   0   0
    -1  0   1              Horizontal Edge Detect
    0   0   0
    }}}
[Include:coppixelparms#coppixeldescription/]

[Include:copmaskparms#copmaskdescription/]


@parameters
    Kernel Size:
        The size of the convolve kernel matrix to use.
    -4..0..4:
        The rows of the kernel matrix. The matrix is always centered in
        the middle of the 9x9 set of parameters. In the case of an even
        size, the matrix will extend further down, or to right.
    Kernel Plane:
        Which plane of the second input to use as the kernel matrix.
    Normalize Kernel:
        Scales each component of the kernel to ensure that the absolute
        value of the sum of the components is 1. This has no effect if
        the components sum to 0.
    [Include:copmaskparms#copmaskparms/]

    [Include:coppixelparms#coppixelparms/]

@locals
    [Include:coplocalvars]


