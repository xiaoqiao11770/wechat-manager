#type: node
#context: cop2
#internal: blur
#icon: COP2/blur

= Blur =

"""Blurs an image."""

This operation blurs an image. If a mask is used, it can be used as a
normal mask, or it can alter the blur kernel per pixel to produce a more
accurate blur.

Together with the Depth Of Field COP (providing the mask), this
operation can do depth of field blurring.

[Include:coppixelparms#coppixeldescription/]

[Include:copmaskparms#copmaskdescription/]


@parameters

    == Blur ==

        X/Y Filter:
            Defines the blur kernel function.
        Size:
            Defines the diameter of the blur for both X and Y.
        Y Size:
            Turn on to adjust the diameter of the blur for Y
            independently of X ('Size' now controls X Size).
        Units:
            Defines the units that the diameter of the blur is expressed
            in.

            UV Coords:
                Values are expressed between 0 and 1, where 0 maps to a
                1x1 blur (none) and 1 maps to xres x yres blur. This is
                resolution independent.
            Pixels:
                The blur is expressed in pixels.
        Per-Pixel Blur:
            If on, the mask affects the diameter of the blur at each
            pixel, rather than just blending the input with the output.
            This produces much more realistic blur transitions for
            grayscale masks, at a significant performance expense. The
            float value specifies the kernel size tolerance. By default
            this is set to 0.1, so only kernels evenly divisible by 0.1
            will be used. Higher values blur faster, but tend to
            introduce ringing artifacts. Set to zero for completely
            accurate blurs (very slow for floating point masks).
        Fast Blur:
            If on, the blur is done using a faster approximation
            technique. This option is only supported for Box, Bartlett
            (Cone) and Gaussian filters. The error is generally less
            than 1%, though for small filter widths (<10) it can be more
            significant (5-7%). Images with extremely high dynamic
            ranges may have higher error. For large filter sizes
            (1000's), this technique is orders of magnitude faster than
            the mathematically accurate blurs.
    [Include:coppixelparms#coppixelparms/]

    [Include:copmaskparms#copmaskparms/]

@locals
    [Include:coplocalvars]


@related
    - [Node:cop2/edgeblur]
    - [Node:cop2/radialblur]
    - [Node:cop2/sharpen]

