#type: node
#context: cop2
#internal: function
#icon: COP2/function

= Function =

"""Performs a variety of mathematical functions on the input image."""

This operation performs a mathematical function on the input image. The
operations available are:

* * Abs(x) * - Absolute Value. Makes all negative values positive

* * Sign(x) * - Sign function. Returns 1 if positive, -1 if negative or
  0 if zero

* * -x * - Negate

* * 1/x * - Reciprocal*

* * Floor(x) * - Rounds down all fractional values to the next lower
  integer

* * Round(x) * - Rounds all fractional values to the nearest integer

* * Ceil(x) * - Rounds down fractional values to the next higher
  integer

* * Sqrt(x) * - Square Root**

* * x^E * - Raises the value to an exponent, given by the exponent
  parameter (may produce errors if E is fractional and x is negative)

* * B^x * - Raises the base to the exponent 'value' (may produce errors
  if base is negative and value is fractional)

* * e^x * - Computes e^x, where e is 2.7182...

* * Log(x) * - Computes Log (base B) of the value. B is defined by the
  'Base' parameter * **

* * Ln(x) * - Computes the Natural Log (base e) of the value * **

* * Sin(x) * - Computes the sine of x (x is in degrees)

* * Sin(360x) * - Computes the sine of (x times 360), which is easy to
  use with 0-1 values (x is in degrees/360)

* * Cos(x) * - Computes the cosine of x (x is in degrees)

* * Cos(360x) * - Computes the cosine of (x times 360) (x is in
  degrees)

* * Tan(x) * - Computes the tangent of x (x is in degrees). Produces a
  mathematical error for values of 90, -90, 270, -270

* * Tan(360x) * - Computes the tangent of x times 360 (x is in degrees).
  Produces a mathematical error for values of 0.25, -0.25, 0.75, -0.75

* * ASin(x) * - Computes the arcsine of x, returning the result in
  degrees. Produces a mathematical error if x is greater than 1 or less
  than -1

* * ASin(x)/360 * - Computes the arcsine of x, returning the result in
  the range -1 to 1. Produces a mathematical error if x is greater than
  1 or less than -1

* * ACos(x) * - Computes the arccosine of x, returning the result in
  degrees. Produces a mathematical error if x is greater than 1 or less
  than -1

* * ACos(x)/360 * - Computes the arccosine of x, returning the result in
  the range -1 to 1. Produces a mathematical error if x is greater than
  1 or less than -1

* * ATan(x) * - Computes the arctangent of x, returning the result in
  degrees

* * ATan(x)/360 * - Computes the arctangent of x, returning the result
  in the range -1 to 1

* * Sinh(x) * - Computes the hyperbolic sine of x

* * Sinh(360x) * - Computes the hyperbolic sine of (x times 360)

* * Cosh(x) * - Computes the hyperbolic cosine of x

* * Cosh(360x) * - Computes the hyperbolic cosine of (x times 360)

* * Tanh(x) * - Computes the hyperbolic tangent of x

* * Tanh(360x) * - Computes the hyperbolic tangent of (x times 360)

_x_ is the input pixel value.

*** - Produces a mathematical error if the value is zero. See the
'Error Handling' parameter.

**** - Produces a mathematical error if the value is negative. See the
'Error Handling' parameter.

NOTE:
    This operator help is not meant to be an exhaustive tutorial on
    mathematical functions.

[Include:coppixelparms#coppixeldescription/]

[Include:copmaskparms#copmaskdescription/]

[Include:coppixelopparms#coppixelopdescription/]


@parameters

    == Function ==

        Function:
            The math function to perform.
        Base:
            #channels: /base

            The base for LogX and B^x.
        Exponent:
            #channels: /exp

            The exponent for x^E.
        Error Handling:
            On a math error, the value causing the error can be replaced
            with an error value or kept as is.
        Error Value:
            #channels: /errval

            The value to replace errors with.
    [Include:coppixelopparms#coppixelopparms/]

    [Include:copmaskparms#copmaskparms/]

    [Include:coppixelparms#coppixelparms/]

@locals
    [Include:coplocalvars]


@related
    - [Node:cop2/pixel]

