#type: node
#context: pop
#internal: attribute
#icon: POP/attribute

#tags: attrs

= Attribute =

"""Adds custom attributes to particles."""

This operator can add [float, integer, or
vector|/expressions/_datatypes]  user attributes to the input
particles. After you add a user attribute, you can use it anywhere local
variables are allowed.

If you do not specify a Local Variable name, Houdini will use the
attribute name (converted to uppercase). Because Houdini allows the
creation of attribute arrays, the local variable name ends up being the
attribute name followed by an index (even if the attribute created is
not an array). So, if you create an attribute `foo`, the local variable
will be `FOO1`.

For example, Vector attribute "abc" will create local variables `$ABCX`,
`$ABCY`, and `$ABCZ`. Float attribute "abc" of size 2 will create the
local `$ABC1` and `$ABC2`.

The Attribute POP allows you to both create and reset attributes. Since
we know that an attribute called _foo_ maps to _$FOO1_, you can just
recreate _$FOO1_ with another Attribute POP.


@parameters
    [Include:commonParms#commonMain/]

    Name:
        Name of the attribute to create/set.

    Local Variable:
        Name of the corresponding local variable. Houdini will convert
        this name to uppercase for consistency with built-in locals.

    Type:
        The  [type of value|/expressions/_datatypes]  the attribute
        can hold: Float, Integer or Vector.

    Size:
        An attribute can hold an array of values. To create an array,
        set this parameter to the number of elements in the array.

    Default:
        Default value for the attribute.

    Write Values:
	Disabling the writing of values prevents the Attribute POP
	from changing the attributes.  This is useful if you merely
	want to ensure the attribute exists but want to preserve any
	existing values.

    Value:
        #channels: /value1 /value2 /value3

        Value to set attribute to.

@locals
    [Include:standard_locals]


