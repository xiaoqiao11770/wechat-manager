#type: node
#context: pop
#internal: curlnoise
#icon: POP/curlnoise

#tags: forces, gravity

= Curl Noise =

"""Applies a divergent free noise field to particles.."""

The Curl Noise POP is designed to apply a divergent free noise field
to particles.  A divergent free field has no "sinks" or "sources" so
particles will move turbulently without accumulating in any location.

Extra advection options are possible to directly set the velocity or
position attribute to add layers of passive curl noise without
affecting the particle's acceleration.

NOTE:
    This is a common POP to add to FLIP fluid simulations, since it plays very predictably with any fluid simulations that contains a [Gas Project Non-Divergence DOP|Node:dop/gasprojectnondivergent].

@parameters

[Include:commonParms#commonMain/]

Noise Type:
    Specifies the noise type.

    Perlin Noise:
        Standard noise which performs a 3 dimensional hermite spline interpolation on a lattice of random values.
    Original Perlin Noise:
        Similar to Perlin Noise, but marginally less efficient in computation and with different characteristics.
    Sparse Convolution Noise:
        Slower, more random.
    Alligator Noise:
        Slow, cell-like noise.
    Simplex Noise:
	Noise based on a tetrahedral mesh rather than a grid, with better
	derivatives.
    Analytic Perlin Noise, Simplex Noise:
	These are faster versions of the noise that do not use the step size to
	compute the noise, but rather evaluate it directly.

Offset:
    #channels: /offsetx /offsety /offsetz

    Allows the noise field to be effectively moved through space.

Frequency:
    #channels: /frequencyx /frequencyy /frequencyz

    The scale of the noise. Decreasing frequency increases feature
    size.

Step Size:
    Controls the resolution of the curl function used to generate the noise. A lower value will lead to tighter spirals in the noise.

Amplitude:
    #channels: /amp

    Maximum value of noise field.

Attenuation:
    #channels: /attenuation

    Raises the noise to the given exponent.

Turbulence:
    #channels: /turb

    Number of iterations of fractal noise to add.

Roughness:
    #channels: /rough

    Scale of noise added with each iteration.

Collision SDF:
    A volume that is a signed distance field used for collision calculations.  The turbulence is damped near the collision object to prevent particles from passing through.

Enable Bouncing:
    When particles cross the SDF boundary they have their velocities reversed according to the SDF normal and are pushed outside of the SDF.

Collision Effect Radius:
    The distance at which the particles start to slow down due to a collision object.

Time Varying:
    The noise will be a 4d noise that changes over time.
Pulse Duration:
    How long in seconds for the noise to complete change itself.

Advection Type:
    There are several different ways to update a particle system in response to an external velocity field.  They are broadly categorized as Force, Velocity, and Position updates.

    The Force Update will adjust the acceleration of the particles according to their mass, the force scale, and the velocity field.  This acts like the [Force POP|Node:pop/force].

    Blend Velocity directly changes the velocity of the particles by blending in the velocity field causing them to swiftly match the velocity field.

    Position Update directly moves the velocity positions.  This is useful as it allows the particles own velocity to be considered independently of the bulk fluid velocity.  Position Update is similar to what the [Gas Advect DOP|Node:dop/gasadvect] would perform.

Force Scale:
    Scales the force for force update.

Ignore Mass:
    Treats all particles as having unit mass, ignoring any mass attribute.

Override Mass:
    Ignore the mass attribute and use the specified mass.

Mass:
    The mass to use if mass is overridden.

Treat As Wind:
    Instead of applying a force in the direction of the velocity field, the force is applied relative to the difference between the particle's velocity and the velocity field.  This effectively adds an implicit drag that causes the particles to match the velocity field.

Velocity Blend:
    In Velocity Blend mode, the amount to mix in the field velocity every timestep.

Velocity Add:
    In Velocity Blend mode, the amount to add the curlnoise velocity to the particle's velocity.  This can be useful in addition to advectbyvolume to layer turbulence on a velocity field.

Velocity Update:
    In Position Update mode it is possible to read in the velocity from the velocity field.  Note that the resulting velocity will be used by the particle integrator, so unless something special is done this could result in double-moving the particle.
    
Number of threads:
    The number of threads to create to process the VEX commands. If
    you have multiple processors, this can speed up processing of
    the node.

    No threading:
        Do not perform parallel processing.
    One per processor:
        Create one thread for each processor in your computer.
    Two threads:
        Create two threads.

@related

- [Node:pop/force]
- [Node:pop/wind]

