#type: node
#context: vop
#internal: parameter
#icon: VOP/parameter

= Parameter =

"""Represents a user-controllable parameter."""

The Parameter node represents the value of one of the parameters the
user can set in the shader's parameter editor interface.
For example, in a Balloon shader, you could define a parameter for
the Balloon Color, allowing the user to control the shader's color.

@parameters
    
Name:
    The name of the new parameter, both in the VEX function
    declaration, the definition of any OP type that uses the VOPNET,
    and the VOP tile's output. If a parameter by this name already
    exists, this operator will reference it and will disable most of
    of its own fields, such as the Parameter Type and Parameter
    Label.
    
    The name must not be a [reserved keyword|/vex/lang#reserved].

Prefix:
    The optional prefix to prepend to the parameter name.  The prefix changes
    the final name of the new parameter, both in the VEX function declaration,
    the definition of any OP type that uses the VOPNET, and the VOP tile's output.

Postfix:
    The optional postfix to append to the parameter name.  The postfix changes
    the final name of the new parameter, both in the VEX function declaration,
    the definition of any OP type that uses the VOPNET, and the VOP tile's output.
    
Label:
    A human-readable label for this parameter. Appears in the
    owner node's parameters and the tooltip when the user
    hovers over the output on the VOP tile.

Show Label:
    Toggles the display of the parameter label in the owner node's parameters.

Type:
    Specifies the VEX data type of the new parameter. It can also
    specify how the parameter should be represented in an OP dialog.
    For example, a VEX vector can be viewed as 3 float values or as
    a color value.

Default Values:
    Depending on the parameter type selected, it represents the
    default value of the parameter in the VEX function and in the OP
    type that uses this VOP network.

Comment:
    Brief description of the parameter.  The comment is included after the
    parameter declaration in the generated code.
    
Use This Node to Set Parameter Attributes:
    When several Parameter VOPs have the same Parameter Name, only
    one of the nodes is used to control the attributes of the
    parameter. Houdini decides which node to use for this by
    searching all the nodes according to the user defined order,
    then traversing inside subnets. If none of them have this
    parameter turned on, the first one found is used to set the
    parameter attributes. If one or more do have this option turned
    on, the first one with this option is used, even if another node
    (with this option turned off) is found first.
    
Use Input Value If Parameter Not Bound:
    If true, the VEX function parameter is checked to see if it is
    bound to an attribute in the current VEX context (e.g. point
    color). If not bound, the input value is is assigned to the VEX
    parameter. In a Surface VOP context, a VEX parameter is bound if
    the geometry being shaded has an attribute with the VEX
    parameter name.
    
Export:
    Specifies whether the new parameter can be exported to other
    contexts (written to as well as read from). If set to __Always__ or
    __When Input is Connected__, this operator gets an input.  The value
    wired into this input is then assigned to the exported parameter.
    In a Surface network, exported parameters can be used to create
    deep rasters. In SOP and POP networks, the exported parameters
    create new geometry attributes.

    Never:
        The parameter will not be exported.
    Always:
        The parameter will be exported.
    When Input is Connected:
        The parameter will only be exported if the node's input is
        ultimately connected to another VOP.

Export in Context:
    The context or contexts that the parameter is exported to.  Use whitespace
    characters as separators when specifying multiple contexts.
    
Provide Menu:
    If the parameter type is String or Integer, then you can provide a menu of
    choices instead of a string entry field or an integer slider.

    No Menu:
	No menu is provided and the entry field or slider is displayed instead.
    Menu from Items:
	A menu is generated from the list of items specified by the `Menu Items`
	parameter.
    Menu from Script:
	A menu is generated from the script specified by the `Menu Script`
	parameter.
    
Menu Items:
    A list of pairs of strings. The first string in each pair is the
    parameter value if that menu item is chosen. The second string
    is the label that appears in the dialog for that menu item.

    The strings are separated by spaces.  If you want a value or label to
    contain a space, surround the item with double quotes.

Menu Script:
    A script that populates the generated menu.  You can write the script in
    either Hscript or Python. We highly recommend using Python.

    A Python script should generate a list (or tuple) of strings where the odd
    items are values and the even items are labels, for example:

    {{{
    #!python
    ["10", "Light", "50", "Medium", "100", "Heavy"]
    }}}

    Houdini handles the Python script in an odd way: if the script field
    contains a _single line_, Houdini treats it as an _expression_ and expects
    it to evaluate to a list. If it has _multiple lines_, Houdini treats it as
    a _function body_ and it must end with a `return` statement:

    {{{
    #!python
    result = []
    for input_node in hou.pwd().inputs():
	result += [input_node.path(), input_node.name()]
    return result
    }}}

    For Hscript, the script should print a space-separated list of the form:

    {{{
	echo "token1" "Label 1" "token2" "Label 2" ...
    }}}

Menu Script Language:
    The language used by the script populating the menu.


Invisible:
    Do not show the parameter in the shader's parameter interface.
    The parameter still exists and will be used to generate shader
    strings.

[Include:/ref/windows/optype#joinnext]
    
[Include:/ref/windows/optype#disablewhen]

[Include:/ref/windows/optype#hidewhen]

[Include:/ref/windows/optype#callback]

[Include:/ref/windows/optype#help]
     
@inputs

Unbound or Export Value:
    The value assigned to the new parameter if the __Export
    Parameter__ toggle is checked or if the parameter is not bound
    when __Use Input Value If Parameter Not Bound__ is checked.

@outputs

Parameter:
    The value of this VEX function parameter.
    
Is Parameter Bound:
    True if the new parameter is bound to an attribute.

@related
    - [Node:vop/bind]
    - [Node:vop/constant]
    - [Node:vop/global]
    - [Node:vop/output]
    - [Node:vop/shadinglayer]

