#type: node
#context: vop
#internal: switch
#icon: VOP/switch

= Switch =

"""Switches between network branches based on the value of an input."""

This node's first input is an integer that specifies which input to pass
through to the node's output. The numbering starts at `0`, even though the
input labels start at `input1` (for example, if the value of the first input is
`0`, the node will output the value of `input1`).

The inputs can be of _any type_, but they must all be of the _same type_.

You can use this node in front of a [Collect node|Node:vop/collect] to switch
between shader types. When switching between shader types (in front of a
[Collect node|Node:vop/collect]), only the code for the currently selected
branch is generated.

WARNING:
    When switching between regular inputs (that is, not between output nodes
    and a Collect node), *all inputs are evaluated* (cooked).
    For networks with long branches feeding into a Switch, this can be very
    inefficient, so you should only use Switch with short branches. You can
    use the [If subnetwork|Node:vop/if] to switch between big network chunks
    efficiently.

@inputs

Switcher Index:
    This integer value selects the input value to pass through to this node's
    output. The inputs are numbered starting at `0` even though the inputs
    are labeled starting with `input1`, so a value of `0` will select
    `input1`, a value of `1` will select `input2`, and so on.
    
    You will usually connect this input to a [Compare node|Node:vop/compare],
    or a logic node such as the [And|Node:vop/and] or [Or node|Node:vop/or].
    
Input Number N:
    You can connect up to 64 inputs. New inputs are added as you connect them.

@outputs

Chosen Value:
    This output will be of the same type as all the inputs.

@related

- [Node:vop/and]
- [Node:vop/compare]
- [Node:vop/if]
- [Node:vop/or]
- [Node:vop/twoway]

