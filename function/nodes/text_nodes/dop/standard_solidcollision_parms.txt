#type: include

Collide with objects in other solvers:
    #id: collideindependent

    If enabled, the geometry in this object will collide with external objects that belong to a different solver. These other objects may be [Static Objects|Node:dop/staticobject], [RBD Objects|Node:dop/rbdobject], or the [Ground Plane|Node:dop/groundplane]. When the __Use Volume Based Collision Detection__ is enabled on the Static Object, then the polygon vertices will be tested for collision against the signed distance field (SDF) of the Static Object. When __Use Volume Based Collision Detection__ is disabled, then geometry-based continuous collision detection is used. The geometry-based collisions collide points against polygons, and edges against edges.
    
    When geometry-based collisions are used, only polygons and tetrahedrons in the [Static Object|Node:dop/staticobject] are considered. Other types of primitives, for example spheres, are be ignored. The geometry of the external objects (e.g. Static Object) is treated as being one-sided; only the outsides of the polygons, determined by the winding order, oppose collisions.

    When volume-based collisions are enabled, only points will be colliding against the volumes, not the interiors of polygons and tetrahedrons. When colliding against small volumes, this may mean that you need to increase the number of points on your mesh to get accurate collision results.

Collide with objects in this solver:
    #id: collidecodependent

    When enabled, this object will collide with other objects that have the same solver. These collisions are handled using continuous collision detection, based on the geometry (polygons and/or tetrahedrons). For collisions between objects on the same solver, the polygons are treated as two-sided. Both sides of the polygons collide. The surface of a tetrahedral mesh only collides on one side: the outside.

Collide within this object:
    #id: collideself

    If disabled, no two tetrahedrons within this object can collide with each other.
    
Collide within each component:
    #id: collideselfcomponent

    If disabled, no two tetrahedrons that belong on the same connected component may collide with each other.
 
Collide within each fracture part:
    #id: collideselffracturepart

    This option only has an effect when fracturing is enabled on the solver. If disabled, no two tetrahedrons that belong on the same fracture part may collide with each other. Fracture parts are controlled by the integer-valued `fracturepart` primitive attribute.

Friction:
    #id: friction

    The coefficient of friction of the object. A value of 0 means the object is frictionless. This governs how much the velocity that is tangential to the contact plane is affected by collisions. When two objects are in contact, then the solver multiplies the friction coefficients of the involved object to get the effective friction coefficient for that contact.

