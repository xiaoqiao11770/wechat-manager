#type: node
#context: dop
#internal: popreplicate
#icon: POP/split

= POP Replicate =

"""A POP Node that generates particles from incoming particles."""

POP Replicate node designed generate particles for a POP network.  It does this by replicating given particles in the input stream.

It uses the up-stream set of particles to generate a new stream of particles by replicating the source particles.

[Include:/shelf/dynamics_popreplicate#includeme]

@parameters

[Include:popCommonParms#commonMain/]

== Birth ==

This operator has two methods for emitting particles. You can use these methods together or separately:

* *Impulse* creates a certain number of particles each time the node cooks.

* *Constant* creates a certain number of particles per second.

[Include:popCommonParms#impulseConstantParms/]

Emit from Attribute:
A specified attribute can be used to control whether a point is replicated or not.  This attribute should be a float value to represent the probability of replicating the source point.
Attribute:
The name of the attribute to use for controlling emission rate.

[Include:popCommonParms#birthParms/]

Kill Original Particle:
When a particle is replicated it will be flagged for deletion, avoiding having the particle constantly be recreated.

Jitter Birth Time:
Rather than have the particles all be created with an age of 0, they are created with a random age within the current timestep. They will also be moved by their starting velocity times this age.  This is useful when adding high velocity particles from emitters as it won't generate clumps on each frame.

Interpolate Source:
If set, the birth location will be rolled back according to the source particle's velocity and the jittered birth time of the new particle.  This allows all the particles born to be born at different times and places from the original particle.

== Shape == (shape)

Shape:
	The shape of the generated point cloud before transformation to each input point.

Orientation:
	The spatial orientation in local space for 2-D and 1-D shapes.

Center:
	The local center of the point cloud.  For example, increasing the center __Z__ parameter moves the cloud further along the alignment  vector from the input point (usually the `N` or `v` attributes).

Size:
	The local size of the point cloud.

Uniform Scale:
	A uniform factor applied to the replicated point cloud scale, in addition to any scaling attributes on the input points.

Velocity Stretch:
	Apply an additional scale along the local Z-axis according to the speed of the input point, effectively stretching the replicated point cloud along the alignment vector.

	None:
		Do not stretch by velocity.
	Scaled:
		Apply on top of any existing scale factors from the input points.
	Ignore Geometry Scale:
		Ignore any scaling from the input points and use only the  __Velocity Scale__.  This setting is useful if you want to ignore any variations in the `pscale` attribute of the input points when scaling by velocity.

Velocity Scale:
	A scale applied to the input point speed before stretching by velocity.

Seed:
	The seed used to generate random particle clouds.

Quasi-Stratified Sampling:
	Use stratified sampling for a better spatial distribution of points within the random clouds, at a slight performance penalty.

== Noise == (noise)

Add Noise:
	Add noise to the replicated point cloud in local space.  The noise will respect the input point's `rest` attribute if present.

Noise Type:
	Specifies the noise type.

Frequency:
	The scale of the noise. Decreasing frequency increases feature size.

Offset:
	Allows the noise field to be effectively moved through space.

Amplitude:
	The amplitude of the noise.

Roughness:
	The amplitude reduction of higher frequency noise contributions.

Attenuation:
	Raises the noise to the given exponent.

Turbulence:
	The number of noise generations to use.

== Attributes ==

The parameters on this tab let you control which and how attributes are initialized on the emitted particles. 

Inherit Attributes:
Which attributes to inherit from the source stream.

[Include:popCommonParms#veloAttrParms/]

[Include:popCommonParms#originAttrParms/]

== Stream ==

[Include:standard_pop_parms#streamParms]

@inputs

[Include:standard_pop_inputs]

Second Input:
    If the second input is wired in rather than the first, it becomes a reference stream.  This lets one refer to another stream of particles for the purpose of defining the source group, but leave its network chain intact.

@outputs

[Include:standard_pop_outputs]

@locals

[Include:standard_data_locals]

[Include:standard_locals]
    
@related

* [Upres Sand|/shelf/upressand]




