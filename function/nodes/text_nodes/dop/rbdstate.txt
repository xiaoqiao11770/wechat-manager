#type: node
#context: dop
#internal: rbdstate
#icon: DOP/rbdstate

= RBD State =

""" Alters the state information for an RBD Object. """

The RBD State DOP creates or modifies the RBD State data used by the
[RBD Solver|Node:dop/rbdsolver]. An RBD State Data is a superset of the Motion Data. In addition to the position and velocity of the object, it also contains
information about the object's mass, inertial tensor, and other physical
quantities.

RBD State's are automatically added by the [RBD Object|Node:dop/rbdobject] DOP. This DOP is usually used to override the RBD Object's parameters.


@parameters

    == State ==

        Position:
            #channels: /tx /ty /tz

            Position in world space of the object.
        Rotation:
            #channels: /rx /ry /rz

            Orientation of the object. This is in RX/RY/RZ format.
        Velocity:
            #channels: /velx /vely /velz

            Velocity of the object.
        Angular Velocity:
            #channels: /angvelx /angvely /angvelz

            Angular velocity of the object. This is the axis of
            rotation times the rate of rotation. 
            
            Speed of rotation is
            measured in degrees per second, so a multiplier of 360 will
            cause the object to rotate once per second.
        Inherit Velocity from Point Velocity:
            When one brings in a moving piece of geometry from an
            external source one does not always know the precise
            velocity and angular velocity. 
            
            If this toggle is set, the
            point velocity attribute of the geometry will be used to
            calculate the estimated velocity and angular velocity of the
            object. 
            
            This allows one to effect a smooth hand off even if
            the source geometry came from a sequence of geometries
            rather than a simulation.

    == Glue ==

        Glue to Object:
            #channels: /glueobject

            The name of an object to glue to. If this is blank, the
            object is glued to no other object and acts normally. If it
            is the name of another RBD Object which it mutually affects,
            this object becomes glued to the other object. Its relative
            position to the other object is maintained by the solver.
        Glue Strength:
            #channels: /gluethreshold

            The amount of accumulated force required to break a glue
            bond. A value of -1 will prevent the bond from ever
            breaking. A value of 0 will cause the bond to break with the
            first external force.
        Glue Impulses:
            #channels: /glueimpulse

            The amount of force that has accumulated on this object so
            far. You can set this value explicitly. This can be used to
            reset glue impulses at certain times, or to force the
            breaking of the object.
        Glue Impulse HalfLife:
            #channels: /glueimpulsehalflife

            The number of seconds for the glue impulse to decay by one
            half. Whenever a glued object gets hit, it accumulates a
            glue impulse force. This controls how fast that force
            decays.

    == Physical ==

        Compute Center of Mass:
            Determines if the center of the object should be found
            automatically from the object's volumetric representation
            and glued sub-objects.
        Pivot:
            #channels: /px /py /pz

            Explicitly sets the center of mass of the object. This is
            the location which it will spin around.
        Compute Mass:
            Determines if the mass will be calculated automatically
            from the object's volumetric representation and glued
            sub-objects.
        Density:
            #channels: /density

            The mass of an object is its volume times its density. This
            is only used if Compute Mass is turned on.
        Mass:
            #channels: /mass

            The absolute mass of the object. If Compute Mass is turned
            on this will be overwritten by the computed mass. Otherwise,
            it can be used to explicitly change the mass.
        Compute Inertial Tensor:
            Determines if an inertial tensor should be automatically
            computed by looking at the object volumetric
            representation. 
            
            If a tensor is not computed automatically,
            the identity matrix will be assigned to be the tensor.

            The inertial tensor is the equivalent of mass, but
            governing angular velocity rather than velocity. A smaller
            inertial tensor results in an object that will spin more
            readily.

        Inertial Tensor Type:

            Use Volume:
                The volumetric representation is used to estimated the
                inertial tensor. This is likely more accurate.
            Use Bounding Box:
                If the object does not have a good volumetric
                representation, it can end up with an artificially light
                inertial tensor. 
                
                Instead, you can just treat the object
                as a solid evenly filling the bounding box of the
                object. This usually results in a stable inertial tensor
                computation. 
                
                This option is good if you have small
                shards that are spinning excessively.
        Rotational Stiffness:
            #channels: /inertialtensorstiffness

            When an object receives a glancing blow, it will often
            acquire a spin. The amount of spin acquired depends on the
            shape and mass distribution of the object, known as the
            Inertial Tensor. 
            
            The Rotational Stiffness is a scale factor
            applied to this. A higher stiffness will make the object
            less liable to spinning, a lower value will make it more
            ready to spin.
    [Include:standard_data_parms]

@inputs
    [Include:standard_data_inputs]

@outputs
    [Include:standard_data_outputs]

@locals
    [Include:standard_data_locals]

    [Include:standard_locals]


