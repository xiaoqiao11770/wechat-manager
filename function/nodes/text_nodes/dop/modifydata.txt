#type: node
#context: dop
#internal: modifydata
#icon: DOP/modifydata

= Modify Data =

"""Modifies or creates options on arbitrary data."""

The Modify Data node can be used to change the values of specific
options on an existing piece of simulation data. The same task can
usually be accomplished using a DOP node specific to the data type being
modified, with all Parameter Operations but one set to "Set Never".
However using this node may be easier or clearer in certain situations.

This node can also be used to attach extra custom options to a piece of
data for use in other parts of the network. For example, you may attach
an option called `hasmoved` to the Position data on an object, and set
it to 1 if the object velocity is non-zero.

You can connect either an object or a data input to this node. If a
data input is connected, that is the data this node will modify. This
mode is most useful to add new options to an existing piece of data. If
an object input is connected to this node, the __Data Name__ parameter
must be set to tell this node which piece of data on the objects to
modify.

Modify Data can be used to create your own custom ad-hoc data types.
The [Empty Data DOP|Node:dop/emptydata] can be used to create an empty
data holder and then a Modify Data can set its values.

NOTE:
    Some options are not editable with this node if they are read only, such as the velocity and position of a [Point Position|Node:dop/pointpos] node. 

@parameters
    Activation:
        #channels: /activation

        The input data is modified only when this parameter has a
        non-zero value. Otherwise the data is passed through to the
        output unmodified.
    Group:
        #channels: /group

        If an object input is given, the Group parameter determines
        which objects within that input get modified.
    Data Name:
        #channels: /dataname

        If an object input is given, the Data Name parameter determines
        which data attached to those objects gets modified. This can be
        a full data path: Forces/Gravity will try to modify the data
        named Gravity inside the Forces container attached to the
        object.
    Number of Modifications:
        #channels: /nummods

        The number of options this node will set. This controls the
        number of sets of option-specific parameters this node will
        have.
    Value # Name:
        The name of the option value to modify. If this does not match
        an existing option, the node creates a new option of this name.
    Value # Type:
        Determines the type of option to modify. The type of the option
        determines if the __Value # Float__ or the __Value # String__
        sets the option value.

        In some cases it may seem odd that the string value is used.
        For example, vectors and matrices both are initialized with the
        string value. Note that you can use the `vector` and `matrix`
        expression functions to generate and manipulate the properly
        formatted strings. For example, a __2 Vector__ could be
        initialized with `vector("[1,2]") + vector("[2,3]")` which would
        evaluate to `[3,5]`.


        Integer:
            The option is a whole number. Use the __Value # Float__ to
            set the value.
        Bool:
            The option is a boolean (true or false) value. Use the
            __Value # Float__ to set the value. A value of 0 is false,
            any other value is true.
        Float:
            The option is a floating point number. Use the __Value #
            Float__ to set the value.
        String:
            The option is an arbitrary string. Use the __Value #
            String__ to set the value.
        2 Vector:
            The option is a vector of length 2. Use the __Value #
            String__ to set the value using a format like `[1, 2]`.
        3 Vector:
            The option is a vector of length 3. Use the __Value #
            String__ to set the value using a format like `[1, 2, 3]`.
        4 Vector:
            The option is a vector of length 4. Use the __Value #
            String__ to set the value using a format like `[1, 2, 3,
            4]`.
        Quaternion:
            The option is a vector of length 4 which is interpreted as
            a quaternion rotation. Use the __Value # String__ to set the
            value using a format like `[1, 2, 3, 4]`.
        3x3 Matrix:
            The option is a matrix of 3 rows and 3 columns. Use the
            __Value # String__ to set the value using a format like
            `[[1, 2, 3] [4, 5, 6] [7, 8, 9]]`.
        4x4 Matrix:
            The option is a matrix of 4 rows and 4 columns. Use the
            __Value # String__ to set the value using a format like
            `[[1, 2, 3, 4] [5, 6, 7, 8] [9, 10, 11, 12] [13, 14, 15,
            16]]`.
        UV:
            The option is a vector of length 2 which represents a set
            of 2D texture coordinates. Use the __Value # String__ to set
            the value using a format like `[1, 2]`.
        UVW:
            The option is a vector of length 3 which represents a set
            of 3D texture coordinates. Use the __Value # String__ to set
            the value using a format like `[1, 2, 3]`.
    Value # Float:
        The new option value, if the option is of type Boolean,
        Integer, or Float. All other option types must use the __Value #
        String__ parameter with a properly formatted string.
    Value # String:
        The new option value, if the option is of any type other than
        Boolean, Integer, or Float. The format of vector and matrix
        option values are the same as for entering a vector or matrix in
        the expression language.
@inputs
    First:
        Either the data to be modified or the objects who have the data
        attached are connected to the first input.
@outputs
    First:
        If data is connected to the input, the modified input data is
        sent to the output. If objects are connected to the input, the
        same objects are sent to the output.
@locals
    [Include:standard_locals]


@related
    - [Node:dop/emptydata]
    - [Node:dop/scriptsolver]

