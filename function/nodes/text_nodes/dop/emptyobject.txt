#type: node
#context: dop
#internal: emptyobject
#icon: DOP/emptyobject

= Empty Object =

""" Creates an Empty Object. """

An Empty Object is a container which can have various types of data
attached to it. All objects in DOPs, whether pieces of cloth, rigid
bodies, or volumes of fluid, are based off this one basic container. The
types of data are what turn an Empty Object into something interesting,
like an [RBD Object|Node:dop/rbdobject].

Normally you do not have to explicitly use the Empty Object DOP. It,
however, lies at the heart of most of the Object setup nodes, such as
[RBD Object|Node:dop/rbdobject], [Cloth Object|Node:dop/clothobject], or [Wire Object|Node:dop/wireobject]. If you are working with RBD,
you can apply all of the standard RBD data to your Empty Object with the
[RBD Configure Object DOP|Node:dop/rbdconfigureobject].


@parameters
    Activation:
        Determines whether Empty Objects should be added to the
        simulation. If this is non-zero, the requested number of Empty
        Objects will be created and added to the simulation.
    Object Name:
        The name for each of the newly created Empty Objects. Since it
        is easier to refer to objects by name than by object number, it
        is recommended one create unique names by using an expression
        for this parameter. 

	NOTE:
		Names do not have to be unique.
    Number of Objects:
        The number of Empty Objects to create. Note that this number
        will be created every time this node is cooked, so the
        __Activation__ field should be set appropriately.
    Solve on Creation Frame:
        For the newly created objects, this parameter controls whether
        or not the solver for that object should solve for the object on
        the timestep in which it was created. Usually this parameter
        will be turned on if this node is creating objects in the middle
        of a simulation rather than creating objects for the initial
        state of the simulation.
    Allow Caching:
	If caching on an object is disabled, its data will be cleared when it
	moves into the simulation cache.  This is useful if you don't
	want the object pushing other objects out of the shared cache.
@outputs
    First:
        The objects created by this node are sent through the single
        output.
@locals
    [Include:standard_locals]


