#type: include

ST:
    This value is the simulation time for which the node is being
    evaluated. 
    
    This value may not be equal to the current Houdini time
    represented by the variable T, depending on the settings of the [DOP
    Network|Node:obj/dopnet] __Offset Time__ and __Time Scale__
    parameters. 
    
    This value is guaranteed to have a value of zero at the
    start of a simulation, so when testing for the first timestep of a
    simulation, it is best to use a test like `$ST == 0` rather than
    `$T == 0` or `$FF == 1`.
SF:
    This value is the simulation frame (or more accurately, the
    simulation time step number) for which the node is being evaluated.
    
    This value may not be equal to the current Houdini frame number
    represented by the variable F, depending on the settings of the [DOP
    Network|Node:obj/dopnet] parameters. Instead, this value is equal to
    the simulation time (ST) divided by the simulation timestep size
    (TIMESTEP).
TIMESTEP:
    This value is the size of a simulation timestep. This value is
    useful to scale values that are expressed in units per second, but
    are applied on each timestep.
SFPS:
    This value is the inverse of the TIMESTEP value. It is the number
    of timesteps per second of simulation time.
SNOBJ:
    This is the number of objects in the simulation. For nodes that
    create objects such as the [Empty Object|Node:dop/emptyobject] node,
    this value will increase for each object that is evaluated. 
    
    A good way to guarantee unique object names is to use an expression
    like `object_$SNOBJ`.
NOBJ:
    This value is the number of objects that will be evaluated by the
    current node during this timestep. This value will often be
    different from SNOBJ, as many nodes do not process all the objects
    in a simulation. 
    
    This value may return 0 if the node does not
    process each object sequentially (such as the [Group
    DOP|Node:dop/group]).
OBJ:
    This value is the index of the specific object being processed by
    the node. This value will always run from zero to NOBJ-1 in a given
    timestep. This value does not identify the current object within the
    simulation like OBJID or OBJNAME, just the object's position in the
    current order of processing. 
    
    This value is useful for generating a
    random number for each object, or simply splitting the objects into
    two or more groups to be processed in different ways. This value
    will be -1 if the node does not process objects sequentially (such
    as the [Group DOP|Node:dop/group]).
OBJID:
    This is the unique object identifier for the object being
    processed. Every object is assigned an integer value that is unique
    among all objects in the simulation for all time. Even if an object
    is deleted, its identifier is never reused. 
    
    The object identifier
    can always be used to uniquely identify a given object. This makes
    this variable very useful in situations where each object needs to
    be treated differently. It can be used to produce a unique random
    number for each object, for example. 
    
    This value is also the best way
    to look up information on an object using the dopfield expression
    function. This value will be -1 if the node does not process objects
    sequentially (such as the [Group DOP|Node:dop/group]).
ALLOBJIDS:
    This string contains a space separated list of the unique object
    identifiers for every object being processed by the current node.
ALLOBJNAMES:
    This string contains a space separated list of the names of every
    object being processed by the current node.
OBJCT:
    This value is the simulation time (see variable ST) at which the
    current object was created. 
    
    Therefore, to check if an object was created
    on the current timestep, the expression `$ST == $OBJCT` should
    always be used. This value will be zero if the node does not process
    objects sequentially (such as the [Group DOP|Node:dop/group]).
OBJCF:
    This value is the simulation frame (see variable SF) at which the
    current object was created. 
    
    This value is equivalent to using the
    dopsttoframe expression on the OBJCT variable. This value will be
    zero if the node does not process objects sequentially (such as the
    [Group DOP|Node:dop/group]).
OBJNAME:
    This is a string value containing the name of the object being
    processed. 
    
    Object names are not guaranteed to be unique within a
    simulation. However, if you name your objects carefully so that they
    are unique, the object name can be a much easier way to identify an
    object than the unique object identifier, OBJID. 
    
    The object name can
    also be used to treat a number of similar objects (with the same
    name) as a virtual group. If there are 20 objects named "myobject",
    specifying `strcmp($OBJNAME, "myobject") == 0` in the activation field
    of a DOP will cause that DOP to operate only on those 20 objects. This
    value will be the empty string if the node does not process objects
    sequentially (such as the [Group DOP|Node:dop/group]).
DOPNET:
    This is a string value containing the full path of the current DOP
    Network. This value is most useful in DOP subnet digital assets
    where you want to know the path to the DOP Network that contains the
    node.

NOTE:
    Most dynamics nodes have local variables with the same names as the
    node's parameters. For example, in a [Position node|Node:dop/position],
    you could write the expression:
    
    {{{
    $tx + 0.1
    }}}
    
    ...to make the object move 0.1 units along the X axis at each timestep.