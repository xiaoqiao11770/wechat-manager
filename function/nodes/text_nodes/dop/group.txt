#type: node
#context: dop
#internal: group
#icon: DOP/group

= Group =

""" Creates simulation object groups. """

The Group DOP creates simulation object groups based on a combination
of a mask string and optional expressions. These groups can be used for
two main purposes. First, affector relationships can only be set up
between groups of object. See the [Affector DOP|Node:dop/affector] for
more information on affector relationships. Second, object groups can be
used to instead of complicated object masks to refer to sets of objects.

[Include:/shelf/group#includeme]

@parameters
    Activation:
        Groups are only formed if the Activation Parameter is non-zero.
        This parameter is evaluated only once per timestep, not once for
        each object. Object-specific local variables are not available
        for use in this parameter.

    Number of Groups:
        The number of object groups that this node will create. For
        each group, a separate set of parameters are used to define
        which simulation objects will belong to the group.
    Group # Name:
        The name of the new group. Replaces any existing group of the
        same name.
    Group # Mask:
        A string mask that specifies which objects may belong to the
        group. This mask may consist of a series of space-separated
        object names, object ids, or group names. 

	Wildcard characters
        ("*" and "?") can be used to match object names. The negation
        character ("^") can be used preceding a token to exclude objects
        matching that token from the group.
    Group # Expression:
        Objects which match the Group Mask are then tested against this
        optional expression. 

	If the expression, which can contain local
        variables, evaluates to zero, that object will be excluded from
        the group. This expression can be used to refine the group
        membership according to any criteria. 

	For example, the dopfield
        expression function could be used to only allow objects with a
        positive x position remain in the group.
@inputs
    First:
        The objects that might be included in one or more of the groups
        are connected through the single input.
@outputs
    First:
        The exact same set of objects that feed into the input are sent
        out through the single output.
@locals
    [Include:standard_locals]


@related
    - [Node:dop/affector]

