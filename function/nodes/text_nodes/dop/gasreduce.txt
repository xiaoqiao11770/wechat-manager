#type: node
#context: dop
#internal: gasreduce
#icon: DOP/gas

= Gas Reduce =

"""A microsolver that reduces a field to a single constant field ."""

The Gas Reduce DOP is a microsolver used in building larger fluid
simulations. The [Fluid Solver|Node:dop/fluidsolver] and [Smoke Solver|Node:dop/smokesolver] DOPs that allow
microsolvers to be added before or after the main solver step to extend
or tweak the simulation. Alternatively, enterprising people may attempt
to build an entire new solver out of microsolvers.

The Gas Reduce DOP computes a single value according to some global
property of the input field or attributes.

If a field is specified, the destination field is made a constant field of that value.  Due to compression, this does not use as much space as you may think in the output field.

If an geometry point attribute is specified, the value will be written to a detail attribute on that geometry.

@parameters
    Destination:
        The list of fields or attributes to store the result.  They must be the
	right type to match the corresponding source.  

    Dest Option:
	A path to an option on a piece of data attached to this object.  For example, `heat/max` refers to the option named `max` on the piece of data named `heat`.  When this is not zero, the corresponding source fields will write out their
	reduced values to the option.  This allows easy queries with
	`dopoption()`, viewing in the details view, and integration with the [Gas
	Repeat Solver|Node:dop/gasrepeatsolver].

    Source:
	The list of fields or attributes to use as the source for the reduction.
	
    Geometry:
	If blank, the destination and source parameters refer to fields.  If set,
	they refer to attributes on this specified geometry.

    Create Missing Attribute:
	If the point attribute does not exist, a detail attribute
	the size of the source attribute will be created.

    Point Group:
	An optional point group to specify which points will be reduced.

    Mask Field:
	For operations like __Sum__, all of the input values are weighted
	by the mask field.  For all operations, only non-zero entries
	in the mask field contribute to the final result.

    Treat Mask as SDF:
	Normally the mask field is 1, meaning the voxel should be
	included, and 0 for it to be excluded.  Instead, a signed
	distance field approach can be done, with negative values
	meaning included and positive values excluded.  Values within
	a voxel cell of the zero boundary are linearly interpolated.

    Reduction:
	The types of reduction to be performed.

	    Maximum:
		Find largest element of the input.
	    Minimum:
		Find minimum element of the input.
	    Maximum of Absolute:
		Find largest absolute element of the input.
	    Minimum of Absolute:
		Find minimum absolute element of the input.
	    Average:
		The sum of the input divided by the number of
		values.  If it is masked, it is divided instead by the
		total of the mask.
	    Percentile:
		Valid values of the input are sorted lowest to
		highest, the one at the given percentile is picked.
		This is as slow as it sounds.  A value of 50 will give
		you the median, 25 the first quartile, etc.
	    Sum:
		The total of all values.
	    Sum of Absolute:
		The total of the absolute value of all the values.
	    Sum of Squares:
		The total of the square each value.
	    Root Mean Square:
		The square root of the average of the squares of all
		of the values.  The average takes the mask weight into
		consideration.

    Percentile:
	Used by the percentile reduction method to determine which
	percentile value will be extracted.

    Scale By:
	Depending on the dimensions of the input field, you may want
	to also apply an additional scale to make the result
	independent of your voxel resolution.  This scaling only
	applies to fields.

	None:
	    Do not apply any scaling effects.
	By Voxel Length:
	    Scale by the length of a voxel, defined as the cube root
	    of the voxel's volume.
	By Voxel Area:
	    Scale by the area of the voxel, defined as the square of
	    the cube root of the voxel's volume.  Use this to turn the
	    result of a SDF to Surface into a surface area.
	By Voxel Volume:
	    Scale by the volume of the voxel.  Use this to turn the
	    result of an SDF to Fog into a volume.

    [Include:standard_solver_parms]

@inputs
    [Include:standard_data_inputs]

@outputs
    [Include:standard_data_outputs]

@locals
    [Include:standard_data_locals]

    [Include:standard_locals]


