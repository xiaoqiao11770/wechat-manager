#type: include

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `anchor_id`
        td>> Point
        td>> Integer
        td>>
            If this attribute is defined and refers to a valid point (or vertex depending
            on the value of `anchor_type`), then this anchor's position will be bound to
            the specified point (or vertex) on the simulated geometry specified by the
            `name` attribute.

            If the value is set to `-1`, then the anchor is treated as a relative offset
            from the object specified by the `name` attribute (where the `P` attribute
            defines the offset). If the value does not refer to a valid point (or vertex),
            then the constraint is not created.
    tr>>
        td>> `anchor_type`
        td>> Point
        td>> Integer
        td>>
            Specifies if the anchor is attached to a `point`, `vertex` or `agent` transform.
            If no `anchor_id` attribute is defined and the anchor type is `point` or `vertex`, then this
            attribute has no effect.
            If this attribute is not defined, then `anchor_id` will refer to a point.
    tr>>
        td>> `condir`
        td>> Point
        td>> Vector
        td>>
            If the number of constrained degrees of freedom is 1, this value
            defines the normal of a plane that the object can move along or
            rotate in. If the number of constrained degrees of freedom is 2,
            this value defines an axis that the object can move or rotate
            about.
    tr>>
        td>> `condof`
        td>> Point
        td>> Integer
        td>>
            Identifies the number of constrained degrees of freedom for an
            anchor (0 to 3).
    tr>>
        td>> `constraint_name`
        td>> Primitive
        td>> String
        td>>
            Specifies the __Data Name__ of the constraint to create. If this
            attribute is not present or the name is invalid, no constraint will
            be created from the primitive. This attribute can be modified in a
            [SOP Solver|Node:dop/sopsolver] to change the constraint's type
            during the simulation.
    tr>>
        td>> `constraint_type`
        td>> Primitive
        td>> String
        td>>
            Specifies whether the constraint affects `position`, `rotation` or
            `all` degrees of freedom. If this attribute is not present or has
            an invalid value, the default value will be `position`.
    tr>>
        td>> `local_orient`
        td>> Point
        td>> Quaternion
        td>>
            If the `anchor_type` is `agent`, specifies the anchor's orientation in the local space of the transform referenced by the `name`.
    tr>>
        td>> `local_P`
        td>> Point
        td>> Vector
        td>>
            If the `anchor_type` is `agent`, specifies the anchor's position in the local space of the transform referenced by the `name`.
    tr>>
        td>> `name`
        td>> Point
        td>> String
        td>>
            Identifies the object to which the constraint is attached. An
            invalid name indicates that the constraint is attached to a world
            space position.

            For [RBD Packed Objects|Node:dop/rbdpackedobject], the `name` point attribute from the DOP object's geometry is used to identify which object to attach the constraint to.
            This can be prefixed by the DOP Object name (e.g. `object2/piece3`) to uniquely identify the object.
            For agent primitives, a transform name can be appended to the anchor name (e.g. `agent2/head`) to attach the constraint to a specific transform in the agent's rig.
            For all other types of objects, the DOP object name is used.
    tr>>
        td>> `next_constraint_name`
        td>> Primitive
        td>> String
        td>>
            Specifies a new value for the `constraint_name` attribute to switch to if the constraint is broken by the solver.
            This is simpler than using a [Node:dop/sopsolver] and allows the transition to take place at the instant the constraint breaks.
            Currently, only [glue constraints|Node:dop/glueconrel] may be broken during the timestep by the [Node:dop/bulletrbdsolver].
    tr>>
        td>> `next_constraint_type`
        td>> Primitive
        td>> String
        td>>
            Specifies a new value for the `constraint_type` attribute to switch to if the constraint is broken by the solver and the `next_constraint_name` attribute is valid.
    tr>>
        td>> `orient`
        td>> Point
        td>> Quaternion
        td>>
            Identifies the initial world space orientation of the anchor. If
            the `r` point attribute also exists on the geometry, this attribute
            will take precedence.
    tr>>
        td>> `P`
        td>> Point
        td>> Vector
        td>> Identifies the initial world space position of the anchor.
    tr>>
        td>> `propagate_iteration`
        td>> Detail
        td>> Integer
        td>>
            Specifies the number of impact propagations for glue bonds in the
            constraint network.
            
            When a glued object is hit, its impact value is spread along the
            constraint network to other glue bonds.  This allows distant glue
            bonds that are weak to be broken prior to nearer, strong bonds. The
            impact propagations is the number of rounds of propagation to do.
            Impulses will not travel more than this number of bonds each solve
            step.
    tr>>
        td>> `r`
        td>> Point
        td>> Vector
        td>>
            Identifies the initial world space orientation of the anchor as
            Euler angles.
    tr>>
        td>> `v`
        td>> Point
        td>> Vector
        td>> Identifies the velocity of the world space position to which the constraint is attached.
    tr>>
        td>> `w`
        td>> Point
        td>> Vector
        td>>
            Identifies the angular velocity of the world space position to
            which the constraint is attached.
