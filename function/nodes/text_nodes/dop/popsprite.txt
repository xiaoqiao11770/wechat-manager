#type: node
#context: dop
#internal: popsprite
#icon: POP/sprite

= POP Sprite =

"""A POP node that sets the sprite display for particles."""

The POP Sprite node adds attributes to specify the sprite display of particles.

This operator modifies the `spritepath`, `spriteuv`, `spriterot`, and `spritescale` attributes.

[Include:/shelf/dynamics_popsprite#includeme]

@parameters
[Include:standard_pop_parms#commonMain/]

== Texture ==
Sprite SHOP:
    The sprite SHOP to display the sprites with.  This needs to have the proper procedural shader attached.  For convenience, this POP contains a SHOP that can be used.
Sprite Map:
    The texture map to use.  This is linked to the internal SHOP, so it only has effect when the internal SHOP is used. It also cannot be animated per particle. To do so you must either assign a separate Sprite SHOP per particle or use the texture crop on a sprite sheet.
Texture Crop:
    Controls if the `spriteuv` attribute will be edited.  This attribute handles the cropping of the displayed sprite, allowing you to select different sprites on a sheet.
Mode:
    You can specify the crop region by an offset/size in 0..1 UV space, or by treating it as a tiled array, which you can create using the [Mosaic COP|Node:cop2/mosaic].
Texture Offset:
    Where, in 0..1 coordinates, to start the sprite.
Texture Size:
    How big, in 0..1 coordinates, that the sprite should take up in the texture file.
Sprite Index:
    Which sprite in the sprite sheet to use. This is a linear index that goes over all the sprites in row/column order.
Rows and Columns:
    How many sprites are in the sheet.
Rotate:
    Rotates the displayed sprite around the view axis.  Measured in degrees.
Sprite Scale:
    Scales the sprite.  Note `pscale` is also used, this is multiplied by the `pscale` and allows anistropic shapes.

== Alpha ==

    Update Alpha:
	Should the `Alpha` attribute be created or updated.

    Alpha Type:
	How to update the alpha.

	Constant:
	    Each particle is given the same alpha value.

	Ramp:
	    An alpha ramp is given which is evaluated. Each particle has to determine where to evaluate on this ramp by assigning the variable `ramp` in the VEXpression.

    Alpha:
	The constant value to assign to each particle.
    
    Ramp:
	Using the computed `ramp` variable, look up in this ramp to get the alpha value.
    
    Range:
	The compute ramp value from the VEXpression should be within this range.  This range will be mapped to 0..1 and looked up in the ramp.

	Thus, to reverse the ramp, you can set this to 1..0

== Bindings ==

[Include:standard_pop_parms#bindingsParms/]

@inputs
    [Include:standard_pop_inputs]

@outputs
    [Include:standard_pop_outputs]

@locals
    [Include:standard_data_locals]

    [Include:standard_locals]
