#type: node
#context: dop
#internal: gasenforceboundary
#icon: DOP/gas

= Gas Enforce Boundary =

"""A microsolver that enforces boundary conditions on a field."""

The Gas Enforce Boundary DOP is a microsolver used in building larger
fluid simulations. The [Fluid Solver|Node:dop/fluidsolver] and [Smoke Solver|Node:dop/smokesolver] DOPs that allow
microsolvers to be added before or after the main solver step to extend
or tweak the simulation. Alternatively, enterprising people may attempt
to build an entire new solver out of microsolvers.

The Gas Enforce Boundary DOP enforces boundary conditions on a field.
There are two types of boundary conditions. The first are the side
boundaries that are setup when the field is created. The second are
collision boundaries which are specified by the collision object.

NOTE:
        With no __Collision Value__ specified, anything in the __Field__ parameter that is inside the __Collision Field__ will be set to zero. This then sets all of the unresolved fields that are inside the surface field to zero . The idea is that if particles lie within the generated surface field, they are resolved, so it can be cleared out.

@parameters
    Field:
        The field to enforce boundaries on.
    Collision Field:
        A scalar field that is an SDF representing the inside and
        outside of the collision objects. Voxels that are adjacent to
        inside voxels will be considered collisions and have their
        values enforced.
    Collision Value:
        A field of the same type as Field, the collision value
        specifies what value to set collision boundary voxels to. If not
        set, they will be set to 0.
    Collision Index:
        An index field referring to the object number to use for local
        velocity computations.  This is only used in Velocity
        Enforcement mode.
    Velocity Enforcement:
        Uses velocity-style enforcement where the velocity is allowed
        to leave the collision object, just not enter it.  This avoids
        the tracked surface from sticking to the collision object.
    Velocity Type:
        Determines how the object's velocity is computed from the
        index field.  Rigid means no deformation is taking
        into account.  

	Point assumes the point count remains constant
        and uses point differences or the v attribute.  Finally,
        Volume looks for an SDF that changes over time to compute
        deformation.
    [Include:standard_solver_parms]

@inputs
    [Include:standard_data_inputs]

@outputs
    [Include:standard_data_outputs]

@locals
    [Include:standard_data_locals]

    [Include:standard_locals]


