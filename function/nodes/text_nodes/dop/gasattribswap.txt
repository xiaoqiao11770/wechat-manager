= Gas Attribute Swap =

#type: node
#context: dop
#internal: gasattribswap
#icon: DOP/gas

"""A microsolver that swaps geometry attributes."""

== Overview ==

It is often useful to make a copy of an attribute before doing some destructive operations.  Gas Attribute Swap makes it straightforward to copy, stash, or move attributes.

NOTE:
    This applies to the all the values of the attribute, so there is no group to restrict the operation.  This allows for most operations to be very efficient in both time and memory as they can just clone or rename the source attribute.
        
@parameters

Number of Swaps:
    The number of different swaps to do.  These are performed in the
    order specified, so the results of the first set of swaps will
    be what is processed by the second set.
    
Enable:
    Enables or disables the processing of this swap command.  This is useful for
    testing the effect of a swap or disabling a swap while setting up the
    commands.

Method:
    Each attribute pair that matches the __Source__/__Destination__ patterns will under go this operation.

    Swap:
	    The two attributes are swapped in-place.  If one does not exist, this will behave like a __Copy__ with the destination set to the missing attribute.
	
    Move:
	    The destination attribute, if it exists, is destroyed.  The	source attribute is then renamed to the destination name.

	    This matches the [Attribute Rename SOP|Node:sop/attribute] with __Overwrite Existing Attributes__ turned on.

	    NOTE:
	        You cannot move the point attribute `P` as it must always exist, it will silently convert to a copy operation.

    Copy:
	The destination attribute, if it exists, is destroyed.  A copy of the source attribute is made with the destination name. The result is a duplication of the source attribute.

Class:
    The class of attributes to swap. (vertex, point, primitive, or detail).

Source:
    A pattern to match attributes to be the source of the attribute pairs.
    For each attribute that matches this pattern, the __Destination__ parameter is used to derive a new destination name.

    See [Attrib String Edit|Node:sop/attribstringedit] for more details of the string replacement.

Destination:
    A matching pattern to __Source__ to control the names of the destination attributes.  When in __Swap__ mode, this is pattern is also tested against attributes for potential swaps.

Type Info:
    Attributes contain extra meta-data describing how they should be transformed.

    When stashing an attribute like `P`, you probably don't want the stashed attribute to transform with successive deformers.  __Preserve Destination__ will ensure the new attribute has no transform hints. __Preserve Destination __ also can be used when moving the attribute back, so the resulting `P` keeps its transform hint.

    Copy Source:
	    When moving or copying, the destination attribute will have the same transform hints as the source attribute.  When swapping, the typinfo will be swapped with the attribute.

    Preserve Destination:
	    When moving or copying, the type info of the previous destination attribute will be kept.  If there was no previous attribute, the void type info will be used.

	    When swapping, the type info will be left un-swapped after the attributes are swapped.
	
    
[Include:standard_solver_parms]

@inputs

[Include:standard_data_inputs]

@outputs

[Include:standard_data_outputs]

@locals

[Include:standard_data_locals]

[Include:standard_locals]



