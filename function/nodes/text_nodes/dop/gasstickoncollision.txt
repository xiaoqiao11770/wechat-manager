#type: node
#context: dop
#internal: gasstickoncollision
#icon: DOP/gas

= Gas Stick on Collision =

"""Adjusts a fluid velocity field to match collision velocities."""

The Gas Stick on Collision DOP adds a "sticky velocity" field to the fluid's velocity that will cause it to match the collision velocity within a thin layer around the collision. This modification makes the fluid appear to stick to collision objects.

@parameters

== Settings ==

Scale:
    The overall scale of the velocity modification.
    
Max Distance:
    Adjust the velocity within this world-space distance of the collision field.

Max Cells:
    Adjust the velocity within this number of cells of the collision field.

Bias:
	This effect will falloff linearly as the distance to collision approaches __Max Distance__ or __Max Cells__. Reducing the bias will change the curve to falloff faster; increasing it will slow the falloff.

Normal Scale:
	Scale the amount of velocity adjustment in the direction normal to the collision surface.

Tangent Scale:
	Scale the amount of velocity adjustment in the direction tangent to the collision surface.

        TIP:
        	Keeping a high __Normal Scale__ but decreasing the __Tangent Scale__ can create a "sticktion" effect, where the fluid flows quickly around the collision but remains stuck to the surface.

Control Field:
	Scale the effect by this spatially varying field, which should match the collision field in resolution.

== Visualization ==
Visualize Stick Velocity:
    Visualize the adjustment that will be applied to the velocity field. 
    
	NOTE:
        __Clear Temporary Fields__ must be disabled for the field to be visualized.

== Fields ==
Collision:
	The name of the collision field.

Velocity:
	The name of the velocity field.

Collision Velocity:
	The name of the collision velocity field.

Clear Temporary Fields:
    Zeros the temporary fields when done to reduce memory usage.

Stick Velocity:
	The name of the temporary field created to hold the velocity adjustment.    

== Advanced ==
Use OpenCL:
	Use OpenCL for solving.

@outputs

[Include:standard_data_outputs]

@locals

[Include:standard_data_locals]

[Include:standard_locals]


