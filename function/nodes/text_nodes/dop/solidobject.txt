#type: node
#context: dop
#internal: solidobject
#icon: VOP/concrete

= Solid Object =

"""Creates a Solid Object from SOP Geometry."""

The Solid Object DOP creates a Solid Object inside the DOP simulation. It creates a new object and attaches the subdata required for it to be a properly conforming Solid Object. Solid Objects can be simulated using the Finite Element Solver.

Solid objects are different than rigid bodies. Solid objects are flexible, which makes it possible for them to deform, and can be used to simulate materials such as flesh, wood, and concrete. Solid objects are also able to break dynamically during a simulation, based on the deformation that happens during the simulation.

You can use a tetrahedral mesh in SOPs to create your solid object. Your solid geometry should satisfy [guidelines|/dyno/solids#geometry] that ensure a fast-running and good looking simulation.

See [the section on solid simulation|/dyno/solids] for more information.

[Include:/shelf/solidobject#includeme]

@parameters

== Model ==
    
    [Include:standard_solidmodel_parms]

== Geometry ==

    [Include:standard_solidinitial_parms]

    [Include:standard_embedding_parms]

    [Include:standard_softbodyrest_parms]

    [Include:standard_softbodytarget_parms]

== Fracturing ==

Enable Fracturing:
    #channels: enablefracturing

    Allows the tetrahedrons of this object to break apart when impacted beyond the force set by the __Fracture threshold__ below. The solver must also have fracturing on (which is the default for the solver).

Fracture Threshold:
    #channels: fracturethreshold

    The relative amount of stress in any direction above which dynamic fracturing will occur. This lets you control how quickly the object will break into pieces as a result of stresses inside the object.
    
    Realistic objects don't have the same fracture threshold everywhere. To achieve this, you can use a point attribute with the name `fracturethreshold` that acts as a local multiplier for the per-object fracture threshold. 
    
    It is recommended that you use the primitive attribute `fracturepart` to assign integer numbers to clumps of tetrahedrons that should never be broken up into smaller pieces. Creating these clumps prevents individual tetrahedrons from breaking off. The Solid Fracture SOP can be a useful tool for creating this `fracturepart` attribute. You can create a `fracturepart` on the embedded geometry as well. This way, the fractured pieces in the simulated geometry and the embedded geometry can be properly matched.

== Collisions ==

* [Include:standard_solidcollision_parms#collideindependent]
* [Include:standard_solidcollision_parms#collidecodependent]
* [Include:standard_solidcollision_parms#collideself]
* [Include:standard_solidcollision_parms#collideselfcomponent]
* [Include:standard_solidcollision_parms#collideselffracturepart]

=== Properties ===

[Include:standard_solidcollision_parms#friction]

=== External volume properties ===

* [Include:standard_rbdvolume_parms#sdf_uniformvoxels]
* [Include:standard_rbdvolume_parms#sdf_uniformdiv]
* [Include:standard_rbdvolume_parms#sdf_tol]
* [Include:standard_rbdvolume_parms#sdf_sweepalpha]
* [Include:standard_rbdvolume_parms#sdf_sweepcount]

== Drag ==

[Include:standard_softbodydrag_parms]

== Visualization == (visualization)

== Creation ==

[Include:standard_objcreation]

== Initial State ==

Controls on this tab allow you to set the initial states of the object's position, pivot, rotation, initial velocity, and angular velocity.

== Attributes == (attrib)

    [Include:standard_finiteelement_attribs]

@locals

[Include:standard_locals]

@related

- [Node:dop/solidconfigureobject]
- [Node:dop/solidmodel]
- [Node:dop/finiteelementsolver]

