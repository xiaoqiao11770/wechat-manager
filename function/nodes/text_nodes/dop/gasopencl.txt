#type: node
#context: dop
#internal: gasopencl
#icon: DOP/gas

= Gas OpenCL =

"""Executes the provided kernel with the given paramters"""

This DOP provides a general interface to creating and running OpenCL kernels
using a variable number of parameters. It also provides users with a way to
automatically generate kernel headers from their list of parameters.

@parameters

== Kernel ==

Kernel Name:
    #id: kernelname
    The name of the OpenCL kernel to execute with the loaded program.

Use Code Snippet:
    #id: usecode
    Use the code provided in the Kernel Code parameter rather than an external disk file.  This makes for quicker editing and creation of OpenCL microsolvers.

Kernel File:
    #id: kernelfile
    The path to OpenCL program file to compile. This can include a path to an on disk file or asset.

Kernel Options:
    #id: kerneloptoins
    Specify any desired compile flags for the kernel.

    NOTE:
        The Apple OSX OpenCL compiler requires only a single space between kernel options!

Generate Kernel:
    Creates a prototype for the required kernel function taking all 
    of your current selected parameters into account.  This can be
    used as a starting point or to update your interface when
    new parameters are added or removed.

Recompile Kernel:
    #id: recompile
    When loading kernels from disk the kernel is cached to avoid
    regenerating it every solve.  Turning this on forces the re-loading
    and recompiling of the kernel.  This is useful if #include files
    refer to code that has changed, or the kernel file is changed
    in an external text editor.

    It should always be disabled when protoyping is complete.

== Options ==

Run Over:
    The provided OpenCL kernel is invoked once.  The number of global ids,
    however, is controlled by this setting.  First Writeable attribute
    sets it to the size of the first bound attribute that is marked writeable.
    All fields sets it to the total voxels of the fields.

    NOTE:
        The global ids will be rounded up to ensure efficient processing on the GPU, so you should always compare the `get_global_id(0)` with the actual length of the bound attribute.

Force Align:
    #id: align
    Force the specified fields alignment to match the output grid. By selecting this option, each grid has its values interpolated to match the alignment of the output grid and allows the kernel to execute independent of field alignment.

Include Origin:
    #id: origin
    Include the origin of the input/output grids.

Include Size:
    #id: size
    Include the size of the input/output grids.

Include Voxel Size:
    Include the size of the voxels.

Flush Attributes:
    After writing to attributes, the new values are left on the GPU
    until another solver requests the geometry attributes.  This 
    lets the attributes stay there and provides the most efficiency.
    Turning on flush attributes forces them to be copied back from
    the GPU into geometry memory explicitly.  This should not
    be required.

Finish Kernels:
    When Finish Kernels is disabled, no attempt is to wait for the
    OpenCL kernels to complete before continuing the next solver.
    This lets them run in the background until their results
    are actually needed.  To simplify debugging, it is useful
    to ensure kernels are finished to make sure errors are detected
    in the right spot.

Include Time:
    Include the current simulation time as a parameter.

Include Time Step:
    Include the current timestep as a parameter. This is useful as
    if the OpenCL node is triggered from a Gas Substep it may be
    less than the full timestep.

Time Scale:
    For some operations you may wish to know the power of the timestep.
    Rather than recomputing in the kernel, you can set this to `e^Timestep`
    and have the exponentiation pre-computed.


== Bindings ==

OpenCL Parameters:
    #id: paramcount
    The number of extra parameters within the OpenCL kernel.

    Each parameter can either be a fixed constant value, evaluated
    during DOP network traversal, or read/write from a field or
    geometry attribute.

Parameter Name:
    The name of the parameter.  This is used in the `Generate Kernel`
    button, but is otherwise only present as a comment.  The actual
    binding to an OpenCL kernel is done by parameter order, not
    by the name.

Parameter Type:

    The type of parameter to create and bind.

    Integer:
	    A constant integer value, allowing you to bind channel references and expressions that are pre-computed.
    Float:
	    A constant float value.  Optionally you can scale it by the timestep.
    Float Vec4:
	    A constant tuple of four floats, binding to a `float4` OpenCL parameter.
    Scalar Field:
	    A floating point valued scalar field.  The field name is a Scalar Field Data that will be bound.  The writeable flag controls whether the pointer is marked as const in  OpenCL.  
	NOTE:
	    If the field is writeable, the next time it is needed by Houdini it will be copied back.
    Vector Field:
	    A vector valued field.  The field name is a Vector Field Data that will be bound.  
    Matrix Field:
	    A matrix valued field.  The field name is a Matrix Field Data that will be bound.  
    Ramp:
	    A scalar ramp.  Because evaluating a spline-based ramp inside of an OpenCL kernel is complex, the ramp is instead sampled into a uniform
	array of floats.  The `Ramp Size` parameter controls the number of samples used.
    Attribute:

Field:
    The name of the DOP data to bind as a field.

    Present for Fields.

Geometry:
    The name of the DOP data to bind as geometry. 

    Present for Attributes.
Attribute:
    Which attribute to bind.  It is an error if it is missing, unless the optional flag is set.

    Present for Attributes.
Class:
    The type of the attribute.  Since the first writeable attribute can determine the iteration order, this can determine the number of global
    ids processed by the OpenCL solver.

    Not all bound attributes need to be the same type, or even come from the same geometry data.

    Present for Attributes.

Type:
    What sort of attribute to bind.  Float and integer attributes are bound as single arrays containing all element values in order.  Tuples are
    interleaved, ie, P will be bound as xyzxyzxyz.

    Array attributes are bound as two arrays.  One array contains the offsets of each element's array data.  Thus, the difference of
    a pair of offsets provides the elements array length.  The second array is the data of all elements' arrays concatenated into a single
    array.

    Present for Attributes.

Size:
    Tuple size of the attribute to bind.  If greater than zero, the attribute must be able to provide this tuple size.  If zero, it will bind
    automatically and an extra parameter will be generated storing the tuplesize.

    Present for Attributes.

Readable:
    Determines if the OpenCL kernel will read from this attribute. If not set, the attributes values will not be copied onto the GPU.
    This is useful for write-only attributes as it avoids an unnecessary copy, but requires care as uninitialized data will be present.

    Present for Attributes.
Writeable:
    Determines if the OpenCL kernel will write back to this attribute or field.  Causes the CPU version of the attribute or field to be
    marked out of date so the next time it is needed it will be copied back from the GPU.

    Present for Fields and Attributes.

Optional:
    Marks the attribute as not necessary.  If the attribute isn't present in the geometry, rather than erroring, a #define is set in the kernel
    options to disable the attribute.  Note that this also changes the parameter signature, so the __Generate Code__ button should be used
    to verify the syntax.

    NOTE:
        The parameter name is used in the `#define`, so changing the parameter name requires changing the code.

    Present for Attributes.

Ramp Size:
    Present for ramps.

@outputs

[Include:standard_data_outputs]

@locals

[Include:standard_data_locals]

[Include:standard_locals]




