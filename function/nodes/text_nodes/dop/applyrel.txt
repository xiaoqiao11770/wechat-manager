#type: node
#context: dop
#internal: applyrel
#icon: DOP/applyrel

= Apply Relationship =

""" Creates relationships between simulation objects. """

The Apply Relationship DOP creates one or more relationships between a
group of objects. Relationships control the way that objects interact
with each other, as well as controlling the order in which objects are
solved in the simulation. Some examples of relationships are constraints,
collisions, smoke sources, and simple groups.

In a relationship there are two sets of objects, the affector objects and
the affected objects. The same object or objects can be in both groups, in
which case there are mutually affecting objects in the relationship. When
solving objects, any object that is an affector of another object will be
solved before the affected object. The exception to this is mutually
affecting objects, which must be solved at the same time. 

It it also possible to set up mutually affecting relationships indirectly by
creating circular relationships between groups of objects. You can
inspect the entire set of affector relationships in a simulation by
looking at the Affector Matrix in the Geometry Spreadsheet for the simulation.

Each relationship type node (Constraint and Collision Relationship, for
example) is capable of creating a single relationship between two groups
of objects. The Apply Relationship node augments these capabilities by
allowing a large number of relationships to be created using a small
number of nodes and stamping. 

This node's parameters are divided into
two parts. The first part describes the number of relationships that
will be created, and the sets of objects that will be the affector and
affected objects. The second part defines the stamp variables that can
be used by the attached relationship nodes to customize each relationship.

Relationships must each be given a unique name which identifies them.
This name can be used to access relationship information using all the
same methods that are used to access data on simulation objects.

TIP:
    __Create Relationships__ should be set to __Number of Relationships Per Object Pair__ when building mutual constraints between two DOPs. This is necessary for the constraint to find the goal objects. You should also enable __Make All Objects Mutual Affectors__ to avoid the one-way affector relationships.

@parameters
    Create Relationships:
        Controls the primary mode of operation for creating relationships.
        
        Number of Relationships:
            Specifies an exact number of relationships which will be created. The
            __Affector Objects__ and __Affected Objects__ fields are evaluated once per
            relationship.
        Number of Relationships Per Affected Object:
            Specifies that a number of relationships will be created for each
            individual object listed in the __Affected Object__ parameter. The
            __Affector Objects__ parameter will be re-evaluated for each Affected
            object.
        Number of Relationships Per Affector Object:
            Specifies that a number of relationships will be created for each
            individual object listed in the __Affector Object__ parameter. The
            __Affected Objects__ parameter will be re-evaluated for each Affector
            object.
        Number of Relationships Per Object Pair:
            Specifies that a number of relationships will be created for each
            pair of affector and affected objects. The __Affector Objects__ and __Affected Objects__ parameters will be evaluated once to obtain the list of
            objects that will be paired up

    Affected Objects:
        These objects are the affected objects in the created relationships.
        This parameter will be re-evaluated for each relationship if the
        __Create Relationships__ parameter is set to __Number of Relationships Per
        Affector Object__, or __Number of Relationships__. Otherwise it is evaluated
        once.

    Affector Objects:
        These objects are the affector objects in the created relationships.
        This parameter will be re-evaluated for each relationship if the
        __Create Relationships__ parameter is set to __Number of Relationships Per
        Affected Object__, or __Number of Relationships__. Otherwise it is evaluated
        once.

    Number of Relationships:
        The number of relationships created per affector object, per affected
        object, per object pair, or an absolute number of relationships,
        depending on the __Create Relationships__ parameter value. In all but the
        __Number of Relationships__ setting, this parameter is re-evaluated for
        each affector, affected, or pair of objects.

    Relationship Name:
        A unique name that will identify the relationship. This parameter is
        re-evaluated for every relationship created by this node. If this
        parameter evaluates to the name of a relationship that already exists
        (whether or not the relationship was created by this node) it will
        replace that existing relationship.

    Unique Relationship Name:
        Turning this parameter on ensures that the name generated by the
        __Relationship Name__ parameter is unique, thus avoiding any chance of
        overwriting existing relationships. It can result in longer, harder to
        use relationship names.

    Make All Objects Mutual Affectors:
        Turning on this parameter causes each relationship created by this
        node to put all affected and affector objects into both the affector
        and affected object list of the relationship. This parameter does not
        affect the number of relationships created by this node.

    Activation:
        If this parameter is zero, no relationships are created between
        the input objects. 
        
        This parameter is evaluated before creating each
        relationship, and so can be used to turn off certain relationships.

    Number of Variables:
        Sets the number of global parameters that will be set for each
        relationship that is created. 
        
        These global parameters are accessible
        from the input relationship nodes using the stamp expression function.
    Variable # Name:
        The name for this variable. This is the value that must be
        passed as the second argument to the stamp expression function
        to access this variable.
    Variable Evaluation:
        Controls the way in which this variable is evaluated.

        Evaluate For Each Copy:
            The value for this variable is calculated for each relationship.
            This option provides the most flexibility in terms of generating
            the global parameter values, but is the most time consuming if
            large numbers of copies are involved.
        Evaluate Once:
            The value for this variable is calculated each time the `REL` local
            variable is set to zero. This depends on the __Create Relationship__
            parameter. This approach will not result in each relationship
            being customized, but provides an easy way to pass information
            from this node up to the input data nodes.
        Evaluate Once, One Token Per Copy:
            The parameter describing this variable is evaluated each time the
            `REL` variable is set to zero, which depends on the __Create
            Relationship__ parameter. 
            
            In this mode, the __String Value__ is
            evaluated regardless of the __Variable Type__ parameter. Then for each
            relationship, the corresponding token within the evaluated string
            is used to set the global parameter value. The token is treated as
            a float or string value, depending on the __Variable Type__ parameter.
            So for example, suppose the __Variable Type__ is Float, the __String
            Value__ is "0 1 2 3", and the __Number of Relationships__ is 6. The
            global parameter value set for the 6 relationships would be 0, 1,
            2, 3, 0, and 1.
    Variable Type:
        Specifies whether the global parameter is a floating point
        number or a string value.

        Float:
            The global parameter is a floating point number. The value
            of this global parameter will be accessed using the stamp
            expression function in the input data node.
        String:
            The global parameter is a string. The value of this global
            parameter will be accessed using the stamps expression
            function in the input data node.
    Float Value:
        For a __Float Variable Type__, when the __Variable Evaluation__ is not
        Evaluate Once, One Token Per Copy, this parameter controls the
        value that will be assigned to this global parameter.
    String Value:
        For a __String Variable Type__, or when the __Variable Evaluation__ is
        Evaluate Once, One Token Per Copy, this parameter contains the
        string value or series of numeric or string tokens that will be
        used to set the value of this global parameter.

@inputs
    First:
        The first input to this node supplies the objects that can be used when defining the relationships.
        
    Subsequent:
        The remaining inputs to this node define the nature of the
        relationships that will be created.
@outputs
    First:
        The objects or data input to this node are sent through the
        single output.
@locals
    REL:
        The current relationship number. This value will range from zero to (NREL-1). It can be used to set stamping variables, or otherwise customize the relationships. This index does not take into account multiple relationship inputs. For that, the `INPUT` variable can be used.
    NREL:
        The total number of relationships that this node will try to create. This value is equal to the __Number of Relationships__ parameter value. It is re-evaluated for each cycle of relationships, as defined by the __Create Relationships__ parameter.
    INPUT:
        The index of the relationship input being processed.
    RELID:
        This is a simple counter for the number of relationships actually created by this node so far this timestep. Because of changing __Activation__ parameter values and the various __Create Relationships__ methods, this is not something that can be calculated from the other local variable values.
    AFFECTEDID:
        If the Create Relationships style is Per Affected Object or Per Object Pair, this variable will contain the object id of the single affected object for this relationship. Otherwise this value will be -1.
    AFFECTORID:
        If the Create Relationships style is Per Affector Object or Per Object Pair, this variable will contain the object id of the single affector object for this relationship. Otherwise this value will be -1.

    [Include:standard_locals]

