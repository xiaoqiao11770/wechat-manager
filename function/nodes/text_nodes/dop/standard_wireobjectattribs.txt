#type: include

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
        th>> Scaling Factor
    tr>>
        td>> `width`
        td>> Edge (vertex)
        td>> Float
        td>> Width of each edge.
        td>> Yes
    tr>>
        td>> `density`
        td>> Point
        td>> Float
        td>> Density of each point.
        td>> Yes
    tr>>
        td>> `orient`
        td>> Point
        td>> Float4
        td>> 
            Initial orientation of each point. This value is stored as a quaternion.
        td>> No
    tr>>
        td>> `v`
        td>> Point
        td>> Vector
        td>> Initial velocity of each point.
        td>> No
    tr>>
        td>> `w`
        td>> Point
        td>> Vector
        td>> 
            Initial angular velocity of each point measured in radians per second.
        td>> No
    tr>>
        td>> `friction`
        td>> Point
        td>> Float
        td>> Friction of each point.
        td>> Yes
    tr>>
        td>> `dynamicfriction`
        td>> Point
        td>> Float
        td>> Defines how much to scale the friction value when there is motion at the point of contact.
        td>> Yes
    tr>>
        td>> `klinear`
        td>> Edge (vertex)
        td>> Float
        td>> Defines how strongly the wire resists stretching.
        td>> Yes
    tr>>
        td>> `damplinear`
        td>> Edge (vertex)
        td>> Float
        td>> 
            Defines how strongly the wire resists oscillation due to stretching forces.
        td>> Yes
    tr>>
        td>> `kangular`
        td>> Edge (vertex)
        td>> Float
        td>> Defines how strongly the wire resists bending.
        td>> Yes
    tr>>
        td>> `dampangular`
        td>> Edge (vertex)
        td>> Float
        td>> 
            Defines how strongly the wire resists oscillation due to bending forces.
        td>> Yes
    tr>>
        td>> `targetstiffness`
        td>> Point
        td>> Float
        td>> Defines how strongly the wire resists deforming from the animated position.
        td>> Yes
    tr>>
        td>> `targetdamping`
        td>> Point
        td>> Float
        td>> Defines how strongly the wire resists oscillation due to stretch forces.
        td>> Yes
    tr>>
        td>> `normaldrag`
        td>> Point
        td>> Float
        td>> The component of drag in the directions normal to the wire.  Increasing this will make the wire go along with any wind that blows normal to the wire.
        td>> Yes
    tr>>
        td>> `tangentdrag`
        td>> Point
        td>> Float
        td>> The component of drag in the direction tangent to the wire.  Increasing this will make the wire go along with any wind that blows tangent to the wire.
        td>> Yes
    tr>>
        td>> `nocollide`
        td>> Edge (vertex)
        td>> Float
        td>> Values greater than 0.5 disable collision detection for the edge.
        td>> No
    tr>>
        td>> `restP`
        td>> Point
        td>> Vector
        td>> Rest position of each point.
        td>> No
    tr>>
        td>> `restorient`
        td>> Point
        td>> Float4
        td>> Rest orientation of each point.
        td>> No
    tr>>
        td>> `gluetoanimation`
        td>> Point
        td>> Float or Integer
        td>> Values greater than 0.5 cause a point's position and orientation to be constrained to the input geometry.
        td>> No
    tr>>
        td>> `pintoanimation`
        td>> Point
        td>> Float or Integer
        td>> Values greater than 0.5 cause a point's position to be constrained to the input geometry.
        td>> No
    tr>>
        td>> `animationP`
        td>> Point
        td>> Vector
        td>> Target position of each point.
        td>> No
    tr>>
        td>> `animationorient`
        td>> Point
        td>> Float4
        td>> Target orientation of each point.
        td>> No
    tr>>
        td>> `animationv`
        td>> Point
        td>> Vector
        td>> Target velocity of each point.
        td>> No
    tr>>
        td>> `animationw`
        td>> Point
        td>> Vector
        td>> Target angular velocity of each point.
        td>> No
    tr>>
	td>> `selfcollisionallowed`
	td>> Point
	td>> Integer
	td>> A value of 0 disables the self collisions for the point. A value of 1 enables self collisions.
	td>> No
    tr>>
	td>> `selfcollisionresolved`
	td>> Point
	td>> Integer
	td>> A value of 0 temporarily disables self collisions for the point, indicating that the collision was not properly resolved. This is updated each step. 
	td>> No
    tr>>
	td>> `externalcollisionallowed`
	td>> Point
	td>> Integer
	td>> A value of 0 disables the external collisions for the point. A value of 1 enables external colisions. 
	td>> No
    tr>> 
	td>> `externalcollisionresolved`
	td>> Point
	td>> Integer
	td>> A value of 0 temporarily disables external collisions for the point, indicating that the collision was not properly resolved. This is updated each step. 
	td>> No
    tr>> 
	td>> `softbodycollisionallowed`
	td>> Point
	td>> Integer
	td>> A value of 0 disables the soft body (objects solved by the same solver) collisions for the point. A value of 1 enables soft body colisions. 
	td>> No
    tr>> 
	td>> `softbodycollisionresolved`
	td>> Point
	td>> Integer
	td>> A value of 0 temporarily disables soft body (objects solved by the same solver) collisions for the point, indicating that the collision was not properly resolved. This is updated each step. 
	td>> No
