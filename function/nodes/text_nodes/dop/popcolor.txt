#type: node
#context: dop
#internal: popcolor
#icon: POP/color

= POP Color =

"""A POP node that colors particles."""

The POP Color node colors each particle.

This operator modifies the `Alpha` and `Cd` attributes.

[Include:/shelf/dynamics_popcolor#includeme]

@parameters
    [Include:standard_pop_parms#commonMain/]

    == Color ==

	Update Color:
	    Should the `Cd` attribute be created or updated.

	Color Type:
	    How to apply the color.

	    Constant:
		Each particle is assigned the same color from the specified color field.

	    Random:
		Each particle receives a random color.  This requires each particle to have its own random seed.

	    Ramp:
		A color ramp is given which is evaluated.  Each particle thus has to determine where it will evaluate the ramp.

	    Blend:
		A start and end color is provided.  The ramp is used to determine the blend between the colors.  This allows the start and color of the blend to be overriden on a per-particle basis.

	Color:
	    The color to use for each particle.

	Seed:
	    The seed for the random computation of particle colors.
	
	Ramp:
	    A color ramp to blend between a series of colors.

	Start:
	    The start color, used when the blend ramp evaluates to 0.
	
	End:
	    The end color, used when the __Blend Ramp__ evaluates to 1.

	Blend Ramp:
	    A spline ramp to determine how to blend between the start and end colors.

	Range:
	    The compute ramp value from the VEXpression should be within this range.  This range will be mapped to 0..1 and looked up in the ramp.

	    Thus, to reverse the ramp, you can set this to 1..0

    == Alpha ==

	Update Alpha:
	    Should the `Alpha` attribute be created or updated.

	Alpha Type:
	    How to update the alpha.

	    Constant:
		Each particle is given the same alpha value.

	    Ramp:
		An alpha ramp is given which is evaluated. Each particle has to determine where to evaluate on this ramp by assigning the variable `ramp` in the VEXpression.

	Alpha:
	    The constant value to assign to each particle.
	
	Ramp:
	    Using the computed `ramp` variable, look up in this ramp to get the alpha value.
	
	Range:
	    The compute ramp value from the VEXpression should be within this range.  This range will be mapped to 0..1 and looked up in the ramp.

	    Thus, to reverse the ramp, you can set this to 1..0

    == Bindings ==

	[Include:standard_pop_parms#bindingsParms/]

@inputs
    [Include:standard_pop_inputs]

@outputs
    [Include:standard_pop_outputs]

@locals
    [Include:standard_data_locals]

    [Include:standard_locals]



@related


