#type: node
#context: chop
#internal: blend
#icon: COMMON/blend

= Blend =

"""Combines two or more chops in input 2, 3 and so on, by using a set of
blending channels in input 1."""

The Blend CHOP combines two or more chops in input 2, 3 and so on, by
using a set of blending channels in input 1. The blending channels cause
different strengths of the chops to contribute to the output of the
chop. It works like the [Blend SOP|Node:sop/blendshapes].

Input 1 acts as the control input, which contains the blend weight
channels for the rest of the inputs. There is one channel in it for each
of the blended chops coming in on input 2, 3 and so on.

The first channel in input 1 is input 2's blend weight, the second
channel in input 1 is the input 3's blend weight, and so on. There
should be as many blend channels in input 1 as there are inputs,
excluding input 1.

The interval of the output of the chop is the interval of input 1 (the
blend channels).

If input 2 onwards are just poses, it's acceptable, as the chop blends
between poses by using extend conditions.

== Advantages of Difference Method ==

    Each blend input affects the result without reducing the effect of
    the others. You can exaggerate beyond each of the inputs by setting
    their Blend > 1, and you can also use negative values. When all
    blend channels are 0, you get smooth transitions as any of the blend
    channels ease out of zero.


@parameters

== Blend ==

    Method:
        The blend method.

        Proportional:
            Each blend source contributes to the result according to its
            blend weight. If the blend weights do not add up to one,
            they are scaled so that they do.
        Difference:
            The input 2 is always the "base", which is the default behavior of the Blend CHOP. There are blend channels for all the
            other inputs, and when they are all zero, you get base. If
            any one blend channel is 1 and the others are zero, then
            your output is the same as the input that corresponds to
            that blend channel.
    Omit First Weight Channel:
        The weight channel for the
        base input has no effect when using the __Differencing__ method. So, the channel is omitted if this option is on.

    Rotation Blending:
        Rotation channels typically don't blend well when treated as Euler 
        angles, and straight linear
        blending can result in flips and odd rotations. Instead, shortest path blending can be used to properly
        blend orientations represented by Euler rotation angles.

        Euler:
	    Rotation channels are blended like any other channel.
        Shortest Path (Linear):
            Two inputs are blended using shortest path rotation blending. If 
	    more than two blend inputs are connected, use __Fast Linear__.
 	Shortest Path (Fast Linear):
	    Multiple inputs are blended together using shortest path rotation
            blending.
     
    Use Rotation Hint:
        When rotation blending is set to __Shortest Path__, a rotation hint can be
        specified when recreating the Euler angles. This hint will modify the
        starting values of the Euler angles so that they are close to the 
	rotation hint. When off, the hint is ignored and the Euler angles will
	not be altered from their computed values.

	This can be useful if many CHOPs in the same network are working with
        rotations, then all these CHOPs can have their rotation hints set to the
	same values to keep the Euler angles similar.
      
         
[Include:common]

@related
    - [Node:chop/comp]
    - [Node:chop/interp]
    - [Node:chop/sequence]

