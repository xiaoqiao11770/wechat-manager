= Pitch =

#type: node
#context: chop
#internal: pitch
#icon: CHOP/pitch

"""Attempts to extract the fundamental pitch of a musical tone from the input audio."""

As with many types of FFT-based audio analysis, the Pitch CHOP works best with
simple signals such as a sine tone, but there are several controls for
extracting useful information from the more complex spectra generated by acoustic
instruments or the human voice.

Fundamental pitch extraction is quite difficult with many signals, so this will
probably only be useful in certain situations. If you can filter the incoming signal
with, for example, low-pass filters that will help. It will also help if you can
roughly hear the contour of the melody so that you can determine if the values
returned by the pitch chop make sense.

Once you have something close you can try using the
[Filter CHOP|Node:chop/filter] with a __Despike__ filter and various other settings
to remove unwanted errors.

@parameters

== Pitch ==

Pitch mode:

Frequency Resolution:

Minimum level:

Pitch range:

Pitch step:

Pitch divisions:

Smooth pitch changes:

== Detect ==

Harmonic detection:

Harmonic error:

Harmonic frequency correction:

Limit bandwidth:

Bandwidth:

Select neighboring frequencies:

Neighbor bandwidth:

Use pitch hint:

Pitch hint:

Hint bias:

Smooth octave jumps:

Max octave jump:

== Channel ==

Pitch suffix:

Level suffix:

Pitch output:

Reference frequency:

Pitch adjust:

Volume adjust:

Sample rate:

[Include:common]


