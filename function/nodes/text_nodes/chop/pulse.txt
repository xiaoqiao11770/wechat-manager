#type: node
#context: chop
#internal: pulse
#icon: CHOP/pulse

= Pulse =

"""Generates pulses at regular intervals of one channel."""

This CHOP generates pulses at regular intervals of one channel. The
amplitude of each pulse can be edited with the chop sliders or with
handles on the graph.

The Pulse chop can be used as triggers to the [Copy CHOP|copy], and can
represent regularly-timed events.

By default, the pulses are a single sample long, but you can increase
the __Pulse Width__ so that the pulses are steps to the next pulse. You can
also interpolate the values between pulses, as Linear, Ease In Ease Out,
Cubic or other curves.

The pulses can be restricted to a minimum / maximum limit. If the _Limit
Type_ is Clamp, the graph has additional convenient handles at the
minimum and maximum for each pulse.

The Pulse CHOP generates a single channel of up to 32 pulses, and you
can merge several Pulse chops into a multi-channel CHOP.

The Pulse CHOP uses its optional second input as a start/end reference,
so a number of Pulse chops can be stretched to the same interval.

In order to set the value at the last sample, the option, __Last Pulse at
Last Sample__ is provided. Otherwise, the last pulse is prior to the last
sample.


@parameters

    == Pulse ==

        Number of Pulses:
            #channels: /number

            Total number of pulses in the channel.
        Interpolate:
            How to interpolate between pulse values.
        Pulse Width:
            #channels: /width

            The width of each pulse, in Units.
        Limit Type:
            Pulse values can be clamped into a range given by the
            minimum and maximum parameters listed below.
        Minimum:
            #channels: /min

            The minimum pulse value.
        Maximum:
            #channels: /max

            The maximum pulse value.
        Last Pulse at Last Sample:
            If on, the last sample will contain the last pulse, with
            pulses at the start of intervals of length "Channel Length /
            (#Pulses -1)". Otherwise the pulses will be at the start of
            intervals of length "Channel Length / #Pulses".

    == 0, 8, 16, 24 ==

        Pulse x:
            #channels: /pulse0-31

            The value of each pulse.

    == Channel ==

        Start:
            #channels: /start

            The start time of the desired interval.
        End:
            #channels: /end

            The end time of the desired interval.
        Extend Left:
            The left extend conditions.
        Extend Right:
            The right extend conditions.
        Default Value:
            #channels: /defval

            The default value for extend conditions.
            
    [Include:common]
    
@locals
    C:
        The current channel (0 to NC-1).
    NC:
        The total number of channels.

@related
    - [Node:chop/copy]

