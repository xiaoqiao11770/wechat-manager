#type: node
#context: obj
#internal: threepointlight
#tags: lights

= Three Point Light =

"""A classic lighting scheme for key, fill and rim lights. Use this light for a basic illumination of objects in a scene."""

Key Light provides the main source of object illumination - it is the most dominant light source and casts the darkest shadows.

Fill Light extends the Key Light illumination and makes the object more visible. It simulates secondary light sources such as table lamps, environmental sources other than the sun, or reflected and bounced lights.

NOTE:
    Fill Light should come from an angle that is opposite to the Key Light.

Rim light creates a bright line of light around the edge of an object. It is usually used to separate the object from its background.

Houdini also provides a fourth light, called Bounce light. The bounce light reflects light onto an object based on light location to give the effect of natural or available light. This type of lighting also softens the harshness of the Key Light. 

Bounce lights are optimal when doing micropolygonal rendering - use bounce lighting when not doing PBR. 

@parameters

== Transform ==

[Include:common#keeppos]

[Include:common#childcomp]

[Include:common#pretransform]

[Include:common#xord]

[Include:common#t]

[Include:common#r]

[Include:common#scale]

[Include:common#lookat]

[Include:common#lookatup]

[Include:follow_parms]

== Light == 

Categories:
    #id: categories

    Defines the set membership of this object.

Look At Camera:
    #id: lookat_camera

    The camera which views the subject. This allows the light rig to orient itself properly, so that the key light illuminates from the front, while the rim light illuminates from the back, etc.

Camera Up Vector:
    #id: lookup_camera

    How the rig rotates around the viewing axis to align it with the camera up vector.

    Use up vector:
        The light rig is going to be oriented so that its up vector lies in the plane formed by the viewing direction axis and the camera up vector.

    Use quaternions:
        The light rig rotates from its natural orientation (up-vector being y-axis) to align with the camera up vector using quaternions (great circle rotation).

Use Only Camera Azimuth:
    #id: azimuth_only

    Light rig rotates only horizontally (i.e., only around the vertical axis) regardless of the animation path of the camera.

Lights Enabled:
    #id: light_enable

    Disables all lights in the viewport when turned off.

Use lights look-at target:
    #id: use_look_at_target

    Fine-tuning of the exact point where light components are directed.

Lights Look At:
    #id: look_at_target

    The point in space at which the component lights are directed when __Use lights look-at target__ is enabled

=== Key Light ===

Light Enabled:
    #id: key_light_light_enable

    The Key Light illumination. When turned off, equivalent to setting the light intensity to 0.

Show Direction Manipulator:
    #id: show_key_direction

    The direction the Key Light is coming from. 

Direction To Light:
    #id: key_direction_r

    Changes the direction of the Key Light as determined by the value of the specified axis. It is a direction vector towards the component light within the three point light rig.

Translate:
    #id: key_light_l_ t

    Adjusts the light position.

Rotate:
    #id: key_light_l_r

    Adjusts the light rotation.

==== Light ====

Light Type:
    #id: key_light_light_type

    Type of light used to illuminate an object.

    Distant Light:
        A parallel ray light source far away from the scene. This light casts sharp shadows and ensures that all the surface of an object is illuminated with the rays coming from the same direction.

    Spot Light:
        Radiates a cone shaped beam of light from a point towards a certain direction.

    Point Light: 
        Emits light from a point in all directions, similar to a light bulb.


Light Color:
    #id: key_light_light_color

    The color of light illuminated on the object.

Light Intensity:
    #id: key_light_light_intensity

    Amount of light placed on the selected color. For example, if the intensity is 0, the light is disabled.

Diffuse Contribution:
    #id: key_light_light_contribdiff

    Diffuses illumination on a given surface. 

Specular Contribution:
    #id: key_light_light_contribspec

    Provides specular highlights when illuminating an object surface. 

===== Spot Light Options =====

Note:
    You can only change the Cone parameters when using a Spot Light light type.

Cone Angle:
    #id: key_light_coneangle

    The size of the spotlight beam. Indicates the spotlight cone's degree of wideness.

Cone Delta:
    #id: key_light_conedelta

    Penumbra degree for spotlights.

Cone Rolloff:
    #id: key_light_coneroll

    Shape exponent of penumbra (larger = sharper).

Projection Map:
    #id: key_light_projmap

    Specifies the image that gets projected. The viewing angle of the light will determine the area of projection. 

Use cone angle for field of view:
    #id: key_light_light_conefov

    Defines the field of view when rendering shadow maps or using a projection map with a spot light. Turn off this parameter to enable the Projection Angle or Orthographic Width parameters.

Projection Angle:
    #id: key_light_light_fov

    The viewing angle used for depth map generation when perspective view is used.

Orthographic Width:
    #id: key_light_orthowidth

    Controls the field of view for depth map generation.

==== Shadows ====

Shadow Type:
    #id: key_light_shadow_type

    No Shadows:
        No shadows are cast by this light.

    Ray-Traced Shadows (default):
        Uses Ray Tracing to compute shadows from this light source.

Shadow Mask:
    #id: key_light_shadowmask

    Mask objects that occlude for the light source. Shadow rays intersect objects when using ray-traced shadows. If you use depth map shadows, these objects appear in the depth map. 

Shadow Bias:
    #id: key_light_shadow_bias

    The bias when computing shadows from Key Light. If occluders are within this small distance, they are not considered shadowers. This is to prevent self-shadowing artifacts due to the limited resolution of depth map shadows.

Shadow Intensity:
    #id: key_light_shadow_intensity

    Amount of light blocked by occluders. Decrease the shadow intensity to ensure the occluders do not block all the light and allow some illumination through.

Shadow Quality:
    #id: key_light_shadow_quality

    Adjusts the quality of lookups when evaluating standard shadow maps or blurred shadows. 

Shadow Softness:
    #id: key_light_shadow_softness

    A blur on the shadow map when using depth mapped shadows. This is relative to micropolygon sizes when rendering with "Micropolygon Rendering”. 

Shadow Blur:
    #id: key_light_shadow_blur

    Controls a fractional blur of the shadow map image when rendering. Use __Shadow Blur__ to blur the map disregarding the surface derivatives.

Transparent Shadows:
    #id: key_light_shadow_transparent

    The surface shader of occluders are evaluated to determine opacity. Turning this option on will cause deep shadow maps to be used when shadowing using Depth Map Shadows.

    NOTE:
        The parameters below are Deep shadows. They are produced by default when rendering "Depth Map Shadows" with __Transparent Shadows__ enabled. Their advantages include:

        * Shadows of transparent objects, including volumetric objects.
        * Motion-blurred shadows.
        * Better shadow anti-aliasing.

        Deep shadow maps store the opacity of any translucent objects the light ray passes through as well as the depth of the final opaque surface. Note that Deep shadows use significantly more disk space than plain depth maps.

        See __Shadow Type__ for additional information on Deep shadows.


===== Depth Map Options =====

Auto-generate Shadow Map:
    #id: key_light_render_shadowmap

    Path is automatically generated.

Shadow Map:
    #id: key_light_shadowmap_file

    The path to the shadow map.

Resolution:
    #id: key_light_resx_key_light_resy

    The resolution of the shadow map. It is recommended that you keep the resolution the same in X and Y. 

Pixel Samples:
    #id: key_light_shadowmap_samples

    The number of pixel samples when rendering shadow maps. This is more important when using deep shadow maps (transparent shadows). 

Near Clipping:
    #id: key_light_near

    Distance to the near clipping plane.

Far Clipping:
    #id: key_light_far

    Distance to the near clipping plane.

Depth Map Motion Blur:
    #id: key_light_allowmotionblur

    When rendering deep shadow maps, it is possible to capture motion blur. If motion blurred shadows are desired, it’s important to turn on Transparent Shadows. 

=== Fill Light ===

Light Enabled:
    #id: fill_light_light_enable

    The Fill Light illumination. When turned off, equivalent to setting the light intensity to 0.

Show Direction Manipulator:
    #id: show_fill_direction

    The direction the Key Light is coming from.

Direction To Light:
    #id: fill_direction_r

    Changes the direction of the Key Light as determined by the value of the specified axis. It is a direction vector towards the component light within the three point light rig.

Translate:
    #id: fill_light_l_t

    Adjusts the light position.

Rotate:
    #id: fill_light_l_r

    Adjusts the light rotation.

==== Light ====

Light Type:
    #id: fill_light_light_type

    Type of light used to illuminate an object.

    Distant Light:
        A parallel ray light source far away from the scene. This light casts sharp shadows and ensures that all the surface of an object is illuminated with the rays coming from the same direction.

    Spot Light:
        Radiates a cone shaped beam of light from a point towards a certain direction.

    Point Light:
        Emits light from a single point in all directions, similar to a light bulb. 

    Area Light:
        Automatically distributes a number of light sources over a specified area. There are five area light shapes to choose from.

Light Color:
    #id: fill_light_light_color

    The color of light illuminated on the object.

Light Intensity:
    #id: fill_light_light_intensity

    Amount of light on the selected color. For example, if the intensity is 0, the light is disabled.

Diffuse Contribution:
    #id: fill_light_light_contribdiff

    Diffuses illumination on a given surface.

Specular Contribution:
    #id: fill_light_light_contribspec

    Provides specular highlights when illuminating an object surface.

===== Spot Light Options =====

Note:
    You can only change the Cone parameters when using a Spot Light light type.

Cone Angle:
    #id: fill_light_coneangle

    The size of the spotlight beam. Enter the degree of wideness the spotlight’s cone should be.

Cone Delta:
    #id: fill_light_conedelta

    Penumbra degree for spotlights.

Cone Rolloff:
    #id: fill_light_coneroll

    Shape exponent of penumbra (larger = sharper).

Projection Map:
    #id: fill_light_projmap
    
    Specifies the image that gets projected. The viewing angle of the light will determine the area of projection. 

Use cone angle for field of view:
    #id: fill_light_light_conefov

    Defines the field of view when rendering shadow maps or using a projection map with a spot light. Turn off this parameter to enable the Projection Angle or Orthographic Width parameters.

Projection Angle:
    #id: fill_light_light_fov

    The viewing angle used for depth map generation when perspective view is used.

Orthographic Width:
    #id: fill_light_orthowidth

    Controls the field of view for depth map generation.

===== Area Light Options =====

Area Shape:
    #id: fill_light_areashape

    The shape of the area light.

    Grid:
        Distributes lights over the area of a plane. This is the default shape created by the area light. 

    Line/Tube:
        Distributes lights along the length of a straight line.

    Disk:
        Distributes lights over the area of a disk. 

    Sphere:
        Distributes along the outside surface of a sphere. You can put objects inside this shape for an overall soft shadow look that is similar to global illumination irradiance. 

Area Samples:
    #id: fill_light_areasamples

    The number of lighting samples used to evaluate the light source.

Area Size:
    #id: fill_light_areasize

    A uniform scale on the area light.

Cosine Falloff:
    #id: fill_light_areacosine

    Area light rays are weighed with a cosine of a ray direction with respect to the normal area light.

Single Sided:
    #id: fill_light_areasingle

    Specifies whether the area light emits light from only one side.

Use full sphere for environment:
    #id: fill_light_areafullsphere

    Uses full sphere rather than limit the environment to hemisphere.

Use Area Map:
    #id: fill_light_areausemap

    Currently only used for environment lights.

Area Map:
    #id: fill_light_areamap

    Currently only used for environment lights. The area map will be tinted by the color of the light source.

==== Shadows ====

Shadow Type:
    #id: fill_light_shadow_type

    No Shadows:
        No shadows are cast by this light.

    Ray-Traced Shadows:
        Uses Ray Tracing to compute shadows from this light source.

Shadow Mask:
    #id: fill_light_shadowmask

    Mask objects that occlude for the light source. Shadow rays intersect objects when using ray-traced shadows. If you use depth map shadows, these objects appear in the depth map. 

Shadow Bias:
    #id: fill_light_shadow_bias

    The bias when computing shadows from Fill Light. If occluders are within this small distance, they are not considered shadowers. This is to prevent self-shadowing artifacts due to the limited resolution of depth map shadows.

Shadow Intensity:
    #id: fill_light_shadow_intensity

    Amount of light blocked by occluders. Decrease the shadow intensity to ensure occluders do not block all the light, allowing some illumination through.

Shadow Quality:
    #id: fill_light_shadow_quality

    Adjusts the quality of lookups when evaluating standard shadow maps or blurred shadows.

Shadow Softness:
    #id: fill_light_shadow_softness

    A blur on the shadow map when using depth mapped shadows. This is relative to micropolygon sizes when rendering with "Micropolygon Rendering”. 

Shadow Blur:
    #id: fill_light_shadow_blur

    Controls a fractional blur of the shadow map image when rendering. Use __Shadow Blur__ to blur the map disregarding the surface derivatives.

Transparent Shadows:
    #id: fill_light_shadow_transparent

    Evaluates the surface shader of occluders to determine opacity. Turning this option on causes deep shadow maps to be used when using Depth Map Shadows.

    NOTE:
        The parameters below are Deep shadows. They are produced by default when rendering "Depth Map Shadows" with __Transparent Shadows__ enabled. Their advantages include:

        * Shadows of transparent objects, including volumetric objects.
        * Motion-blurred shadows.
        * Better shadow anti-aliasing.

        Deep shadow maps store the opacity of any translucent objects the light ray passes through, as well as the depth of the final opaque surface. Note that Deep shadows use significantly more disk space than plain depth maps.

        See __Shadow Type__ for additional information on Deep shadows.

===== Depth Map Options =====

Auto-generate Shadow Map:
    #id: fill_light_render_shadowmap

Path is automatically generated.

Shadow Map:
    #id: fill_light_shadowmap_file

    The path to the shadow map.

Resolution:
    #id: fill_light_resx_fill_light_resy

    The resolution of the shadow map. It is recommended that you keep the resolution the same in X and Y.

Pixel Samples:
    #id: fill_light_shadowmap_samples

    The number of pixel samples when rendering shadow maps. This is more important when using deep shadow maps (transparent shadows). 

Near Clipping:
    #id: fill_light_near

    Distance to the near clipping plane.

Far Clipping:
    #id: fill_light_far
    
    Distance to the far clipping plane.

Depth Map Motion Blur:
    #id: fill_light_allowmotionblur

    When rendering deep shadow maps, it is possible to capture motion blur. If you desire motion blurred shadows, turn on Transparent Shadows. 

=== Rim Light ===

Light Enabled:
    #id: rim_light_light_enable

    Rim Light illumination. When turned off, equivalent to setting the light intensity to 0.

Show Direction Manipulator:
    #id: show_rim_direction

    Displays the direction the Rim Light is coming from.

Direction To Light:
    #id: rim_direction_r

     Changes the direction of the Rim Light as determined by the value of the specified axis. It is a direction vector towards the component light within the three point light rig.

Translate:
    #id: rim_light_l_t

    Adjusts the light position.

Rotate:
    #id: rim_light_l_r

    Adjusts the light rotation.

==== Light ====

Light Type:
    #id: rim_light_light_type

    Type of light used to illuminate an object.

    Distant Light:
        A parallel ray light source far away from the scene. This light casts sharp shadows and ensures that all the surface of an object is illuminated with the rays coming from the same direction.

    Spot Light:
        Radiates a cone shaped beam of light from a point towards a certain direction.

    Point Light: 
        Emits light from a point in all directions, similar to a light bulb.

    Area Light:
        Automatically distributes a number of light sources over a specified area, creating soft edge shadows. There are five area light shapes to choose from.

Light Color:
    #id: rim_light_light_color

    The color of light illuminated on the object.

Light Intensity:
    #id: rim_light_light_intensity

    Amount of light on the selected color. For example, if the intensity is 0, the light is disabled.

Diffuse Contribution:
    #id: rim_light_light_contribdiff

    Diffuses illumination on a given surface.

Specular Contribution:
    #id: rim_light_light_contribspec

    Provides specular highlights when illuminating an object surface.

===== Spot Light Options =====

Note:
    You can only change the Cone parameters when using a Spot Light light type.

Cone Angle:
    #id: rim_light_coneangle

    The size of the spotlight beam. Indicates the spotlight cone's degree of wideness.

Cone Delta:
    #id: rim_light_conedelta

    Penumbra degree for spotlights.

Cone Rolloff:
    #id: rim_light_coneroll

    Shape exponent of penumbra (larger = sharper).

Projection Map:
    #id: rim_light_projmap

    Specifies the image that gets projected. The viewing angle of the light will determine the area of projection. 

Use cone angle for field of view:
    #id: rim_light_light_conefov

    Defines the field of view when rendering shadow maps or using a projection map with a spot light. Turn off this parameter to enable the Projection Angle or Orthographic Width parameters.

Projection Angle:
    #id: rim_light_light_fov

    The viewing angle used for depth map generation when perspective view is used.

Orthographic Width:
    #id: rim_light_orthowidth

    Controls the field of view for depth map generation.

==== Shadows ====

Shadow Type:
    #id: rim_light_shadow_type

    No Shadows:
        No shadows are cast by this light.

    Ray-Traced Shadows:
        Uses Ray Tracing to compute shadows from this light source.

Shadow Mask:
    #id: rim_light_shadowmask

    Mask objects that occlude for the light source. Shadow rays intersect objects when using ray-traced shadows. If you use depth map shadows, these objects appear in the depth map. 

Shadow Bias:
    #id: rim_light_shadow_bias

    The bias when computing shadows from Rim Light. If occluders are within this small distance, they are not considered shadowers. This is to prevent self-shadowing artifacts due to the limited resolution of depth map shadows.

Shadow Intensity:
    #id: rim_light_shadow_intensity

    Amount of light blocked by occluders. Decrease the shadow intensity to ensure the occluders do not block all the light and allow some illumination through.

Shadow Quality:
    #id: rim_light_shadow_quality

    Adjusts the quality of lookups when evaluating standard shadow maps or blurred shadows.

Shadow Softness:
    #id: rim_light_shadow_softness

    A blur on the shadow map when using depth mapped shadows. This is relative to micropolygon sizes when rendering with "Micropolygon Rendering”. 

Shadow Blur:
    #id: rim_light_shadow_blur

    Controls a fractional blur of the shadow map image when rendering. Use __Shadow Blur__ to blur the map disregarding the surface derivatives.

Transparent Shadows:
    #id: rim_light_shadow_transparent

    Evaluates the surface shader of occluders to determine opacity. Turning this option on causes deep shadow maps to be used when using Depth Map Shadows.

    NOTE:
        The parameters below are Deep shadows. They are produced by default when rendering "Depth Map Shadows" with __Transparent Shadows__ enabled. Their advantages include:

        * Shadows of transparent objects, including volumetric objects.
        * Motion-blurred shadows.
        * Better shadow anti-aliasing.

        Deep shadow maps store the opacity of any translucent objects the light ray passes through, as well as the depth of the final opaque surface. Note that Deep shadows use significantly more disk space than plain depth maps.

        See __Shadow Type__ for additional information on Deep shadows.

===== Depth Map Options =====

Auto-generate Shadow Map:
    #id: rim_light_render_shadowmap

    Path is automatically generated.

Shadow Map:
    #id: rim_light_shadowmap_file

    The path to the shadow map.

Resolution:
    #id: rim_light_resx_rim_light_resy

    The resolution of the shadow map. It is recommended that you keep the resolution the same in X and Y.

Pixel Samples:
    #id: rim_light_shadowmap_samples

    The number of pixel samples when rendering shadow maps. This is more important when using deep shadow maps (transparent shadows). 

Near Clipping:
    #id: rim_light_near

    Distance to the near clipping plane.

Far Clipping:
    #id: rim_light_far

    Distance to the far clipping plane.

Depth Map Motion Blur:
    #id: rim_light_allowmotionblur

    When rendering deep shadow maps, it is possible to capture motion blur. If you desire motion blurred shadows, turn on Transparent Shadows. 

=== Bounce Light ===

Light Enabled:
    #id: bounce_light_light_enable

    The Bounce Light illumination. When turned off, equivalent to setting the light intensity to 0.

Show Direction Manipulator:
    #id: show_bounce_direction

    The direction the Rim Light is coming from.

Direction To Light:
    #id: bounce_direction_r

    Changes the direction of the Rim Light as determined by the value of the specified axis. It is a direction vector towards the component light within the three point light rig.

Translate:
    #id: bounce_light_l_ t

    Adjusts the light position

Rotate:
    #id: bounce_light_l_r 

    Adjusts the light rotation.

==== Light ====

Light Type:
    #id: bounce_light_light_type

    Type of light used to illuminate an object.

    Distant Light:
        A parallel ray light source far away from the scene. This light casts sharp shadows and ensures that all the surface of an object is illuminated with the rays coming from the same direction.

    Spot Light:
        Radiates a cone shaped beam of light from a point towards a certain direction.

    Point Light: 
        Emits light from a point in all directions, similar to a light bulb.

    Area Light:
        Automatically distributes a number of light sources over a specified area, creating soft edge shadows. There are five area light shapes to choose from.

Light Color:
    #id: bounce_light_light_color

    The color of light illuminated on the object.

Light Intensity:
    #id: bounce_light_light_intensity

    Amount of light on the selected color. For example, if the intensity is 0, the light is disabled.

Diffuse Contribution:
    #id: bounce_light_light_contribdiff

    Diffuses illumination on a given surface.

Specular Contribution:
    #id: bounce_light_light_contribspec

    Provides specular highlights when illuminating an object surface.

===== Spot Light Options =====

Note:
    You can only change the Cone parameters when using a Spot Light light type.

Cone Angle:
    #id: bounce_light_coneangle

    The size of the spotlight beam. Indicates the spotlight cone's degree of wideness.

Cone Delta:
    #id: bounce_light_conedelta

    Penumbra degree for spotlights.

Cone Rolloff:
    #id: bounce_light_coneroll

    Shape exponent of penumbra (larger = sharper).

Projection Map:
    #id: bounce_light_projmap

    Specifies the image that gets projected. The viewing angle of the light will determine the area of projection.

Use cone angle for field of view:
    #id: bounce_light_light_conefov

    Defines the field of view when rendering shadow maps or using a projection map with a spot light. Turn off this parameter to enable the Projection Angle or Orthographic Width parameters.

Projection Angle:
    #id: bounce_light_light_fov

    The viewing angle used for depth map generation when perspective view is used.

Orthographic Width:
    #id: bounce_light_orthowidth

    Controls the field of view for depth map generation.

===== Area Light Options =====

Area Shape:
    #id: bounce_light_areashape

    Grid:
        Distributes lights over the area of a plane. This is the default shape created by the area light. 

    Line/Tube:
        Distributes lights along the length of a straight line.

    Disk:
        Distributes lights over the area of a disk. 

    Sphere:
        Distributes along the outside surface of a sphere. You can put objects inside this shape for an overall soft shadow look that is similar to global illumination irradiance.

Area Samples:
    #id: bounce_light_areasamples

The number of lighting samples used to evaluate the light source.

Area Size:
    #id: bounce_light_areasize

    A uniform scale on the area light.

Cosine Falloff:
    #id: bounce_light_areacosine

    Area light rays are weighed with a cosine of a ray direction with respect to the normal area light

Single Sided:
    #id: bounce_light_areasingle

    Specifies if the area light emits light from only one side.

Use full sphere for environment:
    #id: bounce_light_areafullsphere

    Uses full sphere rather than limit the environment to hemisphere.

Use Area Map:
    #id: bounce_light_areausemap

    Currently only used for environment lights.

Area Map:
    #id: bounce_light_areamap

    Currently only used for environment lights. The area map will be tinted by the color of the light source.

==== Shadows ====

Shadow Type:
    #id: bounce_light_shadow_type

    No Shadows:
        No shadows are cast by this light.

    Ray-Traced Shadows (default):
        Uses Ray Tracing to compute shadows from this light source.

Shadow Mask:
    #id: bounce_light_shadowmask

    Mask objects that occlude for the light source. Shadow rays intersect objects when using ray-traced shadows. If you use depth map shadows, these objects appear in the depth map. 

Shadow Bias:
    #id: bounce_light_shadow_bias

    The bias when computing shadows from bounce Light. If occluders are within this small distance, they are not considered shadowers. This is to prevent self-shadowing artifacts due to the limited resolution of depth map shadows.

Shadow Intensity:
    #id: bounce_light_shadow_intensity

    Amount of light blocked by occluders. Decrease the shadow intensity to ensure the occluders do not block all the light and allow some illumination through.

Shadow Quality:
    #id: bounce_light_shadow_quality

    Adjusts the quality of lookups when evaluating standard shadow maps or blurred shadows. 

Shadow Softness:
    #id: bounce_light_shadow_softness

A blur on the shadow map when using depth mapped shadows. This is relative to micropolygon sizes when rendering with "Micropolygon Rendering”. 

Shadow Blur:
    #id: bounce_light_shadow_blur

    Controls a fractional blur of the shadow map image when rendering. Use __Shadow Blur__ to blur the map disregarding the surface derivatives.

Transparent Shadows:
    #id: bounce_light_shadow_transparent

Evaluates the surface shader of occluders to determine opacity. Turning this option on causes deep shadow maps to be used when using Depth Map Shadows.

    NOTE:
        The parameters below are Deep shadows. They are produced by default when rendering "Depth Map Shadows" with __Transparent Shadows__ enabled. Their advantages include:

        * Shadows of transparent objects, including volumetric objects.
        * Motion-blurred shadows.
        * Better shadow anti-aliasing.

        Deep shadow maps store the opacity of any translucent objects the light ray passes through, as well as the depth of the final opaque surface. Note that Deep shadows use significantly more disk space than plain depth maps.

        See __Shadow Type__ for additional information on Deep shadows.

===== Depth Map Options =====

Auto-generate Shadow Map:
    #id: bounce_light_render_shadowmap

    Path is automatically generated.

Shadow Map:
    #id: bounce_light_shadowmap_file

    The path to the shadow map.

Resolution:
    #id: bounce_light_resx_bounce_light_resy

    The resolution of the shadow map. It is recommended that you keep the resolution the same in X and Y.

Pixel Samples:
    #id: bounce_light_shadowmap_samples

    The number of pixel samples when rendering shadow maps. This is more important when using deep shadow maps (transparent shadows).

Near Clipping:
    #id: bounce_light_near

    Distance to the near clipping plane.

Far Clipping:
    #id: bounce_light_far

    Distance to the far clipping plane.

Depth Map Motion Blur:
    #id: bounce_light_allowmotionblur

    When rendering deep shadow maps, it is possible to capture motion blur. If you desire motion blurred shadows, turn on Transparent Shadows. 

== Subnet ==

[Include:common#display]

Output Transform:
    #id: outputobj

    Allows you to choose the position in space that is defined by the output transform of the three point light node. Input 1 is the same as the input space (i.e - position of the input node). Choosing key light, for example, outputs the key light position. Any node subsequently parented to the output of the light rig will be positioned in that space.

Visible children:
    #id: visibleobjects

    Space separated list of objects to display inside the subnet. Use `*` to make all objects visible (default), and Wildcards and  [bundle references|/basics/bundles]  to specify objects.

    This parameter lets you:

    * Quickly filter the visible objects based on an existing naming convention, for example `*_proxy`.

    * Control visibility of objects inside a locked  [digital assets|/assets]  where the display flags are not available.

    In a normal subnet you can simply go into the subnet and set the  [display flag|/nodes/sop]  on objects.

[Include:misc_parms#picking]

[Include:misc_parms#pickscript]

[Include:common#cachedata]




