#type: node
#context: obj
#internal: instance
#icon: OBJ/geo

#tags: objects, model

= Instance =

"""Instance Objects can instance other geometry, light, or even subnetworks of objects."""

Instance Objects can instance other geometry, light, or even subnetworks of objects. By enabling point instancing, the point geometry of the instance object is used to create multiple instances, similar to the copy SOP.

@parameters

== Transform ==

    [Include:common#keeppos]

    [Include:common#childcomp]

    [Include:common#pretransform]

    [Include:common#xord]

    [Include:common#t]

    [Include:common#r]

    [Include:common#s]

    [Include:common#p]

    [Include:common#scale]

    [Include:common#p]

    [Include:common#scale]

    == Viewing Options ==

        [Include:misc_parms]
        
        [Include:common#shadeopen]

    == Lookat Options ==
    
        [Include:common#lookat]

        [Include:common#lookatup]

    == Path Options ==
    
        [Include:follow_parms]

== Instance ==

    [Include:common#display]

    Instance Object:
        Instance the given object's geometry.

    Point Instancing:
        Off:
            No point instancing. Instead, the instanced object simply replaces the instancing object. 

        Full point instancing:
            Lets you modify any object-level rendering property (material assignment, shading, sampling, dicing, etc.) across point instances via an expression, using the `instancepoint()` function to get the current point index. It also supports the same point attributes as fast point instancing. The variation is done at export time, and usually leads to much larger IFDs/RIBs and slower export.

        Fast point instancing:
            Renderable properties can only be varied across different point instances through a limited set of point attributes:`instance`, `material_override`, and `shop_materialpath`. The last two can be easily set by using the [Material SOP|Node:sop/material]. Additionally, the object-level variations are ignored. For example, the `instancepoint()` function will return zero. The variation is done at render time and has very little impact on the IFD size or export time. 

    Point Motion Blur:
        If point instancing, this parameter specifies the motion blur behavior
        when rendering.  Each point will have an instance of geometry.
	The transform of this instance is determined by the point's
	position.  Transformation motion blur on the instance is
	determined by the motion of the point.  The motion of the
	points is controlled by this parameter.

        No Motion Blur:
            Do not perform motion blur.

        Compute sub-frame geometry (deformation):
	    Compute the point's position by evaluating the geometry at
	    sub-frame intervals.  This can be problematic if the point
	    count is changing frame to frame.

        Use point velocity attribute:
            The point's vector attribute "v" is used to extrapolate
	    the motion of the point.

    Subnetwork Filtering:
        This option specifies how instancing is performed when a Subnet Object
        is specified as the Instance Object.

        All Objects:
            Instance all objects within the subnet.

        Displayed Objects:
            Only instance the displayed objects from the subnet.

        Specify by a pattern:
            Use the pattern mask specified by the Subnetwork Pattern parameter.

    Subnetwork Pattern:
        When Subnetwork Filtering is set to "Specify by a pattern", this
        parameter gives the pattern mask for determining which objects are
        rendered from the instanced Subnet object.

    Override Properties:
        Specifies a Property SHOP that is used to resolve rendering parameter
        values. At render time, this SHOP (if given) is used to resolve
        rendering parameter values first, before looking for them on the
        objects being instanced.

	NOTE:
	    It is also possible to attach a material to each point
	    using the [Material SOP|/nodes/sop/material].

@locals

[Include:common#ipt]

