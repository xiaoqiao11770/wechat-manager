#type: include

== Transform == (transform_tab)

Keep Position When Parenting:
    #id: keeppos

    When the object is re-parented, maintain its current world position by
    changing the object's transform parameters.

Child Compensation:
    #id: childcomp

    When the object is being transformed, maintain the current world transforms 
    of its children by changing their transform parameters.

Pre-transform menu:
    #id: pretransform

    This menu contains options for manipulating the
    [pre-transform|/basics/objects#pretransform] values. The pre-transform is an internal
    transform that is applied prior to the regular transform parameters.
    This allows you to change the frame of reference for the translate, rotate,
    scale parameter values below without changing the overall transform.

    Clean Transform:
        This reverts the translate, rotate, scale parameters to their
        default values while maintaining the same overall transform.
    Clean Translates:
        This sets the translate parameter to (0, 0, 0) while maintaining
        the same overall transform.
    Clean Rotates:
        This sets the rotate parameter to (0, 0, 0) while maintaining the
        same overall transform.
    Clean Scales:
        This sets the scale parameter to (1, 1, 1) while maintaining the
        same overall transform.
    Extract Pre-transform:
        This removes the pre-transform by setting the translate, rotate,
        and scale parameters in order to maintain the same overall
        transform. Note that if there were shears in the pre-transform, it can not be completely removed.
    Reset Pre-transform:
        This completely removes the pre-transform without changing any
        parameters. This will change the overall transform of the object if
        there are any non-default values in the translate, rotate, and
        scale parameters.

Transform Order:
    #id: xord

    The left menu chooses the order in which transforms are applied
    (for example, scale, then rotate, then translate). This can change the
    position and orientation of the object, in the same way that going a
    block and turning east takes you to a different place than turning east
    and then going a block.

    The right menu chooses the order in which to rotate around the
    X, Y, and Z axes. Certain orders can make character joint
    transforms easier to use, depending on the character.

Translate:
    #id: t

    Translation along XYZ axes.

Rotation:
    #id: r

    Degrees rotation about XYZ axes.

Scale:
    #id: s

    Non-uniform scaling about XYZ axes.

Pivot:
    #id: p

    Local origin of the object.
    See also [setting the pivot point|/basics/objects] .

Uniform Scale:
    #id: scale

    Scale the object uniformly along all three axes.

Look At:
    #id: lookat

    Object to point to. Constrains an object so its `-Z` axis always points
    at another object's _origin_.

Look At Up Vector:
    #id: lookatup

    When specifying a _look at_, it is possible to specify an up
    vector for the look at. This controls the roll of this object when
    looking at the _look at object_.

    Don't Use Up Vector:
        Use this option if the look at object does not pass through
        the Y axis of this object.
    Use Up Vector:
        This precisely defines the direction of the Y axis of this object
        while looking.  The up vector specified should not be parallel to
        the look at direction. The value used is specified by the _Orient
        Up Vector_ parameter below.
    Use Quaternions:
        Quaternions are a mathematical representation of a 3D
        rotation. This method finds the most efficient means of
        moving from one point to another on a sphere.

[Include:follow_parms]
    
== Material == (material_tab)

Material:
    Path to the Material node.

== Shading == (shading_tab)

Shader space:
    Use the transform space of this object for procedural shaders
    (choose "This object" or the name of another object to use).

Displace space:
    Use the transform space of this object for displacement shaders
    (choose "This object" or the name of another object to use).

SHOP surface:
    Defines the SHOP to apply as a surface shader.

SHOP photon:
    Defines the SHOP to be used for photon map generation.

SHOP displacement:
    Sets a displacement shader for VEX Mantra or RenderMan.

Smooth shading:
    Enables interpolating normals across polygonal surfaces.

Auto-gen reflection map:
    Automatically generate a reflection map when rendering.

<!--
Map name:
    TBD.
Map resolution:
    TBD.
-->

== RIB ==

RIB Colors:
    Assign colors to Cs and Os in RenderMan.


== Sound ==

Sound Material:
    Reference to a CHOP that defines the sound response of this
    geometry (see SpatialAudio CHOP help).

<!--
CHOP name:
    TBD.
-->

== Mask == (mask_tab)

These parameters let you add a _visual overlay_ to the viewport when
looking through this camera/light. This does not actually gate or
gobo the camera/light, it only affects the viewer.

For example, you can use the [Font SOP|Node:sop/font] in an overlay
to add information to the viewer, for use in
[flipbooks|/anim/flipbook].

NOTE:
    To show the gate/overlay, you must turn on the "Camera mask"
    icon on the __Guides and Markers__ tab of the display options
    window.

Mask Aspect:
    If a viewport's Camera Mask display option is selected, a
    transparent mask with the specified aspect ratio (width divided
    by height) will be displayed in that viewport when looking
    through this camera.
    
Mask Opacity:
    The opacity of the mask's color; the value lies between 0
    (completely transparent) and 1 (completely opaque).
    
Mask Overlay SOP:
    The SOP to render on top of the camera view. This can be used to
    display a slate over top of the view, for example.

    The geometry must:

    * Lie along the XY plane.

    * Lie between 0 and +1 in both directions.

    Houdini scales the portion of the mask geometry between 0 and +1
    X and Y to the view to create the overlay.

== Render == (render_tab)

Display:
    #id: display
    
    Whether or not this object is displayed in the viewport and rendered.
    Turn on the checkbox to have Houdini use this parameter,
    then set the value to 0 to hide the object in the viewport and not render it,
    or 1 to show and render the object.
    If the checkbox is off, Houdini ignores the value.

* [IncludeProp:vm_phantom]
* [IncludeProp:vm_renderable]
Display As:
        Choose how to display your geometry in the viewport.
* [IncludeProp:vm_rendersubd]

=== Shading ===

* [IncludeProp:categories]
* [IncludeProp:reflectmask]
* [IncludeProp:refractmask]
* [IncludeProp:lightmask]
* [IncludeProp:vm_volumefilter]
* [IncludeProp:vm_volumefilterwidth]
* [IncludeProp:vm_matte]
* [IncludeProp:vm_rayshade]

=== Sampling ===

* [IncludeProp:geo_velocityblur]

=== Dicing ===

* [IncludeProp:vm_shadingquality]
* [IncludeProp:vm_rayshadingquality]
* [IncludeProp:vm_flatness]
* [IncludeProp:vm_raypredice]
* [IncludeProp:vm_curvesurface]
     
=== Geometry ===

* [IncludeProp:vm_rmbackface]
* [IncludeProp:shop_geometrypath]
* [IncludeProp:vm_forcegeometry]
* [IncludeProp:vm_rendersubd]
* [IncludeProp:vm_renderpoints]
* [IncludeProp:vm_usenforpoints]
* [IncludeProp:vm_metavolume]    
* [IncludeProp:vm_coving]
* [IncludeProp:vm_materialoverride]
* [IncludeProp:vm_computeN]
* [IncludeProp:vm_overridedetail]

== Misc ==

Shade Open Curves In Viewport:
    #id: shadeopen

    Any open curves contained in this object will be lit when the viewport is set to do so.
    
    Turning this on will also use a GLSL shader better suited to hair if the `whitehair` or `guardhair` attributes are found in the geometry. 

    Curves with the `width` attribute will also be rendered as thick ribbons with varying width in shaded modes.

Cache Object Transform:
    #id: cachedata

    Caches object transforms once Houdini calculates them. This is
    especially useful for objects whose world space position is
    expensive to calculate (such as [Sticky objects|Node:obj/sticky]),
    and objects at the end of long parenting chains (such as
    [Bones|Node:obj/bone]). This option is turned on by default for Sticky and
    Bone objects.

    See the __OBJ Caching__ section of the
    [Houdini Preferences|/ref/windows/mainprefs#objcache] window
    for how to control the size of the object transform cache.

Onion Skinning:
    #id: onionskinning

    Draw this geometry with multiple skins, at different frames in the future
    and/or past. The number of skins before and after the current frame, the 
    frame increment between them, their opacity and color tinting can be
    configured in the 
    [3D Display Options|/ref/windows/displayopts_3d#onionskinning].

    [Image:/images/char/onionskinning2.png]

    Off:
       Turn off onion skinning.

    Transform only:
       Only show the effects of the object transform. This will not recook
       the actual geometry if it is changing over time, making it faster than
       Deformation.

    Deformation:
       Show the skins with both object transforms and geometry deformation.
       This will cause cooking of geometry at the SOP level, if animated.
       
    

== Locals ==

IPT:
    #id: ipt

    This is typically -1. However, if the object is performing point
    instancing, then this variable will be set to the point number
    of the template geometry. For the IPT variable to be active, the
    Point Instancing parameter must be turned on in this object.

    NOTE:
        This variable is deprecated. Use the
        [Exp:instancepoint] expression function instead.

