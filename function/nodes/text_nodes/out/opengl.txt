#type: node
#context: out
#internal: opengl
#icon: ROP/opengl

= OpenGL =

"""Render an image using the hardware-accelerated 3D viewport renderer."""

The OpenGL output operator renders the scene using the graphics hardware 
present on the system. It uses the 3D viewport renderer, but without rendering
any handles, guides or other decorations. A limited set of display options is
provided as parameters. This operator can be used in non-graphical applications,
such as hbatch or hython.

NOTE: 
   OpenGL 3.0 or GL_EXT_framebuffer_object is required to use this operator. A graphics device must be present on the system.

@parameters
    Render:
        Begins the render with the last render control settings. 

    Render Control:
        Opens the render control dialog to allow adjustments of the render parameters before rendering. 

    Valid Frame Range:
        Controls whether this render node outputs the current frame (__Render any frame__) or the image sequence specified in the __Start/End/Inc__ parameters (__Render Frame Range__).
    
        __Render Frame Range (strict)__ will render frames start to end when it is rendered, but will not allow frames outside this range to be rendered at all. __Render Frame Range__ will allow outside frames to be rendered. This is used in conjunction with render dependencies. It also affects the behavior of the Output Override for Frame Range in the [Render Control|/ref/windows/rendercontrol] dialog.

        Two possible cases where you would want strict behavior:
        
        - A 60 frame walk cycle written out to a geo, but part of a larger ROP net to render out a larger frame range.
        - A texture loop from 1-20.

        Otherwise, you will usually set this to non-strict.
    
        Render Current Frame: 
            Renders a single frame, based on the value in the playbar or the frame that is requested by a connected output render node.
    
        Render Frame Range:
            Renders a sequence of frames. If an output render node is connected, this range is generally ignored in favor of frames requested by the output render node.
        
        Render Frame Range (Strict):
            Renders a sequence of frames. If an output render node is connected, this range restricts its requested frames to this frame range.

    Start/End/Inc:
        Specifies the range of frames to render (start frame, end frame, and increment). All values may be floating point values. The range is inclusive. 
    
        These parameters determine the values of the local variables for the output driver.
            `$NRENDER`:
                The number of frames to be rendered by the output driver.
            `$N`:
                The current frame being rendered (starting at 1 and going to `$NRENDER`).
    
    Render With Take:
        The output driver will switch to this take before rendering and then restore the current take when rendering is done. Choose __Current__ to use the current take when rendering. 
    
    TIP:
        Use `chs("take")` to use this value in other parameters. See the [Exp:chs] expression function for more information.


=== Scene ===

    Camera:
        The camera object which defines the scene.

    Scene Path:
        The root path for the scene. All objects and lights in this object 
        network will be rendered.

    SOP Source:
        Which geometry to render in the object, either the SOP with the display
        or the render flag set.

    Candidate Objects:
        Specifies which objects will be rendered in the scene, if their display
	flags are also set. The paths can be absolute (`\/obj\/geo1`) or relative
        to the scene path (geo1, with a scene path of `\/obj`). Wildcards can be
        used (`\*`, `?`), as can the exclusion operator (`^`). `\* \^geo?` would 
	render all objects except for those like `geo1`, `geo2`, `geoN`. 

    Force Objects:
        Specifies that the objects that match the names or patterns of this
        parameter should always appear in the scene, even if
        their display flag is off.
        
        NOTE:
                This overrides the __Candidate Objects__ and __Exclude Objects__ parameters.

    Exclude Objects:
        Do not include objects in the scene if they match the names or patterns
        given by this parameter. This overrides both __Candidate__ and 
	__Force Objects__.

    Candidate Lights:
        Specifies which lights will be used to light the scene, if they are 
        enabled. The same rules apply to the light mask as
         __Candidate Objects__.

    Force Lights:
        The lights matching the names or patterns of this parameter will always
        be included, even if they are disabled.

    Exclude Lights:
        Do not include lights in the scene if they match the names or patterns
        given by this parameter. This overrides both __Candidate__ and 
	__Force Lights__.

    Initialize Simulation OPs:
        Forces all simulation OPs to be reset. This includes DOP
        Networks, POP SOPs, and other OPs that cache their results.

    Show in Viewport Menu:
        When enabled, this ROP will appear in the viewport's render menu.

    Override Camera Resolution:
        Normally, the resolution channels on the camera determine the output 
        resolution. Enabling this parameter allows an alternate resolution to 
	be used.

    Resolution:
        Allows you to override the camera resolution.
    
    Pixel Aspect Ratio:
        The pixel aspect ratio represents the width of a pixel divided by the 
        height of a pixel. It is not the aspect ratio of the image (which is 
        determined by the resolution of the image).  This parameter does not 
        affect rendering, it is only used to change how images are displayed, 
        by stretching the pixels by this factor.

    Background Image:
        Specifies a background image to use, either a file or a COP node 
        reference with op:. The background image is fit to the viewport area
        if the aspect ratios or size don't match.

    Viewport Comment:
        Places a comment in the upper left corner of the image, in addition to
        any viewport comment on the camera.

=== Output ===

    Output Image: 
        The image or device where the resulting image will be rendered. You can
	set this value to `ip` which renders the image in MPlay, or you can 
	save it to an image. The following image types are supported: `.pic`, 
	`.tif`, `.sgi`, `.pic.gz`, `.rat`, `.jpg`, `.cin`, `.rta`, `.bmp`, `.tga`, `.rad`, `.exr`, and `.png`.
    
        Include `$F` in the file name to insert the frame number. This is 
	necessary when rendering animation. See [expressions in file 
	names|/render/expressions] for more information.

    Image Format:
        The image format or device for the output image.  If you leave this at
	the default value of __Infer from filename__, the image format will be
	selected based on the file extension (eg. `.pic` will automatically 
	generate a Houdini format image).

        The options inside the box that follows are image format-specific. 

    [Include:standard#soho_mkpath]

    Gamma:
	Applies gamma correction to output image.

    LUT:
        Applies a LookUp Table (LUT) to the output image, after gamma is 
	applied.

=== Display Options ===

    NOTE: 
        The capabilities of the graphics hardware and driver may cause some of
        these options to be disabled.

    Antialias:
        Enables high-quality rendering by smoothing jagged edges
        of lines and polygons. Increasing this setting will proportionately 
        increase the amount of framebuffer memory used. 4x and 8x modes should
        only be used if the graphics memory installed on the graphics card is
	1GiB or higher.

    High Dynamic Range:
        Enables High Dynamic Range (HDR) rendering which produces higher 
	quality results for volumes and transparency. It can also be used in 
	conjunction with a LUT to view superwhite values. If enabled, 16b 
	or 32b floating point HDR images are rendered. 
        Enabling this option doubles or quadruples the framebuffer size.

        Off:
           Render using normal dynamic range, black to white, to a 8b 
           framebuffer.
        HDR (16b FP)
           Render using high dynamic range, to a 16b floating point framebuffer.
        Full HDR (32b FP)
           Render using high dynamic range, with a 32b floating point
           framebuffer. This is generally overkill for color, but may be useful
           for non-color data. 

    Stereo Mode:
        When the __Camera__ is a stereo camera, this determines the type of
	output image(s).
	
        Anaglyph:
    	   A red/cyan anaglyph image is produced, for use with red/cyan glasses.
    
        Separate Left/Right Images:
    	   Two images are produced for each frame, one for the left eye and the other for the right.

    Shading Mode:
        Select a [shading mode|/basics/view] for all geometry in the scene.

    Display Textures:
        Materials will include textures if enabled.

    High Quality Light Shading:
        Area and environment lights are rendered with more accurate 
	representations. Spotlight falloff and ramp-based attenuation are
	also incorporated into the shading. This mode attempts to closely match
	the results seen in mantra at the expense of performance.

        NOTE:
            This may disable Antialiasing if the graphics hardware does not support certain OpenGL features. 

        This shading does not apply to transparent objects if __Transparency__ is enabled. Normal shading is used instead. Additionally, this feature requires __Material Shaders__.

    Light Sampling:
        The number of samples to use when rendering area and environment lights
	in __High Quality Light Shading__ mode. It is ignored when this mode is
	not active.
	Higher numbers produce more accurate results, at a slight performance
	hit.

    Shadows:
        Enables light shadowing from those lights which have their 
	__Shadow Type__ parameter set to a shadowing method. This option 
	decreases performance and increases graphics memory use but greatly 
	improves the quality of the viewport display.

        TIP:
	    The light's shadow map(s) are re-calculated when its position, 
	    orientation or projection changes. You may want to disable shadows
	    while editing a light to improve interactivity.

        Increasing the shadow quality will improve the shadow's visualization,
	especially for area and environment lights, with a corresponding
	performance decrease.

        Point:
	    All lights are shadowed as if they were point lights, producing
	    hard shadow edges. This is the lowest quality setting.
	Antialiased Point:
	    Improve the shadow edges by softening jagged edges caused by light
	    map aliasing.
        Area:
	    Area lights use many shadow maps to produce a soft shadow effect. 
	    Environment lights perform more sampling. This has no effect on
	    other light types (point will be used in these cases). Moving an
	    area light with this option on will result in slower interactivity.
        Antialiased Area:
	    Soften the jagged edges of shadows, which improves the soft shadow
	    look.

    Shadow Map Size:
        Controls the resolution of the shadow maps. 
	Increasing the shadow map size will reduce the jaggedness of shadow
	edges and improve fine shadow detail. Larger maps may affect performance
	and will use more graphics memory.

    Ambient Occlusion:
        Enable screen-space ambient occlusion, which shadows objects based 
	on the amount of ambient light that could reach a surface. Areas in 
	corners and sunken areas will receive shadowing. The numeric value
	increases the quality and range of effect of the occlusion. Enabling
	this option will slow performance somewhat. 
	__High Quality Light Shading__ and __Material Shaders__ are required 
	for occlusion to work.

        NOTE:
	    The HIP file's 
	    [Unit Length parameter|/ref/windows/mainprefs#hipfile] 
	    affects how far away the shadowing effect extended. 

    Transparency:
        Draw objects with per-pixel alpha, texture maps with alpha or material 
	transparency using alpha blending (via an over operation). When off, 
	pixels with non-zero alpha are drawn and zero alpha pixels are 
	discarded. The quality of the transparency can also be selected, with 
	the higher quality options impacting performance.

	Low:
	    Transparent objects are only sorted by object order. Overlapping
	    surfaces within an object may be rendered incorrectly, unless
            objects are sorted manually in the scene hierarchy list or a
            [Sort SOP|Node:sop/sort] is used at the end of the object's
	    geometry chain.
	Medium:
	    Transparent objects are sorted per-pixel, producing a more 
	    realistic display of complex transparent objects.
	High:
	    Transparent objects are sorted per-pixel and are shadowed, if
	    shadows are enabled. More render passes are used to resolve
	    transparent layering issues, if they are needed.

        NOTE:
	    Medium and High transparency modes require __Material Shaders__.

=== Geometry ===

    Volume Quality:
        Very Low:
	    An axis-aligned volume is drawn, with volume slices parallel to one
	    of the volume box's faces. This is the fastest option but produces
	    a visual pop as the volume is rotated in the view. Overlapping 
	    volumes will produce visual artifacts.
        Low:
	    A view-aligned volume is drawn, with volume slices drawn parallel
	    to the viewport. This produces a higher quality visualization of
	    the volume. Overlapping volumes will render correctly. The slices
	    are widely spaced apart. This is the fastest of the view-aligned
	    options, and is useful for working interactively with dozens of
	    volumes.
	Normal:
	    A view-aligned volume is drawn, with volume slices packed more 
	    densely together. More slices are drawn so the overall render is
	    slower than 'Low'. This option strikes a good balance between 
	    quality and performance.
	High:
	    A view-aligned volume is drawn with slices drawn very densely.
	    This is the slowest but best quality rendering of volumes.

        TIP:
	    Enabling __HDR Rendering__ will remove any banding artifacts from
	    volumes.

    Geometry LOD (Level of Detail):
        Increases or decreases the display resolution of 
	[Metaballs|/nodes/sop/metaball], NURBS, and Bezier surfaces.

    Wire Width:
        The width, in pixels, of wireframe and wire-over-shaded lines.

    Wire Blend:
        The amount that wire-over-shaded lines are blended with the underlying
        shaded surface. Values near zero make these lines very faint, while
        a value of one draws the line without any blending (opaque). This does
        not affect pure wireframe, hidden line, or invisible line modes.
    
    Particle:
        The particle representation to use:

        Point:
           Draw particles as points, affected by the __Point Size__, in screen 
           pixels. They are not affected by perspective.
        Pixel:
           Each particle is a single pixel. This is useful for visualizing 
           dense flip simulations.
        Lines:
           Particles are drawn as streaks so it is possible to see their
           direction.
        Discs:
           Draw particles as discs, affected by the __Disc Size__, in world
           units. They are affected by perspective.
     Orient Discs to N:
         In particle disc mode, discs can be oriented to the direction of the 
         normal (`N`) attribute on the particle. They will face the direction of
         the normal. Otherwise the discs are drawn screen-aligned so that they
         face the camera.

     Use Sprites:
         Display sprites instead of the current __Particle__ representation if
         a sprite attribute is found, such as `spriteshop`, `spritescale`
         or `spriterot`. If disabled, these attributes are ignored and the
         __Particle__ representation is always used.
           
 
=== Scripts ===

Each script parameter refers to an hscript command or python script which 
will be run. Each script parameter has a enable toggle as well as a language
selection (hscript or python). 

The scripts are always run when rendering occurs. The command checks the 
parameters of the output driver when it is rendering a range or sending output
to a command.

Before the render occurs, Houdini will automatically set the current hscript 
directory to point to the output driver.    

Pre-Render Script:
    This command is run before any rendering is started. It is only run once 
    per render.
    
Pre-Frame Script:
    This command is run before each frame is rendered.
    
Post-Frame Script:
    This command is run after each frame is rendered.
    
Post-Render Script: 
    This command is run one time, after all rendering is complete.
    
@related

- [Elements of the scene| /basics/scene]
- [Advanced viewport shading|/basics/viewporteffects]
