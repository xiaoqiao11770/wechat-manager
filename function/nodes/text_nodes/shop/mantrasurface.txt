= Mantra Surface =

#type: node
#context: shop
#internal: mantrasurface

"""Flexible material including multiple reflection layers, subsurface scattering, refractions and displacement."""

This shader aims to provide all the parameters needed to achieve a wide variety of looks.

NOTE:
    This is a SHOP shader, which means it cannot be [layered|/shade/layering] with other shaders.

    If you need to do this, or if you need more control, you can use [Surface Model VOP|/nodes/vop/surfacemodel] which this shader is based on.

@parameters

== Surface ==

=== Diffuse ===

==== General ====

Enable Diffuse:
    Enable diffuse reflections.

Intensity:
    #contentfrom: /nodes/vop/surfacemodel#diff_int

Roughness:
    #contentfrom: /nodes/vop/surfacemodel#diff_rough

Minimum:
    #contentfrom: /nodes/vop/surfacemodel#diff_min

==== Color ====
Use Base Color:
    #id: useBaseColor

    Use the __base color__ below to color the surface. If __Use point colors__ and/or __Use color map__ are also on, the base color will be multiplied with them.

Base Color:
    #id: baseColor

    The base color to use for surface shading when __Use base color__ is on.

Use Point Color:
    #id: usePointColor

    Use values stored in the object geometry's `Cd` point attributes to color the surface. If __Use base color__ and/or __Use color map__ are also on, the point color will be multiplied with them.

Use Packed Color:
    #id: usePackedColor

    Use color attributes on packed primitives. This is multiplied against the existing diffuse color values.

Use Map:
    #id: useColorMap

    Use a texture map to color the surface. If __Use base color__ and/or __Use point colors__ are also on, the texture color will be multiplied with them.

Map:
    #id: baseColorMap

    The texture map to use for surface shading when __Use color map__ is on.

Tint Intensity:
    #id: colorMapIntensity

    The blending factor between the base color and the color map, from `0` (base color only) to `1` (fully blend the color map with the base color).

Wrap:
    #contentfrom: /nodes/vop/surfacecolor#mapwrap

Filter:
    #contentfrom: /nodes/vop/surfacecolor#mapfilter

Filter Width:
    #contentfrom: /nodes/vop/surfacecolor#mapfilterwidth

=== Reflect ===

==== Base / Coat (Same parameters) ====

===== General =====

[Include:/nodes/vop/surfacemodel#refl_enable]

[Include:/nodes/vop/surfacemodel#refl_lights]

[Include:/nodes/vop/surfacemodel#refl_objs]

Model:
    #contentfrom: /nodes/vop/pbrspecular#model

===== Intensity =====

Intensity:
    #contentfrom: /nodes/vop/surfacemodel#spec_int

    NOTE:
        If changing the specular color causes your diffuse color to change, it's probably because __Conserve energy is on__. In that case, making the specular color unrealistically bright will require the diffuse color to become darker so the combined energy stays the same.

Use Map:
    Use a texture map for __Intensity__.

Map:
    The map to use when Use Map is enabled.

Channel:
    The channel to use from the texture map.

Wrap:
    #contentfrom: /nodes/vop/surfacecolor#mapwrap

Filter:
    #contentfrom: /nodes/vop/surfacecolor#mapfilter

Filter Width:
    #contentfrom: /nodes/vop/surfacecolor#mapfilterwidth

Specular Minimum:
    #contentfrom: /nodes/vop/surfacemodel#spec_min

===== Color =====

Color:
    The color to tint reflections with.

Use Map:
    Use a texture map for the specular color.

Map:
    The texture map to use for the specular color when __Use specular map__ is on.

Tint Intensity:
    Controls how much of an effect the map has on the end result, from `0` (specular color only) to `1` (fully blend the specular map with the specular color).

Wrap:
    #contentfrom: /nodes/vop/surfacecolor#mapwrap

Filter:
    #contentfrom: /nodes/vop/surfacecolor#mapfilter

Filter Width:
    #contentfrom: /nodes/vop/surfacecolor#mapfilterwidth

===== Roughness =====

Amount:
    #contentfrom: /nodes/vop/surfacemodel#spec_rough

Use Map:
    Use a texture map to control specular roughness.

Map:
    The texture map used to control specular roughness.

Channel:
    Controls which channel to use from the texture map.

Wrap:
    #contentfrom: /nodes/vop/surfacecolor#mapwrap

Filter:
    #contentfrom: /nodes/vop/surfacecolor#mapfilter

Filter Width:
    #contentfrom: /nodes/vop/surfacecolor#mapfilterwidth

===== Anisotropy =====

Amount:
    #contentfrom: pbrspecular#aniso

Anisotropy Direction
    #contentfrom: pbrspecular#anisodir

[Include:/nodes/vop/surfacemodel#refl_sep]

===== Object Reflections =====

Intensity:
    #contentfrom: /nodes/vop/surfacemodel#refl_int

Color:
    #contentfrom: /nodes/vop/surfacemodel#refl_clr

Roughness:
    #contentfrom: /nodes/vop/surfacemodel#refl_rough]

=== Refract ===

==== General ====

[Include:/nodes/vop/surfacemodel#refr_enable]

[Include:/nodes/vop/surfacemodel#refr_lights]

[Include:/nodes/vop/surfacemodel#refr_objs]

[Include:/nodes/vop/surfacemodel#refr_model]

[Include:/nodes/vop/surfacemodel#refr_thin]

Intensity:
    #contentfrom: /nodes/vop/surfacemodel#refr_int

[Include:/nodes/vop/surfacemodel#refr_min]

==== Color ====

Color:
    #contentfrom: /nodes/vop/surfacemodel#refr_color

==== Roughness ====

Amount:
    #contentfrom: /nodes/vop/surfacemodel#refr_rough

==== Anisotropy ====

Amount:
    #contentfrom: /nodes/vop/surfacemodel#refr_aniso

==== Attenuation ====

Enable:
    #contentfrom: /nodes/vop/surfacemodel#atten_enable

Density:
    #contentfrom: /nodes/vop/surfacemodel#atten_den

Color:
    #contentfrom: /nodes/vop/surfacemodel#atten_clr

=== Subsurface ===

==== General ====

[Include:/nodes/vop/surfacemodel#sss_enable]

Amount:
    #contentfrom: /nodes/vop/surfacemodel#sss_int

[Include:/nodes/vop/surfacemodel#sss_min]

[Include:/nodes/vop/surfacemodel#sss_phase]

==== Single Scattering ====

[Include:/nodes/vop/surfacemodel#sss_1enable]

Intensity:
    #contentfrom: /nodes/vop/surfacemodel#sss_1intensity

Quality:
    #contentfrom: /nodes/vop/surfacemodel#sss_1quality

==== Multiple Scattering ====

[Include:/nodes/vop/surfacemodel#sss_2enable]

Model:
    #contentfrom: physicalsss#multimodel

[Include:/nodes/vop/surfacemodel#sss_pcmode]

Point Cloud File:
    #contentfrom: /nodes/vop/surfacemodel#sss_pcname

Intensity:
    #contentfrom: /nodes/vop/surfacemodel#sss_2intensity

Quality:
    #contentfrom: /nodes/vop/surfacemodel#sss_2quality

==== Subsurface Color ====

Color:
    #contentfrom: /nodes/vop/surfacemodel#sss_clr

Use Map:
    #id: useSSSMap

    Use a texture map to tint the rays entering the surface.

Map:
    #id: baseSSSMap

    The texture map to use when __Use subsurface map__ is on.

Tint Intensity:
    #id: colorMapIntensity1

    The blending factor between the original color of the rays and the subsurface map, from `0` (original color only) to `1` (fully blend the subsurface map with the ray color).

Wrap:
    #contentfrom: /nodes/vop/surfacecolor#mapwrap

Filter:
    #contentfrom: /nodes/vop/surfacecolor#mapfilter

Filter Width:
    #contentfrom: /nodes/vop/surfacecolor#mapfilterwidth

==== Attenuation ====

Density:
    #contentfrom: /nodes/vop/physicalsss#attendensity

Color:
    #id: baseSSSAttenColor
    #contentfrom: /nodes/vop/surfacecolor#sss_attenclr

Use Map:
    #id: useSSSAttenMap

    Use a texture map for the attenuation color.

Map:
    #id: sssAttenMap

    The texture map to use when __Use Map__ is on.

Tint Intensity:
    #id: attenMapIntensity

    The blending factor between the __Attenuation color__ and the __Attenuation map__, from `0` (attenuation color only) to `1` (fully blend the attenuation map with the attenuation color).

Wrap:
    #contentfrom: /nodes/vop/surfacecolor#mapwrap

Filter:
    #contentfrom: /nodes/vop/surfacecolor#mapfilter

Filter Width:
    #contentfrom: /nodes/vop/surfacecolor#mapfilterwidth

=== Emission ===

==== General ====

Enable Emission:
    #id: emit_enable

    Add a constant amount of diffuse light emitted from the surface. For example, with emission on, the object would be visible in the render even
    if none of the light objects were shining on it. This may be useful in
    some circumstances, but normally you should simply use an
    [Area Light|Node:obj/hlight] to add light to the scene more efficiently
    and controllably, especially if you need to add a lot of light.

Emission Illuminates Objects:
    #id: emit_illum

    The light emitted by this object will brighten the surfaces of other
    objects. When this option is off, the emitted light will be visible in
    the camera, but will not fall on other objects in the scene.

Intensity:
    #id: emit_int

    The amount of emission.

==== Color ====

Color:
    #id: emit_clr

    The color of the emitted light.

Use Map:
    Use a texture map for the emission color.

Map:
    The texture map to use when __Use Map__ is on.

Tint Intensity:
    The amount of influence the map has on the final color.

=== Opacity ===

==== General ====

_Opacity_ controls how transparent the object is _in the scene_ (that is, how visible are things behind the object in the scene). _Alpha_ controls the _alpha channel_ of the rendered image (that is, how transparent are the _pixels in the rendered image_ corresponding to the shaded surface).

[Include:/nodes/vop/surfacemodel#opac_int]

==== Color ====

Color:
    #id: baseOpacityColor

    The opacity of the red, green, and blue channels of the shaded surface color.

Use Map:
    #id: useOpacityMap

    Use a texture map to control the opacity of the shaded surface color.

Map:
    #id: opacityMap

    The texture to use for surface color opacity when __Use Map__ is on.

Tint Intensity:
    #id: opacityMapIntensity

    The blending factor between the __Opacity color__ and the __Opacity map__, from `0` (opacity color only) to `1` (fully blend the opacity map with the opacity color).

Wrap:
    #contentfrom: /nodes/vop/surfacecolor#mapwrap

Filter:
    #contentfrom: /nodes/vop/surfacecolor#mapfilter

Filter Width:
    #contentfrom: /nodes/vop/surfacecolor#mapfilterwidth

==== Opacity Falloff ====

[Include:/nodes/vop/surfacemodel#opac_falloff]

[Include:/nodes/vop/surfacemodel#opac_para]

[Include:/nodes/vop/surfacemodel#opac_perp]

[Include:/nodes/vop/surfacemodel#opac_rolloff]

==== Faux Caustics ====

Enable Faux Caustics:
    #contentfrom: /nodes/vop/surfacemodel#fake_enable

[Include:/nodes/vop/surfacemodel#fake_min]

[Include:/nodes/vop/surfacemodel#fake_max]

=== Settings ===

==== General ====

[Include:/nodes/vop/surfacemodel#facefwd]

[Include:/nodes/vop/surfacemodel#conserveenergy]

[Include:/nodes/vop/surfacemodel#ior_in]

[Include:/nodes/vop/surfacemodel#ior_out]

[Include:/nodes/vop/surfacemodel#fres_enable]

==== Normal Map Export ====

Source:
    #id: source
    #contentfrom: /nodes/vop/tangentnormals#source

Space:
    #id: space
    #contentfrom: /nodes/vop/tangentnormals#space

Range:
    #id: range
    #contentfrom: /nodes/vop/tangentnormals#range

== Displacement ==

=== General ===

Map-Based Displacement:
    #id: enableDispMap

    Use a texture map to displace the surface of the object at render time.

Noise-Based Displacement:
    Use a noise function to displace the surface of the object at render time.
    
The controls on this tab let you apply a displacement map and/or a bump map to the shaded surface.

TIP:
    You do not need to set up your own "displacement bounds" render properties when doing displacement. This material automatically sets the displacement bounds.

Displacement Scale:
    #id: dispScale

    The scaling factor for values in the displacement textures. This depends on the scale of the scene, but will usually be very small. For example, if the scaling factor was `1.0`, a value of `1` in the map would cause a displacement of 1 Houdini length unit.

Displacement Bound:
    #id: vm_displacebound
    The maximum bounds that the displacement shader will move geometry. This is defined in "camera" space. The absolute value is used to determine the bounds.

True Displacements:
    #id: vm_truedisplace

    Whether to do "real" displacement (actually modify geometry at render time, allowing the silhouette of the object to change). If you turn this option off, the values of the displacement tab will be used as a bump map (creating the appearance of depth but not actually modifying the geometry or changing the object's silhouette).

=== Map ===

Displacement Map:
    #id: displacementMap

    The texture to use for displacing the surface.

Channel:
    #id: switchDispChannel

    The channel of the texture image to use as the displacement value.

    If set to XYZ Displace, the RGB channels will be treated as absolute
    displacements in object space.  This is useful for displacing the
    maps created by the [Ocean Evaluate SOP|Node:sop/oceanevaluate].  Usually a scaling factor
    of 1 should be used in this case and the displacement bound set
    to the maximum wave height.


Wrap:
    #id: dispMapWrap
    #contentfrom: /nodes/vop/surfacecolor#mapwrap

Filter:
    #id: dispMapFilter
    #contentfrom: /nodes/vop/surfacecolor#mapfilter

Filter Width:
    #id: dispMapWidth
    #contentfrom: /nodes/vop/surfacecolor#mapfilterwidth

=== Noise ===

Noise Type:
    #id: noiseType

    Different types of noise have different characteristics. Perlin is the standard noise. Original Perlin is similar to Perlin noise, but marginally slower to compute and with different characteristics. Sparse convolution is slower to computer and looks more random. Alligator noise is slower to computer and a very different, more cellular look from the other noise types.

Frequency:
    #id: noiseFreq

    The scale of the noise pattern.  Larger values give smaller, but not more
    detailed patterns.

Offset:
    #id: noiseOffset

    Positions the noise in X, Y, and Z.

Amplitude:
    #id: noiseAmp

    Scales the output of the noise function.

Roughness:
    #id: noiseRough

    Sharpens or softens the edges of the noise.  Lower values are
    softer, higher values sharper.

Attenuation:
    #id: noiseAtten

    Shifts the median value of the noise.  Values greater than 1 dampen the noise down, while values less than 1 sharpen the contrast between noise values.

Turbulence:
    #id: noiseTurb

    Controls the amount of detail in the noise. This is the number of times the noise function is called and summed. If the Frequency is high, there is no need for much detail, 1 or 2 should be plenty. This can affect the __Amplitude__ of the noise as well since the summing will result in
    higher base values.

== Bump & Normal ==

Map Type:
    #id: mapType

    A _normal map_ directly sets the surface normals. A _bump map_ modifies the displaced normals. Set to "None" to not modify the normals.

=== Bump ===

Use Map:
    Use a texture map for bump mapping.

Bump Scale:
    #id: bumpScale

    A scaling factor for the values in the bump texture.

Map:
    #id: bumpMap

    The texture to use for the bump map, when __Map type__ is "Bump".

Wrap:
    #id: bumpMapWrap
    #contentfrom: /nodes/vop/surfacecolor#mapwrap

Filter:
    #id: bumpMapFilter
    #contentfrom: /nodes/vop/surfacecolor#mapfilter

Filter Width:
    #id: bumpMapWidth
    #contentfrom: /nodes/vop/surfacecolor#mapfilterwidth

=== Normal ===

Use Map:
    Use a texture map for normal mapping.

Map:
    The texture map to use for normal mapping.

Wrap:
    #id: normalMapWrap
    #contentfrom: /nodes/vop/surfacecolor#mapwrap

Filter:
    #id: normalMapFilter
    #contentfrom: /nodes/vop/surfacecolor#mapfilter

Filter Width:
    #id: normalMapWidth
    #contentfrom: /nodes/vop/surfacecolor#mapfilterwidth

@related

- [Node:shop/principledshader]
- [Node:shop/pyro]
- [Surface Model VOP|Node:vop/surfacemodel]
