= VOP RSL Surface =

#type: node
#context: shop
#internal: vopsurface
#icon: SHOP/vopsurface

"""A shader node containing a RenderMan surface shader VOP network."""

This SHOP (shader) node type contains a [VOP network|/nodes/vop] in which you
can define a RenderMan surface shader using VOP nodes.

@parameters

== OGL ==

The parameters on this tab define how surfaces with this shader look in the
viewport.

== Compiler ==

Compiler:
    This text box contains the `hrmanshader` command line used to compile the
    VOP network into RSL object code. It allows advanced users to specify their
    own command line options or call a wrapper script instead.
    
@related

- [VOP VEX Surface SHOP|Node:shop/vopsurface]

== Creating RSL Surface VOPs ==

- The outer block is included once before the function. This is where you insert includes etc. The inner block is instantiated once per VOP. This is where you put your code for the VOP.

- There are a couple of ways to specify where the sl gets compiled. You can either modify the compiler line in the VOP network, or insert a `hrmanshader` script in the PATH somewhere which gets picked up before the `$HFS/bin` version.

- The output is supposed to be dependent on the inputs. If any inputs to the VOP are varying, then the output will also be varying.

- The parameter definition for `$func` uses the "unquoted" keyword.

- There is an alternate way to design VOPs using vanilla text files, which is how many factory VOPs are defined. If you use `hotl` and extract the import VOP, you should see the dialog script file has that token for the func parameter. You should be able to pull apart a VOP you've created and manually edit the dialog script, then put it together.



