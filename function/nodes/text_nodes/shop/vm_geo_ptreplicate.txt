#type: node
#context: shop
#internal: vm_geo_ptreplicate
#icon: SHOP/vm_geo_ptreplicate

= Point Replicate =
"""The Point Replicate Procedural takes a number of input points and multiplies 
them, and processes the result using a CVEX script."""

It is useful for when generating the required number of points, for a given 
scenario, is infeasible with SOPs. These scenarios include things such as 
ocean spray, dust clouds, or any other particulate material. 

@parameters

== Main ==

Point Object:
    The object to copy the source points from.

Attributes To Copy:
    A glob to indicate which point and detail attributes should be copied onto
    the target points.

Point Multiplier:
    How many points to create from each individual input point. This can be
    overridden on a per-point basis, by adding a 'multiplier' integer point 
    attribute to the source point object.
    
Motion Blur:
    Specifies how the motion blur will be computed on the points.
    
    No Motion Blur:
        Do not perform motion blur.
    
    Compute sub-frame geometry (deformation):
        Compute the point's position by evaluating the geometry at sub-frame 
        intervals. This can be problematic if the point count is changing frame
        to frame.
    
    Use point velocity attribute:
        The point's vector attribute `v` is used to extrapolate the motion of 
        the point.

CVEX Operator:
    A path to a CVEX SHOP node. The point replicator will run this CVEX
    shader on each of the multiplied points. This script can be used to
    adjust the attributes on the points, as well as their position in space.
    
    The point instancing CVEX shader can use the following globals:
	
    Name ||
        VEX Type ||
            Description ||
    `P` |
    	vector3 |
    	    The position of the multiplied point. This value can also be
    	    written to, to translate the multiplied point.
    `id` |
        integer |
            ID of the source point of the multiplied point being processed. 
            If the 'id' attribute already on the source object, it will be used. 
            Otherwise the points be numbered in sequence.
    `pid` |
        integer |
            The sub-index of each of the multiplied points. If a point on the
            source geometry is multiplied ten times, those multiplied points
            will have a `pid` value from 0 to 9. This value should be combined
            with `id` to create a unique identifier, for random generation,
            for each of the multiplied points. 

    You can use additional attributes of the points being instanced on. The
    available attributes are controlled by the __Attributes To Copy__ 
    parameter.

== IFD Bounds ==

Bounding Box:
    The bounding box controls let you specify a bounding box for the referenced 
    geometry. Only when this bounding box is "on screen" will mantra load the 
    referenced geometry. You can set __Bounding Box__ to 
    __No bounding box required__, in which case mantra will always load the 
    references geometry regardless. You can also specify the bounding box by 
    referencing the SOP's bounding box in the __SOP Bounds__ parameter.

SOP Bounds:
    The geometry whose bounding box you want to reference.

Min Bounds:
    The minimum bounding box dimensions, when setting explicit bounds.

Max Bounds:
    The maximum bounding box dimensions, when setting explicit bounds. 
