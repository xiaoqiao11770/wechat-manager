= Alembic Geometry SHOP =

#type: node
#context: shop
#internal: vm_geo_alembic
#icon: SHOP/vm_geo_alembic

"""Renders Alembic primitives directly in mantra."""

This geometry procedural will render Alembic primitives directly in
mantra.

@parameters

== Main ==

Use Object Geometry:
    #id: useobjectgeometry
    Render Alembic primitives in the geometry for the object that has this procedural assigned.

Alembic File:
    #id: filename
    If not rendering object geometry, this parameter specifies the Alembic file to render.

Frame:
    #id: frame
    The frame to render.

FPS:
    #id: fps
    The frames per second for the animation in the __Alembic File__.

Object Path:
    #id: objectpath
    To render a individual shape nodes, you can enter their paths in this parameter.  This is similar to the __Object Path__ parameter in the [Alembic SOP|Node:sop/alembic].

Object Pattern:
    #id: objectpattern
    To render a individual shape nodes, you can enter a pattern this parameter.  This is similar to the __Object Pattern__ parameter in the [Alembic SOP|Node:sop/alembic].

Render Non-Alembic Primitives:
    #id: nonalembic
    Normally, both Houdini and Alembic primitives will be rendered. However, if the geometry contains a mix of Houdini and Alembic primitives, this option can be used to disable rendering of Houdini primitives.

User Properties:
    #id: userpropertymap
    The Alembic procedural can map user properties stored on Alembic shape nodes to mantra properties.  This parameter allows you to specify that mapping.  The parameter can either be a map as specified in the JSON format, or a simpler string representation.

    Given the JSON string `{ "subd" : "rendersubd", "dbound" : "displacebound", "reflectlimit" : "reflectlimit" }`, the procedural will look for Alembic user properties named "subd", "dbound" and "reflectlimit".  If these properties are found on the shape node, their values will be used to set the mantra "rendersubd", "displacebound" and "reflectlimit" settings.  If there are no user properties found, the object settings will be used.

    The algorithm for simple string parsing is to split the string using either commas or spaces as separators.  If a token contains a colon (':'), this will define a mapping from the user property name to the mantra property name.  Otherwise the token is used to represent both the Alembic user property and the mantra property.  Note that there shouldn't be any spaces around the colon.

    The equivalent simple string format for the above example, would be `subd:rendersubd dbound:displacebound reflectlimit`.

Attribute File:
    #id: attribfile
    This parameter allows you to specify a secondary Alembic file.  This secondary file can be used to provide or override attribute data from the render geometry.  For example, a second Alembic file can be used to specify "uv" coordinates or point colors.

    For this to work properly, the topology of the Alembic files must match.

    Note that all attributes are extracted at time 0 and do not provide any motion blur information.

Point Attributes:
    #id: pointattribs
    Provide a pattern of attributes to pull in from the secondary Alembic file.  This pattern will be used for varying (or vertex) attributes depending on the primitive type.

Vertex Attributes:
    #id: vertexattribs
    Provide a pattern of attributes to pull in from the secondary Alembic file.  This pattern will be used for facevarying (or vertex) attributes depending on the primitive type.

Primitive Attributes:
    #id: uniformattribs
    Provide a pattern of attributes to pull in from the secondary Alembic file.  This pattern will be used for uniform (or constant) attributes depending on the primitive type.

Detail Attributes:
    #id: detailattribs
    Provide a pattern of attributes to pull in from the secondary Alembic file.  This pattern will be used for constant (or uniform) attributes depending on the primitive type.


== IFD Bounds ==

Bounding Box:    
    The bounding box controls let you specify a bounding box for the referenced geometry. Only when this bounding box is "on screen" will mantra load the referenced geometry. You can set __Bounding box__ to __No bounding box required__, in which case mantra will always load the references geometry regardless. You can also specify the bounding box by referencing the SOP's bounding box in the __SOP Bounds__ parameter.
       
SOP Bounds:
    The geometry whose bounding box you want to reference.

Min Bounds:
    The minimum bounding box dimensions, when setting explicit bounds.

Max Bounds:
    The maximum bounding box dimensions, when setting explicit bounds.
