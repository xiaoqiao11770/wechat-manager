= Fluid Source =

#type: node
#context: sop
#internal: fluidsource
#icon: SHELF/fluid_source
#tags: fluid, dynamics, source

""" Creates one or multiple volumes out of geometry to be used in a fluid simulation """

Fluid Source creates one or multiple scalar or vector volumes from either points, primitives, or a volume.
These volumes can be directly used in a fluid simulation and are imported using the [Source Volume DOP|Node:dop/sourcevolume].
Any combination of volumes can be created. A set of default combinations is presented as presets. These presets correlate with the [Source Volume DOP|Node:dop/sourcevolume].

NOTE:
	The operations this node provides can easily be recreated using Houdini's SOP volume operators. Consider this node to be an example of how to achieve or approach certain volume shaping operations.

NOTE:
	Where applicable this operator will try to sample the geometry into an SDF before creating the desired volume. If no SDF can be generated (in the case with sampled point attributes) a different method using a similar interface is provided.

@parameters

Initialize:
    Configures the __Fluid Source__ according to the selected preset. 
    Helps clarify and visualize how to create a specific set of volumes to be used in a simulation.

Method:

	Method used for sampling the incoming geometry which is based on the sampling method, provided a certain set of parameters will be available.
	
	TIP:
		Sampling points is great for creating complex volumes, otherwise hard to accomplish using the default SDF sampling operations.
	
	Build SDF From Geometry:
		Uses the incoming primitives to build an SDF using either __Laser Scan__ or __Minimum Distance__. This SDF is further modified to create the final source. You can use this method for surfaced geometry.
	Stamp Points:
		Uses the incoming points to generate either a volume from sampled point attributes or an interpreted SDF. You can use this method to create a source out of points.
	Sample Volumes:
		Uses an incoming SDF volume to create a source.
	Auto:
		Lets the operator decide what __Method__ to use based on the incoming geometry.

Type:
	Output either a scalar volume with the __Name__ specified as `Name` or a vector volume with the name specified as `Name.x`, `Name.y,` `Name.z`.

Source Attribute:
	Only available when __Method__ is set to __Stamp Points__. This parameter specifies the point attribute used for creating the volume. For example, `density`.
	If the attribute can't be found, no data is sampled. Use __Generate SDF From Points__ to sample all points using an SDF approximation.
	
	TIP:
		Instead of using a point attribute, consider building your volume using __Generate SDF From Points__. This only works on all points provided.
		This will usually result in a more smooth and desirable results. The interpolation used for sampling the points into an sdf is much more accurate then the averaging of point attributes.

Number of Volumes:
	The number of volumes to output. All are similar to the first one in terms of shape, but can have a different name assigned.

Name:
	The name of the volume.

Scale:
	Per-output scaling of the values.

== Volumes ==

=== Global ===

Auto Bounds:
	Automatically scales the volume bounds based on the __Edge Location__, __Feather Length__ and __Sample Distance__ provided.

Output SDF:
	Set's the output volume to be an SDF.

Invert:
	Inverts the output volume.

=== Settings ===

Division Size:	  	
	Controls the sample resolution of the volume and specifies the voxel size in world units. Lower values will increase the resolution. Higher resolutions allow for finer detail in the appearance of the object. However, doubling the divisions requires eight times the memory. 

Padding:
	Extra padding added to volume bounds. Measured in world units.

Border Value:
	Sets the container's border value. Some fluid operations (such as collisions) expect negative border conditions to work properly. This value enforces a certain bound value.

=== SDF From Geometry ===

Enabled when __Method__ is set to __Build SDF From Geometry__. These options control how to build the source volume from an SDF generated out of incoming primitives.

Minimum Distance:
    The exact minimum point to surface will be found and used to build the initial SDF.
    The resulting field is not signed and is used to generate a shell around the geometry.
    
    Use __Minimum Distance__ for flat or planar geometry.
    
    __Minimum Distance__ controls to a great extend what edge sampling options are available. Since the SDF isn't signed both, the interior and exterior of the object are treated similar.
    
Scale By Source Attribute:
    Scales the result by the sampled point __Source Attribute__.
    
Empty Interior:
    Only available when __Minimum Distance__ is turned off.
    In that case, Ray Intersect is used to build the SDF and more information is available to distinguish the interior from the exterior of the object.

Edge Location:
    The volume offset measured in world units relative to the sampled edge of the object. With __Minimum Distance__ this is similar to __Edge Thickness__
    because the SDF only holds positive values. In that case, the value can only be increased. Without __Minimum Distance__, an exact new edge position can be calculated, enabling the object to grow or shrink.
    
Out Feather Length:
    The amount of outwards feather to apply, measured in world units relative to the __Edge Location__. This softens the volume edge outwards. Using __Minimum Distance__, this value sets both the inward and outward feather.

Edge Thickness:
    The thickness of the edge in world units. This is only available with __Minimum Distance__ turned off.
    
In Feather Length:
    The amount of inwards feather to apply measured in world units relative to the __Edge Location__. It softens the volume edge inwards and is only available with __Minimum Distance__ turned off. 

Remap Feather Out:
    Enables the __Feather Out Ramp__.
    
Remap Feather In:
    Enables the __Feather In Ramp__. This is only available with __Minimum Distance__ turned off.
    
Feather Out Ramp:
    Remaps the outward feather volume values.
    
Feather In Ramp:
    Remaps the inward feather volume values. This is only available with __Minimum Distance__ turned off.

=== Stamp Points ===

Enabled when __Method__ is set to __Stamp Points__. These options control how to build a source volume from point geometry using either an SDF approximation or sampled point attributes.

Generate SDF From Points:
    Creates a volume with the help of an SDF approximation, sampling all the available points. Using this option does not require a __Source Attribute__. If disabled, the attribute sampling method will be used.

Scale By Source Attribute:
    This is only available when __Generate SDF From Points__ is enabled. It scales the result by the sampled point __Source Attribute__.

Point Sample Threshold:
    Number of points to sample information from. The more points used, the smoother the result. The total weight contributed by points to the cell are normalized if it is greater than the threshold. If the weight is less than the threshold, the particle attribute values will not be normalized and hence drop to zero. This means that for every voxel, enough points need to be available to sample from based on the __Sample Distance__ provided.

Point Sample Distance:
    The maximum distance to extrapolate point information from. Higher values result in a bigger volume.

Feather:
    Only available when __Generate SDF From Points__ is turned on. Controls the volume feather based on the volume position defined by __Sample Distance__.

Edge Location:
    Defines the edge of the volume relative to the __Sample Distance__ provided. A smaller value usually results in a smoother volume.

== Noise ==

Two types of noise are available:

* Turbulence
* Cellular

Both can be mixed to create a noise pattern layered on top of the volume.

TIP:
    Use cellular noise together with turbulence to create broken edges in the source,  which is useful for fire simulations.

TIP:
    Try out the various noise operations on a grid. Use __Minimum Distance__ and a slight edge offset to create a simple volume and start experimenting with the layered noise types.
    
=== General Settings ===

Use Noise:
    Enables the use of noise.

Turbulence Influence:
    The amount of influence turbulence noise has on the previously created volume.

Cell Influence:
    How much influence the cellular pattern has on the previously created volume.

Pulse Length:
    How fast the noise moves. Higher values result in slower movement.
    
=== Turbulence Settings ===

Mode:
    Controls how to blend the generated noise on to the volume. Additive adds, and Multiplicative multiplies. In most cases, additive returns a more dynamic source showing larger internal differences. The final result is always pre-multiplied.

Sharpness:
    Controls the contrast of the turbulence pattern generated. If __Adaptive Cells__ are enabled, this value controls to great extend how the cellular pattern looks. Higher values result in more warped cells.

Amplitude:
    Magnitude of turbulence applied.

Grain:
    The amount of influence added bands of __Turbulence__ have, relative to the initial __Elements Size__.

Turbulence:
   Levels of turbulence to apply relative to the the initial __Element Size__. For smoother transitions, use lower values.

Offset:
   Offsets turbulence pattern.

Element Size:
    Initialized (base) element size, measured in world units. The value is derived from frequency (`1/FQ`).
    
=== Cell Settings ===

Mode:
    Controls how to blend the generated noise on to the volume. Additive adds, and Multiplicative multiplies. In most cases, additive returns a more dynamic source showing larger internal differences. The final result is always pre-multiplied.
    
Invert Cells:
    Inverts the cellular pattern.

Adaptive Cells:
    Changes the __Cell Size__ based on the generated turbulence pattern. Lower turbulence values result in smaller cells, creating a more organic pattern. This enforces a relationship between the two noise types.

Split Distance:
    Specifies the border width of the cells.

Offset:
    Offsets the cellular pattern.

Harshness:
    Controls the contour of the cells. Lower values result in a sharper cell representation.

Cell Size:
    The global cell size measured in world units.

Minimum Distance:
    Only available when __Adaptive Cells__ is turned on. Controls the minimum cell size. If the pattern becomes too noisy, increase this value.

Maximum Distance:
   Only available when __Adaptive Cells__ is turned on. Controls the maximum cell size. The closer this value is to the __Minimum Distance__, the more uniformly shaped the cells will become.

== Motion Blur ==

Blurs the volume based on the amount of __Geometry Samples__ provided. The resulting volumes are averaged.

Frames to Blur:
    The amount of frames to blur.

Geometry Samples:
    The amount of samples used over the amount of frames to blur.

Blur Offset:
    Shifts the blur. 0 is center sampled, -1 trails are sampled, and 1 leads are sampled. This value is relative to the amount of __Frames to Blur__.

== Particles ==

Create Particles:
    Create particles inside the specified SDF.

Particle Source:
    The name of the scalar SDF volume inside of which to create particles.

Construction Method:
    The method used for generating points.

    Dense Grid:
        Creates points inside the entire bounding box of the input, then
        removes those outside the volume.  This method is efficient for
        inputs that are close to axis-aligned boxes, but can be slow and
        memory inefficient for more sparse configurations. This method also
        provides backwards compatibility for files created prior to Houdini 14.5.
    Sparse Volume:
        Creates points only in the active voxels of the input volume if they also lie
        inside the bounding volume.  This method can handle very sparse configurations
        where the input objects are distributed across space and do not fit well into
        an axis-aligned bounding box.

Particle Separation:
    The distance between generated particles.

Jitter Seed:
    Random seed for creating jitter.

Jitter Scale:
    The amount of jitter to apply to the positional values of the particles.

Scatter Density:
    Scatter points on the zero isosurface of the scalar SDF volume. For a value of 1 the scattered points will be approximately separated by __Particle Separation__. Increasing this value will oversample the surface.

Oversampling:
    The amount to oversample the points within a distance from the zero isosurface
    of the scalar SDF volume, as specified by the __Oversampling Bandwidth__.

Oversampling Bandwidth:
    The points will be oversampled to this distance from the zero isosurface of the scalar SDF
    volume.  This parameter is specified in multiples of the __Particle Separation__.

Viscosity:
	Creates a `viscosity` attribute and sets it to the given value.  If the
	fluid solver has both __Viscosity__ and __Use Particle Viscosity__
	enabled, this will be multiplied with the fluid's base viscosity. 

Density:
	Creates a `density` attribute and sets it to the given value.  If the
	fluid solver has __Density From Attribute__ set, this will be scaled
	against the fluid's base density to determine the effective
	per-particle mass.  This attribute is scale independent, so it shouldn't
	vary with the particle separation.

Add Rest Attribute:
    Creates a `rest` attribute set to the particle's current position
    offset by the vector specified in __Rest Offset__.

Dual Rest Attributes:
    Creates a `rest2` attribute in addition to the `rest` attribute, usually
    used in conjunction with the fluid solver's support for __Dual Rest Attributes__.

Rest Offset:
    Offset the current position by this vector before storing in the rest attributes.

== Partitioning ==

Uses a point or primitive attribute to create multiple volumes out of a single piece of geometry.

TIP:
    Use the [Cluster Points|Node:sop/cluster] operator to separate geometry in to similar sized groups of points and use the `cluster` attribute as the __Partition Attribute__.
    
TIP:
    When a [Smoke Object|Node:dop/smokeobject] has __Instancing__ turned on, the [Source Volume DOP|Node:dop/sourcevolume] responsible for loading the volumes will automatically look for the partition values assigned.
    
Partition Attribute:
    Attribute used to separate the incoming geometry. All independent groups will be sampled into a separate volume. The volume name is a combination of the __Name__ and partition number. For example, `density_1`, is sampled from the geometry specified by partition 1.
    
== SDF Sampling ==

SDF sampling options are only used if the incoming geometry is of a type primitive. See the [Iso Offset|Node:sop/isooffset] help for more information.
	
@inputs
    Points, Primitives or a Volume:
    	Geometry to sample into one or multiple volumes.
