= Poly Expand 2D =

#type: node
#context: sop
#internal: polyexpand2d
#icon: SOP/polyexpand2d
#tags: polygons, surface, model

"""Creates offset polygonal geometry for planar polygonal graphs."""

== Overview ==

:fig:[Image:/images/model/polyexpand2d_basic.png]
    This node builds offset geometry at a specified distance from a planar graph of connected polylines. It can generate polyline outlines, or polygonal surfaces.

:fig:[Image:/images/model/polyexpand2d.png]
    This is useful for generating road geometry from connected polylines.

Currently the node does not handle polylines that simply overlap in space --- the polylines must be connected with fused points. You will need to use tools such as [Curvesect|Node:sop/curvesect] and [Fuse|Node:sop/fuse] to set up the input geometry.

If the node errors with *Failed to process triangulation*, the common causes are overlapping curves, duplicate points, or a graph with a degenerate convex hull.

== TIPS ==

- The computation of the skeleton is sensitive to size.  If you are getting artifacts, try changing the __Coincidence Tolerance__ or scaling your geometry.  As a rough guide, you might need to increase the __Coincidence Tolerance__ if the problem appears to be missed intersections, and decrease it if the problem appears to be missing primitives.

- The optional __Edge Distance Attribute__ created while generating __Offset Surfaces__ can be used to "raise the roof".  Translating the output by this amount in the direction of the plane's normal will result in roof-like geometry.

@parameters

Group:
    #id: group

    The primitives whose edges form the input planar graph. Leave this empty to use all input geometry.

2D Positions: 
    #id: planepossrc
    
    How the node converts the 3D point positions in the geometry to 2D.

    Fit Plane:
        Project the points onto an imaginary plane that best fits their 3D positions.

    Select Projection Plane:
        Manually specify the plane to project onto.

Plane Origin:
    #id: planeorigin

    When __2D Positions__ is "Select Projection Plane", the origin of the plane to project the points onto.

Plane Distance:
    #id: planedist

    When __2D Positions__ is "Select Projection Plane", the distance along the __Plane Normal__ direction between the projection plane
    and the __Plane Origin__.

Plane Normal:
    #id: planenormal

    When __2D Positions__ is "Select Projection Plane", a vector controlling the orientation of the projection plane.

Output:
    #id: output

    The type of offset geometry to generate.
    
    Offset curves:
        Generate polygonal curve outlines.
    
    Offset surfaces:
        Generate polygonal surfaces.

Offset: 
    #id: offset

    How far to offset the edges of the new geometry from the original curves.

Divisions: 
    #id: divs

    Number of offsets to perform. Numbers greater than `1` divide the offset distance into multiple evenly spaced outlines.
    
    [Image:/images/model/polyexpand2d_divisions.png]

Output Inside:
    #id: outputinside

    Generate the inner offset geometry (on the inside of closed loops).

Output Outside:
    #id: outputoutside

    Generate the outer offset geometry.

Keep Input Geometry:
    #id: keepinput

    Include the original curves in the output. The default is off.

Create Output Groups:
    #id: newg

    Create groups for inside and outside geometry

Inside Group:
    #id: insidegroup

    Put the generated inner geometry (on the inside of closed loops) in this group.

Outside Group:
    #id: outsidegroup

    Put the generated outer geometry in this group.

Edge Distance Attribute:
    #id: edgedistattrib
    
    When __Output__ is "Offset Surfaces", create this vertex attribute with the distance of each vertex from the original polyline that generated it.

Coincidence Tolerance:
    #id: coincidencetol

    Treat points within this distance in the 2D projection as coincident.

Parallelism Tolerance:
    #id: parallelismtol

    Treat lines within this angle of each other (in radians) as parallel.

Skeleton Failure:
    #id: skeletonfailure
    This control provides workflow options, by changing how this node behaves
    when the computation of the straight skeleton fails.

    Fail with Error:
        Report the failure as an error.  This is the least forgiving option.

    Warn and Output Empty Geometry:
        Report the failure as a warning and output empty geometry.

Cache Straight Skeleton:
    #id: cacheskeleton

    Cache the computed 2D graph to improve performance.

Recompute Point Normals:
    #id: updatenmls

    Recompute point normals (if they exist).

@related

- [Node:sop/polyextrude]
