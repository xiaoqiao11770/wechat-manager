#type: node
#context: sop
#internal: sphere
#icon: SOP/sphere

#tags: create, model, core

= Sphere =

"""Creates a sphere or ovoid surface."""

This node generates spherical objects of different geometry types. It is
capable of creating non-uniform scalable spheres of all geometry types.

If an input is provided, the sphere's radius is automatically determined
as a function of the input's bounding geometry.

This Operation is used to create spheres and ellipsoids. Clicking and
dragging the mouse on the Construction Plane generates a sphere whose
radii are specified by your drag.

[Include:/shelf/sphere#includeme]

@parameters
    Primitive Type:
        Type of geometry to create.
        
    Connectivity:
        Rows:
            Creates horizontal lines, which are open polygons.
        Column:
            Creates vertical lines, which are open polygons.
        Rows & Cols:
            Both Rows and Columns. All polygons are open.
        Triangles:
            Builds the grid with triangles.
        Quads:
            Creates four-sided quadrilaterals.
        Alternating Triangles:
            Creates the grid using alternating triangles.
    Radius:
        #channels: /radx /rady /radz

        This is the X radius of an ellipsoid that is placed if you click
        on the Construction Plane without dragging. If you click and
        drag, the size of the sphere is over-ridden by the amount of
        drag. Entering non-equal values in the xyz fields results in
        ellipsoidal shapes.

        The X radius is defined by the distance dragged from the center,
        while the Y and Z radii vary proportionally with the X / Y and X
        / Z ratios in the parameter dialog.
        
    Center:
        #channels: /tx /ty /tz

        Determines the location of the center of the ellipsoid. This
        value is updated whenever you click (and drag) to create an
        ellipsoid. A new ellipsoid center will be positioned here if you
        hit ((Enter)).
        
    Uniform Scale:
        #channels: /scale
        Uniform scaling.

    Orientation:
        Poles of sphere align with orientation axis.
        
    Frequency:
        #channels: /freq

        Increases or decreases the number of polygons which make up a
        polygonal sphere. The higher the frequency, the smoother the
        sphere. It is disabled if building a sphere of a type other than
        polygonal.
        
    Rows:
        #channels: /rows

        The number of rows of a mesh or imperfect NURBS /
        Bezier sphere. The more rows and columns, the rounder the
        sphere. A NURBS or Bezier sphere should have at least order-1
        rows and columns. Rows are associated with the V directions and
        columns with the U parametric direction.
        
    Columns:
        #channels: /cols

        Number of columns in the sphere.
        
    U Order:
        #channels: /orderu

        Sets the U spline order of the NURBS or Bezier surface
        when building a sphere of one of these two types. The lowest
        order is 2 (linear); the highest is 11. Cubic spheres are built
        by default.
        
    V Order:
        #channels: /orderv

        Order of NURBS/Bezier curve in V direction.
        
    Imperfect:
        Specifies whether the NURBS / Bezier sphere should be built
        using rational or non-rational splines. A perfect sphere has a
        rational topology, one that associates non-unit weights with
        certain vertices. Furthermore, a perfect sphere has a predefined
        number and positions of CVs for any given spline order. An
        imperfect sphere is non-rational and its number of CVs isn't
        that strictly determined by its order.

        Rational spheres built this way yield a mathematically perfect
        shape; however, given their special definition, perfect spheres
        are not always the ideal choice for further modeling of their
        points. Besides, they represent heavier geometry and may put
        more pressure both on the cpu and ram. In practice, you will
        find imperfect spheres to be a better modeling choice, so it is
        advisable to build perfect spheres only when perfect shapes are
        paramount.
        
    Unique Points per Pole:
        In a mesh-type sphere, the meridians meet at the poles of the
        sphere. This creates a situation where each meridian line
        contributes its own point to a pole. When this box is _not_
        checked, the points are consolidated into a single point shared
        by all the meridians. Otherwise if checked, the points are all
        left to be unique.
        
    Accurate Bounds:
        If the operation is being used to generate a bounding sphere for
        its input geometry, this parameter tells us to use a more
        accurate (but slower) bounding sphere calculation.

    Triangular Poles:
	In a polygon mesh sphere, each polygon is logically a quad.  However,
	at the poles, two points become degenerate.  If Triangular Poles is
	enabled, these quads are turned into triangles.
