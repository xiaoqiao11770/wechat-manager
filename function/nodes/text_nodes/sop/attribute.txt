= Attribute Rename =

#type: node
#context: sop
#internal: attribute
#icon: SOP/attribute
#tags: attrs

"""Renames or deletes point and primitive attributes."""

The Attribute Rename op allows you to manually rename and delete point and
primitive attributes. The RenderMan page remaps attributes especially
for the creation of .rib data streams for use with the RenderMan
renderer.

Accepts geometry of all types for remapping, renaming, and deletion.

== Renderman examples ==

table>>
    tr>>
        td>> `Cd Cs "vertex color" 0`
        td>> Map diffuse color as a RIB per vertex color.
    tr>>
        td>> `uv s "varying float" 0`
        td>> Map texture coordinates to RIB "s" coordinate as a
             single varying float
    tr>>
        td>> `uv t "varying float" 1`
        td>> Map texture coordinates for "t" However, the offset is
             1, meaning that the second coordinate is used as the "t"
             coordinate.

=== Advanced ===

When generating blobby primitives in RIB, the string parameters were hard-coded to an empty list.  SOHO will now search for a detail attribute named "RiBlobby_Strings" (case sensitive).  This value of this string will be parsed using the syntax described in the Python function shlex.split().  The resulting list of strings will be output in the `RiBlobby()` call.

@parameters

== Point ==

    Overview:
        Renaming of point attributes. Specify the existing attribute
        in the first column. Specify the name of the new attribute
        in the second column.
    Delete Attributes:
        Specify existing attributes to delete.
    Keep Attributes:
	Specify existing attributes to not delete.  Any attributes that match
	this, and are not deleted by the delete string, will be kept.  All
	others will be deleted.
    Update Local Variables:
        All local variables referring to the renamed and deleted
        attributes are also renamed or deleted.

== Vertex ==

    Overview:
        Renaming of vertex attributes. Specify the existing
        attribute in the first column. Specify the name of the new
        attribute in the second column.
    Delete Attributes:
        Specify existing attributes to delete.
    Keep Attributes:
	Specify existing attributes to not delete.  Any attributes that match
	this, and are not deleted by the delete string, will be kept.  All
	others will be deleted.

== Primitive ==

    Overview:
        Renaming of primitive attributes. Specify the existing
        attribute in the first column. Specify the name of the new
        attribute in the second column.
    Delete Attributes:
        Specify existing attributes to delete.
    Keep Attributes:
	Specify existing attributes to not delete.  Any attributes that match
	this, and are not deleted by the delete string, will be kept.  All
	others will be deleted.

== Detail ==

    Overview:
        Renaming of detail attributes. Specify the existing
        attribute in the first column. Specify the name of the new
        attribute in the second column.
    Delete Attributes:
        Specify existing attributes to delete.
    Keep Attributes:
	Specify existing attributes to not delete.  Any attributes that match
	this, and are not deleted by the delete string, will be kept.  All
	others will be deleted.

== RenderMan ==

    Overview:
        This tab allows the specification of how attributes will be
        output to a RIB stream. The first column specifies the name
        of the Houdini attribute. The second column is what the RIB
        declaration should be named. The menu of types is the
        allowable types for RenderMan attribute data. The offset
        allows you to offset into the Houdini attribute when
        specifying the RenderMan values.

        For Houdini point attributes, either Varying or Vertex types
        should be used.

        For Houdini primitive attributes, either Uniform or Constant
        types should be used. The Constant type is more efficient
        when dealing with mesh & NURBS primitives, otherwise there's
        really no difference between the two.

        Please see the "Application Note #22" from Pixar for a good
        description on the differences between the different
        RenderMan types.
        
    Add Default Mappings:
        Adds the standard attributes, which can be mapped to the RIB standard variables. Turning on the toggle will add attribute mappings for:
        
        Houdini:
            RIB
        Cd:
            Cs
        Alpha:
            Os
        uv(0):
            s
        uv(1):
            t
        N:
            N
        rest:
            Pr
        width:
            width

Update Local Variables:
    All local variables referring to the renamed and deleted attributes
    are also renamed or deleted.

Overwrite Existing Attributes:
    If the specified destination attribute already exists, it is deleted
    and replaced by the source attribute.

@related

- [Node:sop/attribcreate]
- [Node:sop/attribcopy]
- [Node:sop/attribmirror]
- [Node:sop/attribpromote]
- [Node:sop/attribtransfer]

