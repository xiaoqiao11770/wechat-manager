= VOP SOP =

#type: node
#context: sop
#internal: vopsop
#icon: NETWORKS/vop_sop
#tags: points, filter, tech, attrs

"""Contains a VOP network that can manipulate point attributes."""

This node contains a [VOP network|/nodes/vop] (double-click the node
in the network editor to go inside it) which can use SOP context VOPs
to manipulate attributes on geometry points. (To define a SOP using a
(textual) VEX program instead of a VOP network, use the
[VEX SOP|Node:sop/vex] instead.)

NOTE:
    If there are no points in the geometry, the network will not run.

See [creating a VEX surface node type|/vex/sopnodes] for more information.

This node is useful for creating 'one-off' programs to manipulate geometry in a single surface network. To use a VOP network to define a _reusable_ surface node type, see [creating a VEX surface node type|/vex/sopnodes].

NOTE:
    The `op:/` syntax only works to reference SOPs, not POPs.

@parameters

Point group:
    If you enter the name of a point group in the first input geometry in
    this parameter, only the points in that group will be affected by
    the VOP network.
    
Number of threads:
    The number of separate threads to use to evaluate the points.
    The default is no threading.

    Since Houdini evaluates the VOP network for each point in the input
    geometry, it can benefit greatly from threading on a multi-processor
    or multi-core machine.

Evaluation Node Path:
    VEX functions like `ch()` usually evaluate with respect to this node.
    Providing a path here can override where the path search starts
    from.  This is useful for embedding in a digital asset where you
    would like the top level digital asset to be the search root. 
    
    NOTE:
        These `ch()` expressions are used when using inline code inside the VOP to call outside parameters. This has nothing to do with `ch()` expressions you could put on the parameter UI of a VOP SOP.

@related

- [/nodes/vop]
- [Node:pop/voppop]
- [Node:sop/vex]

