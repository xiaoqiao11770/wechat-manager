= Attribute String Edit =

#type: node
#context: sop
#internal: attribstringedit
#icon: SOP/attribstringedit
#tags: attrs, string

"""Edits string attribute values."""

The attributes may be explicitly specified in the corresponding
attribute text field. Exclusion is specified by preceding an attribute
name with the caret character (^). All available attributes can be
specified by leaving the field blank or entering an asterisk (*) in the
field. If the first attribute is preceded by a caret then all attributes
are assumed to be transferred except where explicitly excluded. In all
other cases, no attributes are assumed except where explicitly included.
Note that only string attributes are considered.

The active filters that are defined in the Editor tab are applied in
sequence to the attributes that are specified in the Attributes tab.

The From and To parameters are any string patterns like `str[1-9:2]` or
`t[xyz]`. The From parameter also allows matching patterns like `str*`
and `str?`.

== Examples ==

table>>
    tr>>
        th>>From
        th>>To
        th>>Produces
    tr>>
        td>>`str1 str2 str3`
        td>>`tx ty tz`
        td>>`tx ty tz`
    tr>>
        td>>`str[1-3]`
        td>>`t[xyz]`
        td>>`tx ty tz`
    tr>>
        td>>`str[1-3]`
        td>>`tx ty tz rx`
        td>>`tx ty tz`
    tr>>
        td>>`str[1-2]`
        td>>`tx ty`
        td>>`tx ty str3`
    tr>>
        td>>`t[xyz]`
        td>>`[XYZ]trans`
        td>>`Xtrans Ytrans Ztrans`
    tr>>
        td>>`bob*`
        td>>`carol*`
        td>>Changes strings that start with `bob` to start with `carol`.
    tr>>
        td>>`*hand*`
        td>>`*foot*`
        td>>Replaces the string `hand` with the string `foot`.
    tr>>
        td>>`*_*`
        td>>`*(1)_*(0)`
        td>>Swap the matched text on either side of the underscore.

Assuming an input of `str1 str2 str3`:
        
table>>
    tr>>
        td>>`str?`
        td>>`t?`
        td>>`t1 t2 t3`
    tr>>
        td>>`*`
        td>>`op:*`
        td>>`op:str1 op:str2 op:str3`
    tr>>
        td>>`*r*`
        td>>`*ring*`
        td>>`string1 string2 string3`
    tr>>
        td>>`*[1-3:2]`
        td>>`foot[11-13:2]`
        td>>`foot11 str2 foot13`
    tr>>
        td>>`*`
        td>>`string[3,1,2]`
        td>>`string3 string1 string2`
            
@parameters

== Attributes ==

Detail:
    String detail attributes to edit.
Primitives:
    String primitive attributes to edit.
Points:
    String point attributes to edit.
Vertices:
    String vertex attributes to edit.

== Editor ==

Number of Filters:
    This SOP can have any number of search/replace patterns, called filters. 
    This parameter shows how many filters have been created. 
    Clicking the [Icon:BUTTONS/add] or [Icon:BUTTONS/minus] buttons will add 
    more filters, or remove existing ones. By default, a single filter is added 
    when the SOP is created, and starts at number 0. Subsequent filters will be 
    named Filter 1, Filter 2, etc.

Filter x:
    Disables the filter. If disabled, the particular search/replace pattern 
    will not be run on the given string attributes.

Use Regular Expressions:
    This will use the extended Perl regular expression syntax to do string 
    replacement, rather than the Houdini pattern replacement syntax.
    The match and replace is done via [Boost Regex | http://www.boost.org/doc/libs/1_51_0/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html].

Global:
    When this option is on, the From pattern is replaced for each
    occurrence in the string. When off, only the first occurrence is
    replaced.
From:
    The string pattern to rename. See examples above.
To:
    The replacement pattern for the string. See examples above.

@related
    - [Node:sop/attribute]

