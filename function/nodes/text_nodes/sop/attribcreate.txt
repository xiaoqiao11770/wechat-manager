= Attribute Create =

#type: node
#context: sop
#internal: attribcreate::2.0
#icon: SOP/attribcreate
#tags: attrs, create
#version: 2.0

"""Adds or edits user defined attributes."""

The attribute can be a float, integer, vector, or string type. If the
local variable name is not specified, the attribute name (all in
upper case) will be used. After adding a user attribute, the local
variable can be used anywhere in operations where local variables are
allowed.

NOTE:
        Strings are added as "Index" attributes, not as actual "String" attributes. This is only important if you are using these with the HDK.

NOTE:
        While each attribute is added in turn, you cannot refer to the previous attribute in the values of the next attribute. Each attribute uses the input geometry as its source, not the result of the previous attribute addition.


@parameters

Group:
    Only elements that belong to this group will be written to by the specified value.

Group Type:
    What the group is made of.

Number of Attributes:
    The number of attributes to add.  Each is added in turn.  However,
    all expressions will refer to the input geometry, not the intermediate
    geometry, so later attributes cannot build on the earlier ones.

Name:
    Name of the attribute.

Existing Name:
    Specifies which action should be taken, if an attribute already exists 
    with the same name.
    
    Generate error on mis-matched attribute:
        An error will be generated and the existing attribute, and its
        values will be left as-is.
        
    Generate warning on mis-matched attribute:
        The existing attribute definition will not be changed, but its
        values will be overwritten if __Write Values__ is enabled. 
        
    Replace existing attribute:
        The existing attribute definition will be replaced completely
        by the new definition.
        
    Use the better type, size and precision:
        The new attribute definition will use the better of the old
        definition's and the requested definition's type, size, and
        precision. For numeric types, float is considered better than
        integer. String and numeric are considered incompatible and
        so the requested type prevails in that case.

Local Variable:
    Name of the local variable that corresponds to the new
    attribute. If you leave this field blank, the local variable is
    the name of the attribute in all UPPERCASE.

    To access individual components of a multi-component attribute,
    the user can append to this name:

    * *X, Y, or Z* for vector attributes.

    * *1, 2, 3, etc.* for float attributes. Note that the numbering
      starts at 1, not 0.

    For example:

    table>>
        tr>>
            th>> Attribute
            th>> Type
            th>> Local variables created
        tr>>
            td>>
                `abc`
            td>> Float, size = 1
            td>>
                `$ABC` = `$ABC1`
        tr>>
            td>>
                `abc`
            td>> Float, size = 2
            td>>
                `$ABC1`, `$ABC2`
        tr>>
            td>>
                `abc`
            td>> Vector
            td>>
                `$ABCX`, `$ABCY`, `$ABCZ`

Class:
    Where to add the attribute to the geometry. Can be a point,
    detail, primitive, or vertex attribute.

Save to Info Block:
    Detail attributes can have their values saved to the info block
    at the start of .bgeo/.geo files.  If this toggle is set,
    the detail attribute will save itself in this way.  This allows
    the value to be retrieved without loading the entire file
    using the [File SOP|Node:sop/file]'s __Info Load__ mode or the `gstat` command
    line.

Type:
    Float, Integer, or String. When __Type__ is "Float", you can use
    the other menu to set a type qualifier, which tells Houdini how 
    the type should be interpreted.
    
    (Vector is included in the type menu for backwards compatibility.
    It is the same as setting __Type__ to "Float" and the other menu
    to "Vector".)

    Vector attributes are a backward compatible setting to specify a
    float attribute which Houdini transforms as a vector.

    Float, integer, and string attributes can also be created as
    arrays.  These allow a varying number of values per element.
    With arrays you cannot specify defaults or alter their
    values.  The __Size__ field also refers to tuple size, so a size
    of 3 means an array of vector 3s, not an array 3 floats long.

    Float attributes may have further type information specified:

Type qualifier (next to Type):
    #id: typeinfo
    
    Guess from name:
        If the name is `N`, the qualifier will be "Normal".
        If the name is `Cd`, the qualifier will be "Color".
        If the name is `v` or `up`, the qualifier will be "Vector".
        Otherwise, the qualifier will be "None".

    None:
        No special treatment.

    Position:
        This attribute is a geometric point. Houdini will transform the attribute as a position.

    Vector:
        Houdini will transform the attribute as a vector.

    Normal:
        Houdini will transform the attribute as a normal.

    Color:
        This attribute is a color.

    Quaternion:
        Houdini will transform the attribute as a quaternion.

Precision:
    Numeric precision to use (when __Type__ is not String). See the
    [Attribute Cast node|Node:sop/attribcast] for more information.

Size:
    #id: size
    
    Number of elements in the attribute

    NOTE:
	For arrays, this specifies the tuple size of the array, not the number of entries of the array.  A value of 3 for a float array will thus make a vector array.
    
Default:
    #id: default

    Default attribute value
    
Write Values:
    Turn this off if you want to ensure the attribute exists but not 
    overwrite any existing values.

Allow Local Vars:
    Turning this off will disable local variables in the __Write Values__ field.  This can provide some minor performance improvement when working with very small geometry.

Value:
    #id: value

    Numeric value to write to the attribute.

String:
    #id: string

    String value to write to the attribute.
    
NOTE:
    Vector attributes are modified by transforms. Float attributes are not.
    
@locals

[Include:standardvariables]

@related

- [Node:sop/attribute]
- [Node:sop/attribcast]
- [Node:sop/attribcopy]
- [Node:sop/attribmirror]
- [Node:sop/attribpromote]
- [Node:sop/attribtransfer]
- [Node:sop/point]
- [Node:sop/primitive]
- [Node:sop/vertex]

