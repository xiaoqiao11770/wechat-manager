#type: node
#context: sop
#internal: polyreduce
#icon: SOP/polyreduce

#tags: polygons, delete, cleanup, model

= PolyReduce =

"""Reduces the number of polygons in a model
while attempting to preserve its shape."""

:vimeo:Poly Reduce
    #id: 116797694

The optional second input's polygons
represent feature edges. The optional third input's polygons may be used
as a reference. The second and third inputs are matched to the first
input mesh by point numbers.

The methods to reduce polygonal models are:

# A percentage of their former size

# A specific number of polys (within a few)

# According to distance from a camera

# A specific list of edges to collapse

Note that as it uses a triangular mesh internally, the polygon
counts all refer to a count in triangles.

A second input for feature edges is provided.
A third input for reference is provided.

TIP:
    To get a uniform distribution of polygons you may need to turn up
    the __Equalize edges__ parameter beyond the 0-1 range, to 10 or
    even 100.

[Include:/shelf/polyreduce#includeme]

@parameters

Polygons:
    #channels: /reduce
    
    The polygons which will be candidates for simplification. Other
    polygons which share points with these might also be affected.

Features:
    #channels: /creases
    
    Which polygons are feature edges.  You may specify an edge group
    here as well as individual edges, primitives or a primitive group.

    TIP:
        You must connect something to the second input for this parameter to work.

== Percentage ==

Choose reduction level with a percentage.
    
    Keep %:
    #channels: /percentage

    The percent of polygons to keep. This is with respect to the
    triangulated mesh.

== Number of Polygons ==

Specify a desired number of polygons.
    
    Keep #:
    #channels: /numpolys

    The desired number of triangles in the simplified model. The
    resulting number may be slightly less than this.

== Distance ==

Reduce polygons based on distance to an object.

    Object:
    #channels: /obj

    The object to use as a reference.
    Dist. Threshold:
    #channels: /distance

    The world distance at which the polygons should be left at
    full detail.
    Minimum %:
    #channels: /minpercent

    A lower bound to the level of reduction.

== Edge List ==

Collapse specific edges in an optimal fashion.

    Edge List:
    List of edges to be candidates for collapsing.

    Limit Number of Collapses:
    Only collapse up to this number of edges, picking the ones
    that affect the geometry least first.

    Number of Collapses:
    The maximum number of edge collapses to perform from the list.
    
Optimization:
    Controls how new points are found when an edge collapses.  An
    optimizaiton of 1 will try to place the point to minimize the
    change to the surface.  A value of 0 will place the point in the
    midpoint of the edge.

Stiffen Border:
    #channels: /borderweight

    Without any constraints, the edges of planar surfaces can
    erode. This controls a bias which penalizes such erosion.
Stiffen Features:
    #channels: /creaseweight

    The amount of penalty to add to the feature edges being
    eroded. 

    TIP:
        You may have to increase this value to see results.

Equalize Edges:
    #channels: /lengthweight

    This bias penalizes the removal of long edges. It tends to
    reduce high aspect ratio triangles at the expense of more
    uniform reduction.

Attrib Weight:
    This bias uses the point attribute "weight" to control the polygon
    reduction.  Points with a larger weight value will be more
    resistant to collapse and better preserve the original surface
    geometry.
    
Topological Weight:
    This biases against vertices which have a large or small number of
    connected edges.  Adding a topological weight results in a more
    uniform triangular mesh topology which can result in better
    tristripping.

Prevent Mesh Inversion:
    #channels: /meshinvert

    When enabled, each reduction is tested to see if it would
    flip a triangle normal. While incurring a slight cost, the
    results are almost always worth it.
Pre-Triangulate:
    #channels: /triangulate

    Converts the mesh to triangles before reduction.  This gives more
    freedom in how the mesh can be reduced.
Prevent Cracking:
    #channels: /keepedges

    This prohibits the removal of any edge that occurs at the
    boundary of the polygons. This ensures no cracks develop
    with unreduced areas.
Use Original Points:
    #channels: /originalpoints

    When it collapses edges, it will use one of the two original
    points instead of finding the optimal interior point.
Frame:
    #channels: /framereference

    When enabled, the specified frame is used as a reference for
    the polygon reduction process. The input geometry should be
    topologically invariant.
Use Reference Input:
    #channels: /referinput

    When enabled, the third input is used as the reference
    geometry on which the polygon reduction process is based.
    The input and reference geometries should be topologically
    equivalent.
    
    The reference geometry is first processed by the polygon reduction
    algorithm. The results of which are then applied to the input
    geometry.

Animating input geometry that is fed through the PolyReduce SOP will
exhibit flickering, since the PolyReduce SOP will give different
results for different edge lengths. To avoid the flickering, turn on
the options "Frame" and "Use Reference Input". Using static geometry
will not produce flickering. The "Frame" option specifies that a
particular frame be used either from the input or the reference
geometry.

@related
    - [Node:sop/dissolve]

