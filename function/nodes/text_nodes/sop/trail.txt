#type: node
#context: sop
#internal: trail
#icon: SOP/trail

#tags: anim, time, tech

= Trail =

"""Creates trails behind points."""

The Trail op takes an input op and makes a trail of each point of the
input op over the past several frames, and connects the trails in
different ways. It will generate trails of any input geometry, whether
it is a cube translating, a deforming surface, or particles. This is
useful for multi-frame ghosting effects and temporal modeling.

When using a [Particle SOP|Node:sop/particle] or [Spring
SOP|Node:sop/spring] as input, it is important to keep the trail
increment to integer values. Otherwise, the trail will not work well.

== Examples ==

    == Velocity Computation ==

        The particles thrown off the end-most points receive a higher
        velocity than those close to the root of the L-system (enable
        Points display in Viewport Display):

        [Image:../images/TrailSOP-Example.jpg]

    == Temporal Modeling ==

        Temporal modeling with the Trail op: the corners of a
        translated and rotated cube are used as a source for the Trail
        op with a _Trail Length_ of 50 frames connected by _Columns_.

        [Image:../images/Houdini-03-1-082.jpg]


@parameters
    Result Type:
        How to construct the trail geometry.
    Trail Length:
        #channels: /length

        Number of frames in trail.
    Trail Increment:
        #channels: /inc

        Number of frames to skip in trail.
    Cache Size:
        #channels: /cache

        Number of frames to cache in RAM.
    Reset Cache:
        Resets the cache memory buffer.
    Evaluate Within Frame Range:
        Clamp evaluation between `$FSTART` and `$FEND`, otherwise may
        evaluate before start frame.
    Connectivity:
        How to create the output mesh.
    Close Rows:
        Closes the rows in the output mesh.
    Velocity Scale:
        #channels: /velscale
	When computing velocity the resulting velocity will be scaled by this
	constant.  Note there is an internal scale of `$FPS` to convert the
	measured change over a frame into a change over a second.
    Velocity Approximation:
        #channels: /velapproximation
	This is the method that is used to approximate the velocity from the
	point positions.

	You can choose between __Backward Difference__, __Central
	Difference__ and __Forward Difference__. Generally, __Central
	Difference__ gives more accurate results.
    Compute Angular Velocity:
	The difference in orientation of successive frames will be used to
	compute an angular velocity, `w`, for the points.
	
	NOTE:
	        The `N` attribute is needed to compute angular velocity. Without `N`, the angular velocities are all zero.
	        
    Match by Attribute:
	Points on successive frames will be identified by using the provided
	integer attribute rather than the point number.
    Attribute to Match:
	The name of the integer or string point attribute to use for matching
	successive frames.


@related
    - [Node:sop/cache]
    - [Node:sop/timeshift]

