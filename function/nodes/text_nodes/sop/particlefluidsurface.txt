#type: node
#context: sop
#internal: particlefluidsurface
#icon: SOP/particlefluidsurface
#index: no

#tags: fluid, surface

= Particle Fluid Surface =

"""Generates a surface around the particles from a particle fluid simulation."""

Connect geometry containing the particle field from a particle fluid simulation to `Input 1` of this node to generate a surface around the particle field.  Any set of points may be used as an input to this SOP, provided the `pscale` point attribute is defined in the input.

If the input is a compressed fluid output from the [Fluid Compress|Node:sop/fluidcompress] SOP, this node will use the `surface` and `vel` VDBs to fill in missing depth and velocity data in deeper parts of the fluid.

Optionally, collision geometry may be subtracted from the surface prior to polygonization using the second input, and the resulting surface can be smoothed in areas controlled by mask volumes connected to the third input.

TIP:
    While trying out surfacing parameters you can get faster feedback by enabling __Use Bounding Box__ and working on a small portion of the input fluid.  Set the __Convert To__ parameter to __Particles__ or __Compressed Fluid Surface__ then hit `Enter` in the viewport to position the bounding box handle.  If viewing the __Compressed Fluid Surface__ you'll see the fastest playback with __Transfer Attributes__, __Subtract Collision Volumes__, and __Closed Boundaries__ turned off.
    
TIP:
    If the input particles have been packed using the [Fluid Compress|Node:sop/fluidcompress] or [Pack Points|Node:sop/packpoints] SOPs and are being read from disk files, ensure that Delay Load Geometry is enabled on the [File|Node:sop/file] or [File Cache|Node:sop/file] SOP used to read them in. With this setup, particles won't actually load from disk until needed for surfacing, saving load time if using a clipping __Region__ or only previewing the __Compressed Fluid Surface Field__ with __Transfer Attributes__ disabled.
    
TIP:
    For very slow moving viscous fluids, the default surfacing settings can lead to some "flickering" in the resulting mesh. To minimize any flickering, try any of the following.
    
    * Turn off __Reseed Particles__ on the [FLIP Solver|node:dop/flipsolver] to avoid introducing new particles during the simulation.
      
    * If using the __Average Position__ surfacing method, turn on __Limit Refinement__ and leave the iterations at 0 or switch to the __Spherical__ method. In either case you will likely need additional smoothing on the __Filtering__ tab, for example by enabling the __Dilate__, __Smooth__, and __Erode__ parameters.
          
    * Possibly disable adaptive polygon meshing by setting __Adaptivity__ to 0. This setting will result in a heavier mesh, but it will be remain more consistent over time and avoid any variations in the mesh normals from changing polygonization.

@parameters

== Surfacing ==

Method:
    The surfacing method used to create the initial VDB signed-distance field from the particles.

    Average Position:
        Use the [VDB From Particle Fluid|Node:sop/vdbfromparticlefluid] SOP to create a surface from the average position of the particles.  This SOP creates an initially smoother surface and has options to create a smoother surface between nearby particles.  It can be more expensive than the __Spherical__ method however.

    Spherical:
        Use the [VDB From Particles|Node:sop/vdbfromparticles] SOP to creates spheres around each particle, almost always requiring smoothing afterward.  It is faster than the __Average Position__ method, however.

Particle Separation:
    The distance between two particles in the fluid simulation. This parameter
    should generally reference the same parameter on the [FLIP Object|Node:dop/flipobject]
    of the input simulation.

[Include:vdbfromparticlefluid#voxelscale]

[Include:vdbfromparticlefluid#influencescale]

[Include:vdbfromparticlefluid#dropletscale]

[Include:vdbfromparticlefluid#limitrefinement]

Union Compressed Fluid Surface:
    If the input fluid was compressed with the [Fluid Compress|Node:sop/fluidcompress] SOP, use the compressed surface fluid VDB to fill in the deeper parts of the fluid below the particle detail.

Erosion Scale:
    Before combining the compressed surface field with the particles, it will be eroded to the compressed fluid's particle bandwidth.  Occasionally seams between the field and particles might be visible; decreasing this parameter value can remove the seams.

=== Output ===

Convert To:
    Specifies the output of the surfacing operation.  The first three options are intended mostly for previews.

    Particles:
        Outputs the input particles unpacked and clipped to any active __Regions__.

    Particles and Compressed Fluid Surface:
        Outputs the input particles and the eroded compressed fluid surface, if any. This option is probably the most effective for previewing FLIP simulations, as it shows both particle surface detail and fills in the surface underneath.  The result is clipped to any active __Regions__.

    Compressed Fluid Surface:
        Output the compressed fluid surface, if the input simulation was compressed with the [Fluid Compress|Node:sop/fluidcompress] SOP.  This field is the representation of the liquid within the [FLIP Solver|Node:dop/flipsolver] along with point velocities taken from the simulation, and can provide a good preview of the final surface.  If __Transfer Attributes__ is disabled and the input to this node is a file with __Delay Load Geometry__ enabled, then packed particles will never be loaded from disk with this option, making it a good method for a quick preview.

    Surface VDB:
        Outputs a raw VDB after surfacing and filtering, but without conversion to polygons.

    Surface Polygons:
        Outputs polygons of the final surfaced mesh.

    Surface Polygon Soup:
        Outputs a polygon soup of the final surfaced mesh.

Isovalue:
    The crossing point of the VDB values that is considered the surface when converting to polygons.

Adaptivity:
    How closely to match the surface when converting to polygons. Higher adaptivities will allow more variation in polygon size, using fewer polygons to express the surface.

Transfer Attributes:
    Transfer point attributes in this list from the particles to the surfaced mesh.

Attribute Radius:
    The radius used for smoothing the sampled attribute values, as a multiplier on __Particle Separation__.  Higher values will smooth out the attribute value more.

Attribute Samples:
    The number of points to sample when transferring particle attributes to the mesh.  Higher samples give smoother attribute values, in particular smoother velocities and motion blur if rendering with [Geometry Velocity Blur|Node:obj/geo#geometry_velocity_blur].

Visualize:
    Visualize the velocity or vorticity attribute of the output geometry.

== Filtering ==

TIP:
    Filtering is often required to further smooth the raw surface generated from the particles, particularly when the surfacing __Method__ is set to __Spherical__.  Enabling the __Dilate__ and __Erode__ filters will blend together nearby particles, closing gaps in the surface, which can be further smoothed with the various __Smooth__ operations.  Setting __Final Smooth__ to __Gaussian__ will yield very smooth flat surfaces, for example in a tank before a splash.  However, it may also blur out any fine detail in the splash area.  To correct this problem enable the __Mask__ parameter on __Final Smoothing__ and create a smoothing mask in areas of low velocity and / or viscosity, so only the slow-moving, less turbulent parts of the liquid will be smoothed.

Dilate:
    Expand the surface outward by the specified number of voxels.  This filter will apply only to masked areas if its __Mask__ parameter is enabled.

Smooth:
    Smooth the surface using the specified filter for the number of iterations.  This filter is applied after any dilation and will apply only to masked areas if its __Mask__ parameter is enabled.

Erode:
    Reduce the surface inward by the specified number of voxels.  This filter is applied after any smoothing and will apply only to masked areas if its __Mask__ parameter is enabled.

Final Smooth:
    Smooth the surface again using the specified filter for the number of iterations.  This filter is applied after any erosion and will apply only to masked areas if its __Mask__ parameter is enabled.

=== Mask ===

Velocity Range:
    Generate a filter mask where surface areas with velocity below the minimum speed get full filtering, while areas above the maximum speed get none.

Vorticity Range:
    Generate a filter mask where surface areas with vorticity below the minimum speed get full filtering, while areas above the maximum vorticity get none.

Collision Offset:
    #channels: /colmaskoffset
    Generate a filter mask within the specified world-space offset of any collision objects or volumes connected to the second input.

Mask Input:
    Use the filter mask connected to the third input in the specified group, if any.

Combine Operation:
    The operation used to combine multiple filter masks.

Mask Smooth:
    Smooth the combined filter mask before using it to mask any surface filtering.

Limit Bandwidth:
    Restrict the mask to allow filtering only within the specified voxel bandwidth from the original raw surface generated from the particles.

Visualize Mask:
    Visualize the mask on the output surface.

    TIP:
        The above parameters will be enabled if __Visualize Mask__ is on, so it can be quicker to modify the masking parameters while visualized, but before being applied to any of the above filters with their __Mask__ parameter.

== Regions ==

Region Voxel Scale:
    The various regions are represented internally as VDBs with a base resolution of __Particle Separation__ multiplied by __Voxel Scale__.  This parameter scales that voxel size up for speed in creating regions; however, the resulting clipping operations might not be as precise as at higher resolutions. Generally you should not reduce this value below 1.

=== Collisions ===

Subtract Collision Volumes:
    When this option is enabled, geometry or volumes specified in Input 2 are subtracted from the fluid surface.

Collision Offset:
    #channels: /collisionoffset
    The distance from the collision volume at which subtraction occurs.

=== Bounding Box ===

Use Bounding Box:
    Restrict the fluid surface to the specified bounding box.

Size:
    The size of the bounding box.

Center:
    The center of the bounding box.

Close Boundaries:
    Create closed walls at the boundaries of the bounding box. Otherwise the surface will be clipped at the boundaries.

==== Flattening ====

Flatten Geometry:
    Flatten the fluid surface to the specified __Flatten Distance__.  This operation works well with a mesh that is already fairly close to flat, but can lead to overlapping polygons with splashes and waves at the boundaries. Enabling __Rebuild SDF__ will help ensure smooth surfaces around the edges.

Rebuild SDF:
    Rebuild the VDB signed-distance field after flattening, which can remove artifacts from flattening splashes around the boundary and provide a smoother final mesh.

Output Flattened Attribute:
    Output a `flattened` point attribute on the polygonal geometry that indicates how far the point lies within the __Flatten Distance__ to the boundary, normalized from zero to one.  This attribute can be used to scale procedural displacement shading to apply only on the flattened part of the fluid.

Suppress Near Collisions:
    Do not flatten the fluid near any collision geometry or volumes, as specified by plugging them into the second input.  This option helps avoid flattening the bottom of a fluid when there is a collision object representing the bottom of the fluid domain, such as a riverbed.

Collision Bandwidth:
    The distance from any collision input at which to suppress flattening if __Suppress Near Collisions__ is enabled, specified as multiples of the __Particle Separation__.

Plansvne:
    The plane along which to flatten.

Shape:
    The shape in which to flatten, centered in the middle of the bounding box.

Water Level:
    The resting height of the surrounding water.

Max Height:
    The geometry will be clipped if farther above the __Water Level__ than this value.

Flatten Distance:
    The fluid will be flattened to this distance within the flattening region with a smooth falloff.

Pad Bounds:
    The size of the area to extend the flattening plane around the bounding box.

=== Camera ===

Camera:
    Clip the fluid surface to the specified camera's frustum.  If the input particles are packed geometry and loaded with Delay Load Geometry, no particles will be loaded from disk outside this region.

Z Near:
    The distance from the camera to start the clip region.

Z Far:
    The distance from the camera to stop the clip region.

Use Camera's Window:
    If set, the camera's window scale, offset, and crop parameters will be used in addition to the following __Window X/Y__ settings.

Window X/Y:
    The min/max portions of the camera's view to fill with the clip region.  This allows you to add padding to ensure good boundary conditions or focus into a key area of the scene.

Close Boundaries:
    Create closed walls at the boundaries of the frustum. Otherwise the surface will be clipped at the boundaries.

@inputs

Particles and Volumes:
    Particle geometry for surface generation and optional volumes.

Collision Objects and Volumes:
    Geometry and SDF volumes to subtract from the fluid surface.

Mask Volumes:
    Fog volumes to be used as a mask to surface filtering.

@outputs

Output:
    The fluid particles, VDB, or polygonal surface.

@related

- [Node:dop/flipobject]
- [Node:dop/flipsolver]
- [Node:sop/vdbfromparticlefluid]
- [Node:sop/vdbfromparticles]
- [Node:sop/fluidcompress]
