#type: node
#context: sop
#internal: curve
#icon: SOP/curve

#tags: create, curves, model, core

= Curve =

"""Creates polygonal, NURBS, or Bezier curves."""

You can optionally connect geometry to the node's input and the curve
will snap to its points. Use the __Keep input geometry__ to make the
snapping template part of the output geometry for this node.

[Include:/shelf/curve#includeme]

@parameters

Primitive Type:
    Type of geometry to create.


    Polygon:
        Create a polyline.
    NURBS:
        Create a NURBS curve.
    Bezier:
        Create a Bezier curve.

Method:
    Drawing method (how to interpret mouse clicks in the viewer and
    coordinates in the field below).

    CVs:
        Click to place control vertices. When __Primitive type__ is
        "Polygon", this simply places polygonal vertices.
    Breakpoints:
        Click to place breakpoints, and have Houdini calculate
        positions for the control vertices. When __Primitive type__
        is "Polygon", this simply places polygonal vertices.
    Freehand:
        Drag to draw a multi-point line, which Houdini then fits a
        curve to using the options on the __Fitting properties__
        tab.

Coordinates:
    #id: coords

    Normally you will use this operator in the viewer and simply
    click to indicate coordinates; however, if you need to you can
    also use a space-separated list of coordinates in this field to
    specify points.

    Coordinates can be specified in the following formats:
    
    `<<x>>,<<y>>,<<z>>` |
        Absolute 3D coordinates, with a default weight of 1.
    
    `<<x>>,<<y>>,<<z>>,<<w>>` |
        Absolute 3D coordinates and weighting factor.
    
    `@<<x>>,<<y>>,<<z>>` |
        3D coordinates relative to the previous point in the list.
    
    `@<<x>>,<<y>>,<<z>>,<<w>>` |
        3D coordinates and weighting factor relative to the previous point in the list.
    
    `p<<n>>` |
        Reference the coordinates of point number <<n>> in the input geometry.
        
    `P<<n>>` |
        Copy the coordinates of point number <<n>> in the input geometry.
    
    `<<x>>b<<u>>, <<x>>b[<<u>>]` |
        For example, `0b0, 0b[1]...`. Creates a point at breakpoint number <<u>> of curve number
        <<x>> in the input geometry.
    
    `<<x>>b[<<u>>,<<v>>]` |
        For example, `0b[0,0]...`. Creates a point at breakpoint (<<u>>,<<v>>) of the surface number
        <<x>> in the input geometry.

== Curve Properties ==

Close:
    #id: close

    Automatically closes the curve.

Reverse:
    Build the curve in the opposite direction.  This reverses the
    vertex order, but does not affect the point order.

Normalize Basis:
    Normalizes the curve's basis.

Order:
    #id: order

    The order of the NURBS or Bezier curve. Higher order curves
    give more control vertices and smoother curve interpolation
    between breakpoints.

== Fitting Properties ==

    These parameters control the fitting of the curve to the points
    you draw when __Method__ is "Freehand".

    Parameterization:
        #id: param

        How to assign U values to breakpoints. This mainly affects
        the mapping of textures onto surfaces you create with the
        curve later.

        Uniform:
            Make each breakpoint have consecutive integral U values.
            So, the first breakpoint is U=1.0, the second breakpoint
            is U=2.0, and so on.

            This makes it easy to relate U values to breakpoint
            locations, but results in uneven distribution of U
            values along the curve (bunched up when the distance
            between breakpoints is short, and stretched out when the
            distance between breakpoints is long).

        Chord length:
            Assigns U values along the curve based on the actual
            distance along the curve from the beginning. So,
            breakpoints have arbitrary U values based on how far
            along the curve they are.

            This evenly distributes U values along the curve and
            makes it easy to relate U values to positions on the
            curve.

        Centripetal:
            Like "Chord length" except instead of making U values
            proportional to the distance between breakpoints, they
            are proportional to the square root of the distance.

    Tolerance:
        #id: tolerance

        How close the fitted curve should be to the points you drew.
        Large values give a looser fit but a more efficient curve,
        while smaller values give a better fit but a heavier, more
        complex curve.

    Smoothness:
        #id: smooth

        Extra smoothing of the fitted curve. Use this to smooth out
        rough patches.

Preserve Sharp Corners:
    #id: keepshape

    Try to preserve sharp turns in the freehand points.

Keep Input Geometry:
    Include the input geometry in this node's output.

@related
- [Node:sop/add]
- [Node:sop/fit]
