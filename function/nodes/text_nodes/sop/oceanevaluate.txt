= Ocean Evaluate =

#type: node
#context: sop
#icon: SHELF/wave
#internal: oceanevaluate

"""Deforms input geometry based on ocean "spectrum" volumes."""

This node uses volumes generated by the [Ocean Spectrum node|Node:sop/oceanspectrum] connected to the second input to deform geometry in the first input.

@parameters

Time:
	The time at which to evaluate the ocean surface.

Downsample:
	Downsample the incoming ocean spectrum before evaluating any ocean values.  This parameter specifies the number of powers of two to remove from the resolution of the incoming ocean spectrum. For example, if the spectrum was originally specified at resolution 10 to generate a 1024 x 1024 volume, downsampling by 2 will evaluate ocean volumes at resolution 8, a 256 x 256 volume.

	TIP:
		The same high resolution spectrum can be processed by multiple Ocean Evaluate nodes, for example one with no downsampling to deform surface geometry, and another at a downsampled resolution to generate the more expensive volume or point output.

Depth Falloff:
	Specifies how deformation and velocity values falloff as the input points lie below the ocean surface.  This value also controls the rank of the calculation volumes that are output if __Rest Displacement__ or __Rest Velocity__ is enabled: 2D if falloff is __None__ but 3D otherwise.

	None:
		Values do not falloff below the surface.
	Exponential:
		All values have the same exponential falloff below the surface.
	Exponential by Frequency:
		Values have an exponential falloff that is scaled per wave frequency.  With this setting the contribution from small, high frequency waves falls off very quickly.  It is the most accurate setting and most expensive to compute.

Falloff Scale:
	An additional scale applied to the exponential falloff modes in __Depth Falloff__.  For the most physically accurate values this should be set to 1 in conjunction with the __Exponential by Frequency__ mode.

Max Depth:
	The maximum depth for the evaluated ocean volumes.  All input positions deeper than this value will be clamped before sampling the ocean values.

Depth Divisions:
	The number of divisions along the depth axis if the computed ocean are 3D, as specified by the __Depth Falloff__ parameter.  Higher values are more accurate but more expensive to calculate.


== Geometry == (geometry)

Deform Input Geometry:
	Deform the input geometry by the calculated ocean deformations.

Preview Grid:
	Output a deformed grid exactly the size of the underlying ocean volume.  This preview grid is fastest to evaluate and provides a simple way to view the deforming ocean surface.

Point Velocity:
	Add a velocity point attribute to the output geometry.

UV Attribute:
	Add a `uv` attribute to the output geometry that can be used for texture lookups into the texture maps created with the __Export to Texture__ tab..

Cusp Attribute:
	Add a `cusp` point attribute to the output geometry that represents the sharpness of the wave peaks at any point, with values ranging from below 0 if the wave is stretched out, to greater than 1 if the wave peak is so sharp it has inverted.

Cusp Direction Attribute:
	Add a `cuspdir` vector point attribute to the output geometry that points in the direction of the wave peaks.

Foam Attribute:
	Add a `foam` point attribute to the output geometry that holds the results of a simple simulation of the `cusp` attribute decaying over time.  The parameters for the simulation can be found on the __Foam Solver__ tab.

Visualize Attribute:
	Visualize the `cusp` or `foam` attribute by color.

Attribute Ramp:
	The color ramp with which to visualize the `cusp` or `foam` attribute.

== Volumes == (volumes)

Surface SDF:
	Generate a `surface` SDF volume of the specified size and resolution.

Surface Depth:
	The __Surface SDF__ will represent the ocean at the specified depth.  
	This differs from simply offsetting the output surface SDF as it
	takes into account the __Depth Falloff__ setting.

Velocity:
	Generate a `vel` velocity volume of the specified size and resolution.

Smoothing:
	Controls the radius of the points used to generate volumes.  Higher values are more expensive but give smoother volumes.

Size:
	The size of the generated volumes.

Center:
	The origin of the generated volumes.

Uniform Sampling:
    It is often advantageous to make sure voxels in a volume are
    cubes.  This option allows the resolution of the volume to be
    specified without having to worry about matching the size and
    resolution fields.  This parameter controls which axis is
    divided into Uniform Sampling Divisions.

Uniform Sampling Divs:
    The number of voxels to divide the __Uniform Sampling__ axis into.
    The other axes will be divided into the number of cells that
    fit for this voxel size.

Sampling Divs:
    When using non-uniform voxel cells, each dimensions resolution
    can be specified here.

Div Size:
    The uniform size of the voxels, when specifying the voxel size directly.  The given sized box will be filled by voxels of this size.

Max Extrap Cells:
	When generating velocity volumes, how many voxels from the ocean surface to extrapolate velocity values. 

=== Rest Volumes ===

Rest Displacement:
	Output the internally computed displacement volume.  Samples taken from this volume should be in rest position.

Rest Velocity:
	Output the internally computed velocity volume.  Samples taken from this volume should be in rest position.

Rest Cusp:
	Output the internally computed cusp volume.  Samples taken from this volume should be in rest position.

Rest Cusp Direction:
	Output the internally computed cusp direction volume.  Samples taken from this volume should be in rest position.

=== Foam Solver ===

Rest Foam:
	Output the internally computed foam volume.  Samples taken from this volume should be in rest position.  The Ocean Shader uses this volume as a __Foam Mask__ after being saved to a texture on the __Export to a Texture__ tab.

Reset Simulation:
	Reset the state of the foam simulation, which may be necessary after changing the resolution of the ocean grid or the __Downsample__ parameter.

Start Frame:
	The starting frame for the foam simulation.  Setting this to a frame earlier than the first frame allows a pre-roll of the simulation.

Cusp Scale:
	Scale the incoming cusp attribute by this factor before accumulating foam.

Decay:
	The amount of foam to decay each frame.

Min Velocity:
	The minimum velocity for waves that can accumulate foam.

Max Velocity:
	The maximum velocity for waves that can accumulate foam.

Min Cusp:
	The minimum cusp value that can accumulate to foam.

Max Cusp:
	The maximum cusp value that can accumulate to foam.

== Points == (points)

Points from Volume:
	Generate points with velocity in the volumetric intersection of the ocean surface and the specified box.

Point Separation:
	The smallest distance between any two of the generated points 
	in the initial configuration.

Jitter Seed:
	Random seed for creating jitter.

Jitter Scale:
	The amount of jitter to apply to the positional values of the points.  

Min Rest Depth:
	The minimum depth of points relative to the ocean surface.

Max Rest Depth:
	The maximum depth of points relative to the ocean surface.

Box Size:
	The size of the box in which to generate points.

Box Center:
	The origin of the box in which to generate points.

Pad Scale:
	The rest configuration of points is generated by evaluating the maximum possible ocean displacement at time zero.  This will usually be sufficient padding, but with extreme displacement it might be necessary to increase the padding scale in this parameter.

Create Output Group:
	Create a group containing the generated points.

Output Group:
	The name of the generated output point group.

== Export to Texture == (export)

This tab controls exporting the displacement and cusp volumes to textures that can be sampled during rendering.  Most of the parameters here are exposed from the [Composite|Node:out/comp] output node.

Channels:
	Controls where the displacement, cusp, and / or foam values are stored in the texture.

Raster Depth:
	Controls the bit depth of the generated textures.  If the texture format supports 16-bit float, this bit depth can save space with little degradation in rendering.

@related

* [Ocean Spectrum|Node:sop/oceanspectrum]
* [Wave Vector|Node:vop/wavevector]
* [Volume FFT|Node:sop/volumefft]
* [Volume|Node:sop/volume]
* [Points from Volume|Node:sop/pointsfromvolume]
* [Composite|Node:out/comp]
