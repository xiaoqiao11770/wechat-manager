#type: node
#context: sop
#internal: vdb
#icon: COMMON/openvdb

#tags: create, model

= VDB =

"""Creates one or more empty/uniform VDB volume primitives."""

[Include:volume_types]

TIP:
    If you connect a VDB to this node's input, and it will create a VDB with the same Dimension parameters.

@parameters

== Type ==

Enable:
    Whether to create this VDB or not.  Can be used to temporarily
    remove a VDB from the stream without having to delete its
    parameters.

Class:
    The semantic meaning of the volume.  This controls how the raw volume
    values are interpreted.  Certain VDB tools operate on certain
    types of volumes, such as level sets, and use the class to help
    determine how to treat their inputs.

    Other:
	No special meaning is assigned to the volume's data.

    Level Set:
	The volume is treated as a narrow-band signed distance field
	level set.  The values are expected to define positive and negative
	distances to a surface field up to a certain bandwidth.

    Fog Volume:
	The volume represents a density field.  Values should be
	positive with zero representing empty regions.

    Staggered Vector Field:
	The volume's vector values are to be treated as lying on
	the faces of the respective cells, not the centers.

Name:
    The value for the primitive's `name` attribute.
    This is useful for referring to the primitive in later nodes, using the `@name=foo` syntax.

Storage Type:
    The datatype to store in the voxels. VDB allows true vectors at each voxel, while standard Houdini volumes use three scalar volumes to do the same thing.

Precision:
    The numerical precision (32-bit or 64-bit) to use when using a __Storage Type__ is "Float" or "Vector float".

Background Value:
    The "default" value for any voxel not explicitly set.
    Voxels with this value use essentially no memory.

== Visualization ==

Display Mode:
    How this VDB primitive will be displayed in the viewport.  This does not affect the underlying VDB at all, just its display-time appearance.

    Smoke:
    	The volume is rendered as smoke.  Values of 0 or less
    	are fully transparent.  If lights are present, they
    	are self-shadowed with the volume.

    Rainbow:
    	The volume is rendered as transparent smoke.  Values
    	of 0 or less are fully transparent.  Lights are
    	ignored, reducing computation time.  Instead, the
    	smoke is colored a rainbow hue according to the
    	position in the bounding box.

    Isosurface:
    	An isosurface of equal valued voxels is extracted from
    	the volume and displayed.  This __Display Isocontour__ is
    	used to determine which isosurface is extracted.

    Invisible:
    	The contents of the volume are not rendered at all.

Display Density:
    Controls the fall off rate for the smoke visualization.  Lower values
    allow the smoke to be more transparent.  

Display Isocontour:
    Which isocontour to extract from the VDB.  The default of 0 is good for
    SDF VDBs.  Fog style VDBs would work better with something non-zero,
    such as `0.5`.

== Voxel Size ==

    Clicking this tab sets the VDB to use uniformly sized cubic voxels.

    Voxel Size:
        The size (length of a side) of the cubic voxels, in Houdini units.

== Frustum ==

    Clicking this tab sizes and positions the voxels of the VDB based on a frustum calculation.
    This may be useful for aligning the VDB to a fixed viewpoint or a viewpoint not corresponding to actual camera.

    Size:
        The size of a frustum. This frustum is divided into voxels by the __Uniform Sampling__ parameter below.
    
    Center:
        The position of the box in 3D space.
    
    Taper:
        How much larger the -Z face of the box is compared to the +Z face.
        This is useful for aligning VDBs to cameras.

== From Camera ==

    Clicking this tab sizes and positions the voxels of the VDB based on the frustum of a [camera object|Node:obj/cam].
    This frustum is divided into voxels by the __Uniform Sampling__ parameter below.

    Camera:
        The path to the camera object to align the VDB to, for example `/obj/cam1`.
        
    Z Near:
        The distance, in Houdini units, from the camera to the near side of the frustum used to calculate voxel size.
    
    Z Far:
        The distance, in Houdini units, from the camera to the far side of the frustum used to calculate voxel size.
    
    Use Camera's Window:
        Use the camera's window scale, offset, and crop parameters (in addition to the __Window X__ and __Window Y__ parameters below) to get the size of the frustum.
    
    Window X:
        The min/max horizontal positions of the camera's view to fill with voxels.
    
    Window Y:
        The min/max vertical positions of the camera's view to fill with voxels.
    
Uniform Sampling:
    Which along which to divide the frustum by the __Uniform sampling divs__ parameter.

Uniform Sampling Divs:
    The number of voxels to divide the __Uniform Sampling__ axis into. The other axes will be divided into the number of cells that fit given the resulting voxel size.

Sampling Divs:
    When __Uniform sampling__ is "Non square", lets you specify a rectangular voxel size.

Div Size:
    When __Uniform sampling__ is "By Size", lets you specify the size of a voxel directly.

Z Scale:
    Scale the voxel resolution along the Z-axis.
    This is useful for camera VDBs where you may want less detail along the camera viewing direction (depth).
    
    TIP:
        By setting the __Uniform Sampling__ to __X-Axis__, you can then specify the number of voxels you want across the X axis of the screen directly, let the Y-axis be auto-computed to preserve aspect, and then adjust this scale factor.



	



