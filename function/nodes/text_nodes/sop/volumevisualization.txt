#type: node
#context: sop
#internal: volumevisualization
#icon: SOP/volumevisualization

#tags: volumes, merge

= Volume Visualization =

"""Adjusts attributes for multi-volume visualization."""

The Volume Visualization operator adds detail attributes to the volume
to allow for visualizations of volumes that requires multiple volumes
to be joined together.

For example, one may want to take a density volume and color it 
according to three separate Cd.x, Cd.y, and Cd.z volumes.

There are two major components to the viewport volume visualization.

First there is the opaque smoke. This smoke occludes geometry behind 
it. It also casts shadows from light sources. Finally, a diffuse color 
can be specified for what light colors it reflects rather than absorbs.

NOTE:
    A density of 1 means a density of 1 unit of smoke per unit of 
    volume, this is will not fully block light.

Second there is an emissive, glowing, component. This field is added 
directly to the final image, washing out but not occluding geometry 
behind it. This is useful for fire-style effects. It can also be 
useful for visualizing data because it allows interior detail to shine 
through the outer layers.

NOTE:
    Depending on your video card, you may see the emission be clipped 
    to zero where ever there is no density. You can work around this 
    by setting the density slightly non-zero everywhere.

@parameters

Minimum, Maximum:
    The range of the density volume that will be remapped into the 
    0..1 range. This is the default range for all the other volumes 
    unless the override is specified.
    
Density Scale:
    Fixed multiplier on the density field to control how opaque the 
    volume is. If you are using a larger scene scale, you may need a 
    smaller density scale.

    NOTE:
        Fog density is density per unit, and is independent of the 
        resolution. So the same sized box, at 100 or 10 divisions, 
        should be the same opacity. This means very small boxes will 
        become transparent, especially if HDR rendering isn't on. You 
        can enable HDR rendering on the __Effects__ tab of the 
        [Display Options|/ref/windows/displayopts_3d] dialog.
    
Shadow Scale:
    An additional multiplier on the density field, applied after the 
    density scale, when the volume is used for lighting. This is the 
    equivalent of multiplying the shadow intensity of all the lights 
    by this value.
    
Max Vis Res:
    By default volumes are restricted to a maximum of 128 voxels on 
    each side. This ensures reasonably fast shading times for lighting 
    and avoids running into texture memory problems. This parameter 
    lets you override this, either to make a lower res volume for 
    faster previsualization, or to allow the volume to render with full
    resolution.

Field:
    The name of the volume primitive to use for this operation. The 
    value will be matched against the name attribute of the volume 
    primitives to determine a match. * and ? can be used to allow for 
    looser matches, the result will be the first matched primitive.
    
    If this is a color field (diffuse, emission color), then if one 
    volume is specified it is treated as a monochromatic field. If 
    multiple volumes are specified, they are tied to the red, green, 
    and blue channels.
    
Range:
    Each field can have its own mapping range. The volume will be 
    linearly remapped from this range into the 0..1 range.
    
Mode:
    Controls the use of the ramp. If set to No Ramp, the volume's 
    values are used unclamped and unaffected by the ramp. Clamped Ramp 
    will clamp the volume's values to the 0..1 range and then apply 
    the ramp. Perioidic Ramp will take the modulus of the volume's 
    values with 1 and send that to the ramp. This can be useful to 
    create checkerboard or striped effect to better see large ranges 
    of values.
    
Ramp:
    The volume's values, after converting by the range specification, 
    are looked up in the ramp to get the final value. If it is a color 
    ramp then if there is one volume bound, that volume's value is 
    looked up to get the color. If two or three volumes are bound, 
    each volume in turn is looked up to get the red, green, and blue 
    values independently.

@related

- [Node:sop/volumevop]
- [Node:sop/isooffset]
- [Node:sop/iso]

