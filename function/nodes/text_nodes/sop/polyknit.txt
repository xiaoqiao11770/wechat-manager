#type: node
#context: sop
#internal: polyknit
#icon: SOP/polyknit

#tags: merge, polygons, fill

= PolyKnit =

"""Creates new polygons to join existing polygons."""

Polygons are created by specifying a list of input points from
which to "knit" the new polygons. Both triangles and quadrilaterals can
be created. This tool allows you to specify a minimum number of points
along which it can find the points to knit. For example, with only four
points, PolyKnit can find two paths of unshared connected edges and use
their points to knit polygons. Each of the paths is called a "meta"
edge. The polygons that are created along these paths can either be
triangles (T) or quadrilaterals (Q). The paths are computed to minimize
the number of edges that are produced (and thus minimizing the number of
polygons that are produced).

It is important to note that points are specified in a strip-like
fashion. The points should be specified in an order such that they
zig-zag along the geometry to knit. The first two points, for example,
should each belong to the opposite geometries that are to be knitted
together.

[Include:/shelf/polyknit#includeme]

== Examples ==

    `0 1 2 3 4` :
        Builds 3 triangles (0, 1, 2), (1, 2, 3), (2, 3, 4).
    `0 1 2 q 3 4` :
        Builds 1 triangle and 1 quad (0, 1, 2), (1, 2, 3, 4).
    `T 0 1 2` :
        Builds triangles using point 0, and the points along the
        shortest path from point 1 to point 2. Points 1 and 2 must be
        connected.
    `Q 0 1 2 3` :
        Builds quads using the points from the shortest path connecting
        points 0 and 3, and 1 and 2.

@parameters
    Point List:
        Specifies the list of points which to knit. The following
        special characters can be used:

        t:
            Currently building triangles
        q:
            Currently building quadrilaterals
        Q:
            Currently building "meta" quadrilaterals
        T:
            Currently building "meta" triangles
    Collapse Quads:
        Remove extra vertex from quadrilaterals that are actually
        triangles.
    Remove Degenerate Polygons:
        Do not generate degenerate polygons (those collapsing to a
        single point or edge).
    Flip Polygon Normals:
        Reverse order of vertices.
    Unique Points:
        Do not reuse points from the input geometry. Only applicable if
        Keep Original is on.
    Update Point Normals:
        Recomputes point normals if they exist.
    Keep Original:
        Keep the input geometry.

@related
    - [Node:sop/polycap]
    - [Node:sop/polyloft]
    - [Node:sop/polystitch]

